Grammar:

Rule 0     S' -> prog
Rule 1     prog -> decl_list
Rule 2     decl_list -> decl
Rule 3     decl_list -> decl_list decl
Rule 4     decl -> decl_init
Rule 5     decl -> ID : type_func ;
Rule 6     decl -> ID : type_array_sized ;
Rule 7     decl -> ID : type_simple ;
Rule 8     decl_init -> ID : type_func = { opt_stmt_list }
Rule 9     decl_init -> ID : type_array_sized = { opt_expr_list } ;
Rule 10    decl_init -> ID : type_simple = expr ;
Rule 11    opt_stmt_list -> empty
Rule 12    opt_stmt_list -> stmt_list
Rule 13    stmt_list -> stmt
Rule 14    stmt_list -> stmt_list stmt
Rule 15    stmt -> closed_stmt
Rule 16    closed_stmt -> simple_stmt
Rule 17    simple_stmt -> expr ;
Rule 18    simple_stmt -> do_while_stmt
Rule 19    simple_stmt -> while_stmt
Rule 20    simple_stmt -> for_stmt
Rule 21    simple_stmt -> if_stmt
Rule 22    simple_stmt -> decl
Rule 23    simple_stmt -> block_stmt
Rule 24    simple_stmt -> return_stmt
Rule 25    return_stmt -> RETURN opt_expr ;
Rule 26    block_stmt -> { stmt_list }
Rule 27    if_header -> IF ( opt_expr )
Rule 28    if_stmt -> if_header { opt_stmt_list }
Rule 29    for_header -> FOR ( opt_expr ; opt_expr ; opt_expr )
Rule 30    for_stmt -> for_header { stmt_list }
Rule 31    while_header -> WHILE ( opt_expr )
Rule 32    while_stmt -> while_header { stmt_list }
Rule 33    do_while_stmt -> DO stmt while_header ;
Rule 34    opt_expr_list -> expr_list
Rule 35    opt_expr_list -> empty
Rule 36    expr_list -> expr
Rule 37    expr_list -> expr , expr_list
Rule 38    opt_expr -> expr
Rule 39    opt_expr -> empty
Rule 40    expr -> expr1
Rule 41    expr1 -> expr2
Rule 42    expr1 -> lval = expr1
Rule 43    lval -> ID index
Rule 44    lval -> ID
Rule 45    expr2 -> expr3
Rule 46    expr2 -> expr2 LOR expr3
Rule 47    expr3 -> expr4
Rule 48    expr3 -> expr3 LAND expr4
Rule 49    expr4 -> expr5
Rule 50    expr4 -> expr4 GE expr5
Rule 51    expr4 -> expr4 GT expr5
Rule 52    expr4 -> expr4 LE expr5
Rule 53    expr4 -> expr4 LT expr5
Rule 54    expr4 -> expr4 NEQ expr5
Rule 55    expr4 -> expr4 EQ expr5
Rule 56    expr5 -> expr6
Rule 57    expr5 -> expr5 - expr6
Rule 58    expr5 -> expr5 + expr6
Rule 59    expr6 -> expr7
Rule 60    expr6 -> expr6 % expr7
Rule 61    expr6 -> expr6 / expr7
Rule 62    expr6 -> expr6 * expr7
Rule 63    expr7 -> expr8
Rule 64    expr7 -> expr7 ^ expr8
Rule 65    expr8 -> expr9
Rule 66    expr8 -> ! expr8
Rule 67    expr8 -> - expr8
Rule 68    expr9 -> DEC expr9
Rule 69    expr9 -> INC expr9
Rule 70    expr9 -> group
Rule 71    expr9 -> expr9 DEC
Rule 72    expr9 -> expr9 INC
Rule 73    group -> factor
Rule 74    group -> ID index
Rule 75    group -> PRINT expr
Rule 76    group -> ID ( opt_expr_list )
Rule 77    group -> ( expr )
Rule 78    index -> [ expr ]
Rule 79    factor -> FALSE
Rule 80    factor -> TRUE
Rule 81    factor -> STRING_LIT
Rule 82    factor -> CHAR_LIT
Rule 83    factor -> FLOAT_LIT
Rule 84    factor -> INT_LIT
Rule 85    factor -> ID
Rule 86    type_simple -> VOID
Rule 87    type_simple -> STRING
Rule 88    type_simple -> CHAR
Rule 89    type_simple -> BOOLEAN
Rule 90    type_simple -> FLOAT
Rule 91    type_simple -> INTEGER
Rule 92    type_array -> ARRAY [ ] type_array
Rule 93    type_array -> ARRAY [ ] type_simple
Rule 94    type_array_sized -> ARRAY index type_array_sized
Rule 95    type_array_sized -> ARRAY index type_simple
Rule 96    type_func -> FUNCTION type_array_sized ( opt_param_list )
Rule 97    type_func -> FUNCTION type_simple ( opt_param_list )
Rule 98    opt_param_list -> param_list
Rule 99    opt_param_list -> empty
Rule 100   param_list -> param
Rule 101   param_list -> param_list , param
Rule 102   param -> ID : type_array_sized
Rule 103   param -> ID : type_array
Rule 104   param -> ID : type_simple
Rule 105   empty -> <empty>

Unused terminals:

    ELSE
    AND
    NOT
    OR
    AUTO

Terminals, with rules where they appear:

!                    : 66
%                    : 60
(                    : 27 29 31 76 77 96 97
)                    : 27 29 31 76 77 96 97
*                    : 62
+                    : 58
,                    : 37 101
-                    : 57 67
/                    : 61
:                    : 5 6 7 8 9 10 102 103 104
;                    : 5 6 7 9 10 17 25 29 29 33
=                    : 8 9 10 42
AND                  : 
ARRAY                : 92 93 94 95
AUTO                 : 
BOOLEAN              : 89
CHAR                 : 88
CHAR_LIT             : 82
DEC                  : 68 71
DO                   : 33
ELSE                 : 
EQ                   : 55
FALSE                : 79
FLOAT                : 90
FLOAT_LIT            : 83
FOR                  : 29
FUNCTION             : 96 97
GE                   : 50
GT                   : 51
ID                   : 5 6 7 8 9 10 43 44 74 76 85 102 103 104
IF                   : 27
INC                  : 69 72
INTEGER              : 91
INT_LIT              : 84
LAND                 : 48
LE                   : 52
LOR                  : 46
LT                   : 53
NEQ                  : 54
NOT                  : 
OR                   : 
PRINT                : 75
RETURN               : 25
STRING               : 87
STRING_LIT           : 81
TRUE                 : 80
VOID                 : 86
WHILE                : 31
[                    : 78 92 93
]                    : 78 92 93
^                    : 64
error                : 
{                    : 8 9 26 28 30 32
}                    : 8 9 26 28 30 32

Nonterminals, with rules where they appear:

block_stmt           : 23
closed_stmt          : 15
decl                 : 2 3 22
decl_init            : 4
decl_list            : 1 3
do_while_stmt        : 18
empty                : 11 35 39 99
expr                 : 10 17 36 37 38 75 77 78
expr1                : 40 42
expr2                : 41 46
expr3                : 45 46 48
expr4                : 47 48 50 51 52 53 54 55
expr5                : 49 50 51 52 53 54 55 57 58
expr6                : 56 57 58 60 61 62
expr7                : 59 60 61 62 64
expr8                : 63 64 66 67
expr9                : 65 68 69 71 72
expr_list            : 34 37
factor               : 73
for_header           : 30
for_stmt             : 20
group                : 70
if_header            : 28
if_stmt              : 21
index                : 43 74 94 95
lval                 : 42
opt_expr             : 25 27 29 29 29 31
opt_expr_list        : 9 76
opt_param_list       : 96 97
opt_stmt_list        : 8 28
param                : 100 101
param_list           : 98 101
prog                 : 0
return_stmt          : 24
simple_stmt          : 16
stmt                 : 13 14 33
stmt_list            : 12 14 26 30 32
type_array           : 92 103
type_array_sized     : 6 9 94 96 102
type_func            : 5 8
type_simple          : 7 10 93 95 97 104
while_header         : 32 33
while_stmt           : 19


state 0

    (0) S' -> . prog
    (1) prog -> . decl_list
    (2) decl_list -> . decl
    (3) decl_list -> . decl_list decl
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    ID              shift and go to state 5

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    decl_init                      shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> decl_list .
    (3) decl_list -> decl_list . decl
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    $end            reduce using rule 1 (prog -> decl_list .)
    ID              shift and go to state 5

    decl                           shift and go to state 6
    decl_init                      shift and go to state 4

state 3

    (2) decl_list -> decl .
    ID              reduce using rule 2 (decl_list -> decl .)
    $end            reduce using rule 2 (decl_list -> decl .)


state 4

    (4) decl -> decl_init .
    ID              reduce using rule 4 (decl -> decl_init .)
    $end            reduce using rule 4 (decl -> decl_init .)
    DO              reduce using rule 4 (decl -> decl_init .)
    {               reduce using rule 4 (decl -> decl_init .)
    RETURN          reduce using rule 4 (decl -> decl_init .)
    WHILE           reduce using rule 4 (decl -> decl_init .)
    FOR             reduce using rule 4 (decl -> decl_init .)
    IF              reduce using rule 4 (decl -> decl_init .)
    !               reduce using rule 4 (decl -> decl_init .)
    -               reduce using rule 4 (decl -> decl_init .)
    DEC             reduce using rule 4 (decl -> decl_init .)
    INC             reduce using rule 4 (decl -> decl_init .)
    PRINT           reduce using rule 4 (decl -> decl_init .)
    (               reduce using rule 4 (decl -> decl_init .)
    FALSE           reduce using rule 4 (decl -> decl_init .)
    TRUE            reduce using rule 4 (decl -> decl_init .)
    STRING_LIT      reduce using rule 4 (decl -> decl_init .)
    CHAR_LIT        reduce using rule 4 (decl -> decl_init .)
    FLOAT_LIT       reduce using rule 4 (decl -> decl_init .)
    INT_LIT         reduce using rule 4 (decl -> decl_init .)
    }               reduce using rule 4 (decl -> decl_init .)


state 5

    (5) decl -> ID . : type_func ;
    (6) decl -> ID . : type_array_sized ;
    (7) decl -> ID . : type_simple ;
    (8) decl_init -> ID . : type_func = { opt_stmt_list }
    (9) decl_init -> ID . : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID . : type_simple = expr ;
    :               shift and go to state 7


state 6

    (3) decl_list -> decl_list decl .
    ID              reduce using rule 3 (decl_list -> decl_list decl .)
    $end            reduce using rule 3 (decl_list -> decl_list decl .)


state 7

    (5) decl -> ID : . type_func ;
    (6) decl -> ID : . type_array_sized ;
    (7) decl -> ID : . type_simple ;
    (8) decl_init -> ID : . type_func = { opt_stmt_list }
    (9) decl_init -> ID : . type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID : . type_simple = expr ;
    (96) type_func -> . FUNCTION type_array_sized ( opt_param_list )
    (97) type_func -> . FUNCTION type_simple ( opt_param_list )
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    FUNCTION        shift and go to state 11
    ARRAY           shift and go to state 12
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_func                      shift and go to state 8
    type_array_sized               shift and go to state 9
    type_simple                    shift and go to state 10

state 8

    (5) decl -> ID : type_func . ;
    (8) decl_init -> ID : type_func . = { opt_stmt_list }
    ;               shift and go to state 19
    =               shift and go to state 20


state 9

    (6) decl -> ID : type_array_sized . ;
    (9) decl_init -> ID : type_array_sized . = { opt_expr_list } ;
    ;               shift and go to state 21
    =               shift and go to state 22


state 10

    (7) decl -> ID : type_simple . ;
    (10) decl_init -> ID : type_simple . = expr ;
    ;               shift and go to state 23
    =               shift and go to state 24


state 11

    (96) type_func -> FUNCTION . type_array_sized ( opt_param_list )
    (97) type_func -> FUNCTION . type_simple ( opt_param_list )
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 12
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array_sized               shift and go to state 25
    type_simple                    shift and go to state 26

state 12

    (94) type_array_sized -> ARRAY . index type_array_sized
    (95) type_array_sized -> ARRAY . index type_simple
    (78) index -> . [ expr ]
    [               shift and go to state 28

    index                          shift and go to state 27

state 13

    (86) type_simple -> VOID .
    ;               reduce using rule 86 (type_simple -> VOID .)
    =               reduce using rule 86 (type_simple -> VOID .)
    (               reduce using rule 86 (type_simple -> VOID .)
    ,               reduce using rule 86 (type_simple -> VOID .)
    )               reduce using rule 86 (type_simple -> VOID .)


state 14

    (87) type_simple -> STRING .
    ;               reduce using rule 87 (type_simple -> STRING .)
    =               reduce using rule 87 (type_simple -> STRING .)
    (               reduce using rule 87 (type_simple -> STRING .)
    ,               reduce using rule 87 (type_simple -> STRING .)
    )               reduce using rule 87 (type_simple -> STRING .)


state 15

    (88) type_simple -> CHAR .
    ;               reduce using rule 88 (type_simple -> CHAR .)
    =               reduce using rule 88 (type_simple -> CHAR .)
    (               reduce using rule 88 (type_simple -> CHAR .)
    ,               reduce using rule 88 (type_simple -> CHAR .)
    )               reduce using rule 88 (type_simple -> CHAR .)


state 16

    (89) type_simple -> BOOLEAN .
    ;               reduce using rule 89 (type_simple -> BOOLEAN .)
    =               reduce using rule 89 (type_simple -> BOOLEAN .)
    (               reduce using rule 89 (type_simple -> BOOLEAN .)
    ,               reduce using rule 89 (type_simple -> BOOLEAN .)
    )               reduce using rule 89 (type_simple -> BOOLEAN .)


state 17

    (90) type_simple -> FLOAT .
    ;               reduce using rule 90 (type_simple -> FLOAT .)
    =               reduce using rule 90 (type_simple -> FLOAT .)
    (               reduce using rule 90 (type_simple -> FLOAT .)
    ,               reduce using rule 90 (type_simple -> FLOAT .)
    )               reduce using rule 90 (type_simple -> FLOAT .)


state 18

    (91) type_simple -> INTEGER .
    ;               reduce using rule 91 (type_simple -> INTEGER .)
    =               reduce using rule 91 (type_simple -> INTEGER .)
    (               reduce using rule 91 (type_simple -> INTEGER .)
    ,               reduce using rule 91 (type_simple -> INTEGER .)
    )               reduce using rule 91 (type_simple -> INTEGER .)


state 19

    (5) decl -> ID : type_func ; .
    ID              reduce using rule 5 (decl -> ID : type_func ; .)
    $end            reduce using rule 5 (decl -> ID : type_func ; .)
    DO              reduce using rule 5 (decl -> ID : type_func ; .)
    {               reduce using rule 5 (decl -> ID : type_func ; .)
    RETURN          reduce using rule 5 (decl -> ID : type_func ; .)
    WHILE           reduce using rule 5 (decl -> ID : type_func ; .)
    FOR             reduce using rule 5 (decl -> ID : type_func ; .)
    IF              reduce using rule 5 (decl -> ID : type_func ; .)
    !               reduce using rule 5 (decl -> ID : type_func ; .)
    -               reduce using rule 5 (decl -> ID : type_func ; .)
    DEC             reduce using rule 5 (decl -> ID : type_func ; .)
    INC             reduce using rule 5 (decl -> ID : type_func ; .)
    PRINT           reduce using rule 5 (decl -> ID : type_func ; .)
    (               reduce using rule 5 (decl -> ID : type_func ; .)
    FALSE           reduce using rule 5 (decl -> ID : type_func ; .)
    TRUE            reduce using rule 5 (decl -> ID : type_func ; .)
    STRING_LIT      reduce using rule 5 (decl -> ID : type_func ; .)
    CHAR_LIT        reduce using rule 5 (decl -> ID : type_func ; .)
    FLOAT_LIT       reduce using rule 5 (decl -> ID : type_func ; .)
    INT_LIT         reduce using rule 5 (decl -> ID : type_func ; .)
    }               reduce using rule 5 (decl -> ID : type_func ; .)


state 20

    (8) decl_init -> ID : type_func = . { opt_stmt_list }
    {               shift and go to state 29


state 21

    (6) decl -> ID : type_array_sized ; .
    ID              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    $end            reduce using rule 6 (decl -> ID : type_array_sized ; .)
    DO              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    {               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    RETURN          reduce using rule 6 (decl -> ID : type_array_sized ; .)
    WHILE           reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FOR             reduce using rule 6 (decl -> ID : type_array_sized ; .)
    IF              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    !               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    -               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    DEC             reduce using rule 6 (decl -> ID : type_array_sized ; .)
    INC             reduce using rule 6 (decl -> ID : type_array_sized ; .)
    PRINT           reduce using rule 6 (decl -> ID : type_array_sized ; .)
    (               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FALSE           reduce using rule 6 (decl -> ID : type_array_sized ; .)
    TRUE            reduce using rule 6 (decl -> ID : type_array_sized ; .)
    STRING_LIT      reduce using rule 6 (decl -> ID : type_array_sized ; .)
    CHAR_LIT        reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FLOAT_LIT       reduce using rule 6 (decl -> ID : type_array_sized ; .)
    INT_LIT         reduce using rule 6 (decl -> ID : type_array_sized ; .)
    }               reduce using rule 6 (decl -> ID : type_array_sized ; .)


state 22

    (9) decl_init -> ID : type_array_sized = . { opt_expr_list } ;
    {               shift and go to state 30


state 23

    (7) decl -> ID : type_simple ; .
    ID              reduce using rule 7 (decl -> ID : type_simple ; .)
    $end            reduce using rule 7 (decl -> ID : type_simple ; .)
    DO              reduce using rule 7 (decl -> ID : type_simple ; .)
    {               reduce using rule 7 (decl -> ID : type_simple ; .)
    RETURN          reduce using rule 7 (decl -> ID : type_simple ; .)
    WHILE           reduce using rule 7 (decl -> ID : type_simple ; .)
    FOR             reduce using rule 7 (decl -> ID : type_simple ; .)
    IF              reduce using rule 7 (decl -> ID : type_simple ; .)
    !               reduce using rule 7 (decl -> ID : type_simple ; .)
    -               reduce using rule 7 (decl -> ID : type_simple ; .)
    DEC             reduce using rule 7 (decl -> ID : type_simple ; .)
    INC             reduce using rule 7 (decl -> ID : type_simple ; .)
    PRINT           reduce using rule 7 (decl -> ID : type_simple ; .)
    (               reduce using rule 7 (decl -> ID : type_simple ; .)
    FALSE           reduce using rule 7 (decl -> ID : type_simple ; .)
    TRUE            reduce using rule 7 (decl -> ID : type_simple ; .)
    STRING_LIT      reduce using rule 7 (decl -> ID : type_simple ; .)
    CHAR_LIT        reduce using rule 7 (decl -> ID : type_simple ; .)
    FLOAT_LIT       reduce using rule 7 (decl -> ID : type_simple ; .)
    INT_LIT         reduce using rule 7 (decl -> ID : type_simple ; .)
    }               reduce using rule 7 (decl -> ID : type_simple ; .)


state 24

    (10) decl_init -> ID : type_simple = . expr ;
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr                           shift and go to state 32
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 25

    (96) type_func -> FUNCTION type_array_sized . ( opt_param_list )
    (               shift and go to state 57


state 26

    (97) type_func -> FUNCTION type_simple . ( opt_param_list )
    (               shift and go to state 58


state 27

    (94) type_array_sized -> ARRAY index . type_array_sized
    (95) type_array_sized -> ARRAY index . type_simple
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 12
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array_sized               shift and go to state 59
    type_simple                    shift and go to state 60

state 28

    (78) index -> [ . expr ]
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr                           shift and go to state 61
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 29

    (8) decl_init -> ID : type_func = { . opt_stmt_list }
    (11) opt_stmt_list -> . empty
    (12) opt_stmt_list -> . stmt_list
    (105) empty -> .
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt_list stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               reduce using rule 105 (empty -> .)
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_stmt_list                  shift and go to state 64
    empty                          shift and go to state 65
    stmt_list                      shift and go to state 66
    stmt                           shift and go to state 67
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    while_header                   shift and go to state 79
    for_header                     shift and go to state 80
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 30

    (9) decl_init -> ID : type_array_sized = { . opt_expr_list } ;
    (34) opt_expr_list -> . expr_list
    (35) opt_expr_list -> . empty
    (36) expr_list -> . expr
    (37) expr_list -> . expr , expr_list
    (105) empty -> .
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr_list                  shift and go to state 86
    expr_list                      shift and go to state 87
    empty                          shift and go to state 88
    expr                           shift and go to state 89
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 31

    (43) lval -> ID . index
    (44) lval -> ID .
    (74) group -> ID . index
    (76) group -> ID . ( opt_expr_list )
    (85) factor -> ID .
    (78) index -> . [ expr ]
    =               reduce using rule 44 (lval -> ID .)
    (               shift and go to state 91
    DEC             reduce using rule 85 (factor -> ID .)
    INC             reduce using rule 85 (factor -> ID .)
    ^               reduce using rule 85 (factor -> ID .)
    %               reduce using rule 85 (factor -> ID .)
    /               reduce using rule 85 (factor -> ID .)
    *               reduce using rule 85 (factor -> ID .)
    -               reduce using rule 85 (factor -> ID .)
    +               reduce using rule 85 (factor -> ID .)
    GE              reduce using rule 85 (factor -> ID .)
    GT              reduce using rule 85 (factor -> ID .)
    LE              reduce using rule 85 (factor -> ID .)
    LT              reduce using rule 85 (factor -> ID .)
    NEQ             reduce using rule 85 (factor -> ID .)
    EQ              reduce using rule 85 (factor -> ID .)
    LAND            reduce using rule 85 (factor -> ID .)
    LOR             reduce using rule 85 (factor -> ID .)
    ;               reduce using rule 85 (factor -> ID .)
    ]               reduce using rule 85 (factor -> ID .)
    ,               reduce using rule 85 (factor -> ID .)
    }               reduce using rule 85 (factor -> ID .)
    )               reduce using rule 85 (factor -> ID .)
    [               shift and go to state 28

    index                          shift and go to state 90

state 32

    (10) decl_init -> ID : type_simple = expr . ;
    ;               shift and go to state 92


state 33

    (40) expr -> expr1 .
    ;               reduce using rule 40 (expr -> expr1 .)
    ]               reduce using rule 40 (expr -> expr1 .)
    ,               reduce using rule 40 (expr -> expr1 .)
    }               reduce using rule 40 (expr -> expr1 .)
    DEC             reduce using rule 40 (expr -> expr1 .)
    INC             reduce using rule 40 (expr -> expr1 .)
    ^               reduce using rule 40 (expr -> expr1 .)
    %               reduce using rule 40 (expr -> expr1 .)
    /               reduce using rule 40 (expr -> expr1 .)
    *               reduce using rule 40 (expr -> expr1 .)
    -               reduce using rule 40 (expr -> expr1 .)
    +               reduce using rule 40 (expr -> expr1 .)
    GE              reduce using rule 40 (expr -> expr1 .)
    GT              reduce using rule 40 (expr -> expr1 .)
    LE              reduce using rule 40 (expr -> expr1 .)
    LT              reduce using rule 40 (expr -> expr1 .)
    NEQ             reduce using rule 40 (expr -> expr1 .)
    EQ              reduce using rule 40 (expr -> expr1 .)
    LAND            reduce using rule 40 (expr -> expr1 .)
    LOR             reduce using rule 40 (expr -> expr1 .)
    )               reduce using rule 40 (expr -> expr1 .)


state 34

    (41) expr1 -> expr2 .
    (46) expr2 -> expr2 . LOR expr3
  ! shift/reduce conflict for LOR resolved as shift
    ;               reduce using rule 41 (expr1 -> expr2 .)
    ]               reduce using rule 41 (expr1 -> expr2 .)
    ,               reduce using rule 41 (expr1 -> expr2 .)
    }               reduce using rule 41 (expr1 -> expr2 .)
    DEC             reduce using rule 41 (expr1 -> expr2 .)
    INC             reduce using rule 41 (expr1 -> expr2 .)
    ^               reduce using rule 41 (expr1 -> expr2 .)
    %               reduce using rule 41 (expr1 -> expr2 .)
    /               reduce using rule 41 (expr1 -> expr2 .)
    *               reduce using rule 41 (expr1 -> expr2 .)
    -               reduce using rule 41 (expr1 -> expr2 .)
    +               reduce using rule 41 (expr1 -> expr2 .)
    GE              reduce using rule 41 (expr1 -> expr2 .)
    GT              reduce using rule 41 (expr1 -> expr2 .)
    LE              reduce using rule 41 (expr1 -> expr2 .)
    LT              reduce using rule 41 (expr1 -> expr2 .)
    NEQ             reduce using rule 41 (expr1 -> expr2 .)
    EQ              reduce using rule 41 (expr1 -> expr2 .)
    LAND            reduce using rule 41 (expr1 -> expr2 .)
    )               reduce using rule 41 (expr1 -> expr2 .)
    LOR             shift and go to state 93


state 35

    (42) expr1 -> lval . = expr1
    =               shift and go to state 94


state 36

    (45) expr2 -> expr3 .
    (48) expr3 -> expr3 . LAND expr4
  ! shift/reduce conflict for LAND resolved as shift
    LOR             reduce using rule 45 (expr2 -> expr3 .)
    ;               reduce using rule 45 (expr2 -> expr3 .)
    ]               reduce using rule 45 (expr2 -> expr3 .)
    ,               reduce using rule 45 (expr2 -> expr3 .)
    }               reduce using rule 45 (expr2 -> expr3 .)
    DEC             reduce using rule 45 (expr2 -> expr3 .)
    INC             reduce using rule 45 (expr2 -> expr3 .)
    ^               reduce using rule 45 (expr2 -> expr3 .)
    %               reduce using rule 45 (expr2 -> expr3 .)
    /               reduce using rule 45 (expr2 -> expr3 .)
    *               reduce using rule 45 (expr2 -> expr3 .)
    -               reduce using rule 45 (expr2 -> expr3 .)
    +               reduce using rule 45 (expr2 -> expr3 .)
    GE              reduce using rule 45 (expr2 -> expr3 .)
    GT              reduce using rule 45 (expr2 -> expr3 .)
    LE              reduce using rule 45 (expr2 -> expr3 .)
    LT              reduce using rule 45 (expr2 -> expr3 .)
    NEQ             reduce using rule 45 (expr2 -> expr3 .)
    EQ              reduce using rule 45 (expr2 -> expr3 .)
    )               reduce using rule 45 (expr2 -> expr3 .)
    LAND            shift and go to state 95


state 37

    (47) expr3 -> expr4 .
    (50) expr4 -> expr4 . GE expr5
    (51) expr4 -> expr4 . GT expr5
    (52) expr4 -> expr4 . LE expr5
    (53) expr4 -> expr4 . LT expr5
    (54) expr4 -> expr4 . NEQ expr5
    (55) expr4 -> expr4 . EQ expr5
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    LAND            reduce using rule 47 (expr3 -> expr4 .)
    LOR             reduce using rule 47 (expr3 -> expr4 .)
    ;               reduce using rule 47 (expr3 -> expr4 .)
    ]               reduce using rule 47 (expr3 -> expr4 .)
    ,               reduce using rule 47 (expr3 -> expr4 .)
    }               reduce using rule 47 (expr3 -> expr4 .)
    DEC             reduce using rule 47 (expr3 -> expr4 .)
    INC             reduce using rule 47 (expr3 -> expr4 .)
    ^               reduce using rule 47 (expr3 -> expr4 .)
    %               reduce using rule 47 (expr3 -> expr4 .)
    /               reduce using rule 47 (expr3 -> expr4 .)
    *               reduce using rule 47 (expr3 -> expr4 .)
    -               reduce using rule 47 (expr3 -> expr4 .)
    +               reduce using rule 47 (expr3 -> expr4 .)
    )               reduce using rule 47 (expr3 -> expr4 .)
    GE              shift and go to state 96
    GT              shift and go to state 97
    LE              shift and go to state 98
    LT              shift and go to state 99
    NEQ             shift and go to state 100
    EQ              shift and go to state 101


state 38

    (49) expr4 -> expr5 .
    (57) expr5 -> expr5 . - expr6
    (58) expr5 -> expr5 . + expr6
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    GE              reduce using rule 49 (expr4 -> expr5 .)
    GT              reduce using rule 49 (expr4 -> expr5 .)
    LE              reduce using rule 49 (expr4 -> expr5 .)
    LT              reduce using rule 49 (expr4 -> expr5 .)
    NEQ             reduce using rule 49 (expr4 -> expr5 .)
    EQ              reduce using rule 49 (expr4 -> expr5 .)
    LAND            reduce using rule 49 (expr4 -> expr5 .)
    LOR             reduce using rule 49 (expr4 -> expr5 .)
    ;               reduce using rule 49 (expr4 -> expr5 .)
    ]               reduce using rule 49 (expr4 -> expr5 .)
    ,               reduce using rule 49 (expr4 -> expr5 .)
    }               reduce using rule 49 (expr4 -> expr5 .)
    DEC             reduce using rule 49 (expr4 -> expr5 .)
    INC             reduce using rule 49 (expr4 -> expr5 .)
    ^               reduce using rule 49 (expr4 -> expr5 .)
    %               reduce using rule 49 (expr4 -> expr5 .)
    /               reduce using rule 49 (expr4 -> expr5 .)
    *               reduce using rule 49 (expr4 -> expr5 .)
    )               reduce using rule 49 (expr4 -> expr5 .)
    -               shift and go to state 102
    +               shift and go to state 103


state 39

    (56) expr5 -> expr6 .
    (60) expr6 -> expr6 . % expr7
    (61) expr6 -> expr6 . / expr7
    (62) expr6 -> expr6 . * expr7
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    -               reduce using rule 56 (expr5 -> expr6 .)
    +               reduce using rule 56 (expr5 -> expr6 .)
    GE              reduce using rule 56 (expr5 -> expr6 .)
    GT              reduce using rule 56 (expr5 -> expr6 .)
    LE              reduce using rule 56 (expr5 -> expr6 .)
    LT              reduce using rule 56 (expr5 -> expr6 .)
    NEQ             reduce using rule 56 (expr5 -> expr6 .)
    EQ              reduce using rule 56 (expr5 -> expr6 .)
    LAND            reduce using rule 56 (expr5 -> expr6 .)
    LOR             reduce using rule 56 (expr5 -> expr6 .)
    ;               reduce using rule 56 (expr5 -> expr6 .)
    ]               reduce using rule 56 (expr5 -> expr6 .)
    ,               reduce using rule 56 (expr5 -> expr6 .)
    }               reduce using rule 56 (expr5 -> expr6 .)
    DEC             reduce using rule 56 (expr5 -> expr6 .)
    INC             reduce using rule 56 (expr5 -> expr6 .)
    ^               reduce using rule 56 (expr5 -> expr6 .)
    )               reduce using rule 56 (expr5 -> expr6 .)
    %               shift and go to state 104
    /               shift and go to state 105
    *               shift and go to state 106


state 40

    (67) expr8 -> - . expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr8                          shift and go to state 107
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 41

    (59) expr6 -> expr7 .
    (64) expr7 -> expr7 . ^ expr8
  ! shift/reduce conflict for ^ resolved as shift
    %               reduce using rule 59 (expr6 -> expr7 .)
    /               reduce using rule 59 (expr6 -> expr7 .)
    *               reduce using rule 59 (expr6 -> expr7 .)
    -               reduce using rule 59 (expr6 -> expr7 .)
    +               reduce using rule 59 (expr6 -> expr7 .)
    GE              reduce using rule 59 (expr6 -> expr7 .)
    GT              reduce using rule 59 (expr6 -> expr7 .)
    LE              reduce using rule 59 (expr6 -> expr7 .)
    LT              reduce using rule 59 (expr6 -> expr7 .)
    NEQ             reduce using rule 59 (expr6 -> expr7 .)
    EQ              reduce using rule 59 (expr6 -> expr7 .)
    LAND            reduce using rule 59 (expr6 -> expr7 .)
    LOR             reduce using rule 59 (expr6 -> expr7 .)
    ;               reduce using rule 59 (expr6 -> expr7 .)
    ]               reduce using rule 59 (expr6 -> expr7 .)
    ,               reduce using rule 59 (expr6 -> expr7 .)
    }               reduce using rule 59 (expr6 -> expr7 .)
    DEC             reduce using rule 59 (expr6 -> expr7 .)
    INC             reduce using rule 59 (expr6 -> expr7 .)
    )               reduce using rule 59 (expr6 -> expr7 .)
    ^               shift and go to state 109


state 42

    (63) expr7 -> expr8 .
    ^               reduce using rule 63 (expr7 -> expr8 .)
    %               reduce using rule 63 (expr7 -> expr8 .)
    /               reduce using rule 63 (expr7 -> expr8 .)
    *               reduce using rule 63 (expr7 -> expr8 .)
    -               reduce using rule 63 (expr7 -> expr8 .)
    +               reduce using rule 63 (expr7 -> expr8 .)
    GE              reduce using rule 63 (expr7 -> expr8 .)
    GT              reduce using rule 63 (expr7 -> expr8 .)
    LE              reduce using rule 63 (expr7 -> expr8 .)
    LT              reduce using rule 63 (expr7 -> expr8 .)
    NEQ             reduce using rule 63 (expr7 -> expr8 .)
    EQ              reduce using rule 63 (expr7 -> expr8 .)
    LAND            reduce using rule 63 (expr7 -> expr8 .)
    LOR             reduce using rule 63 (expr7 -> expr8 .)
    ;               reduce using rule 63 (expr7 -> expr8 .)
    ]               reduce using rule 63 (expr7 -> expr8 .)
    ,               reduce using rule 63 (expr7 -> expr8 .)
    }               reduce using rule 63 (expr7 -> expr8 .)
    DEC             reduce using rule 63 (expr7 -> expr8 .)
    INC             reduce using rule 63 (expr7 -> expr8 .)
    )               reduce using rule 63 (expr7 -> expr8 .)


state 43

    (65) expr8 -> expr9 .
    (71) expr9 -> expr9 . DEC
    (72) expr9 -> expr9 . INC
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
    ^               reduce using rule 65 (expr8 -> expr9 .)
    %               reduce using rule 65 (expr8 -> expr9 .)
    /               reduce using rule 65 (expr8 -> expr9 .)
    *               reduce using rule 65 (expr8 -> expr9 .)
    -               reduce using rule 65 (expr8 -> expr9 .)
    +               reduce using rule 65 (expr8 -> expr9 .)
    GE              reduce using rule 65 (expr8 -> expr9 .)
    GT              reduce using rule 65 (expr8 -> expr9 .)
    LE              reduce using rule 65 (expr8 -> expr9 .)
    LT              reduce using rule 65 (expr8 -> expr9 .)
    NEQ             reduce using rule 65 (expr8 -> expr9 .)
    EQ              reduce using rule 65 (expr8 -> expr9 .)
    LAND            reduce using rule 65 (expr8 -> expr9 .)
    LOR             reduce using rule 65 (expr8 -> expr9 .)
    ;               reduce using rule 65 (expr8 -> expr9 .)
    ]               reduce using rule 65 (expr8 -> expr9 .)
    ,               reduce using rule 65 (expr8 -> expr9 .)
    }               reduce using rule 65 (expr8 -> expr9 .)
    )               reduce using rule 65 (expr8 -> expr9 .)
    DEC             shift and go to state 110
    INC             shift and go to state 111


state 44

    (66) expr8 -> ! . expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr8                          shift and go to state 112
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 45

    (68) expr9 -> DEC . expr9
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr9                          shift and go to state 113
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 46

    (69) expr9 -> INC . expr9
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr9                          shift and go to state 114
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 47

    (70) expr9 -> group .
    DEC             reduce using rule 70 (expr9 -> group .)
    INC             reduce using rule 70 (expr9 -> group .)
    ^               reduce using rule 70 (expr9 -> group .)
    %               reduce using rule 70 (expr9 -> group .)
    /               reduce using rule 70 (expr9 -> group .)
    *               reduce using rule 70 (expr9 -> group .)
    -               reduce using rule 70 (expr9 -> group .)
    +               reduce using rule 70 (expr9 -> group .)
    GE              reduce using rule 70 (expr9 -> group .)
    GT              reduce using rule 70 (expr9 -> group .)
    LE              reduce using rule 70 (expr9 -> group .)
    LT              reduce using rule 70 (expr9 -> group .)
    NEQ             reduce using rule 70 (expr9 -> group .)
    EQ              reduce using rule 70 (expr9 -> group .)
    LAND            reduce using rule 70 (expr9 -> group .)
    LOR             reduce using rule 70 (expr9 -> group .)
    ;               reduce using rule 70 (expr9 -> group .)
    ]               reduce using rule 70 (expr9 -> group .)
    ,               reduce using rule 70 (expr9 -> group .)
    }               reduce using rule 70 (expr9 -> group .)
    )               reduce using rule 70 (expr9 -> group .)


state 48

    (73) group -> factor .
    DEC             reduce using rule 73 (group -> factor .)
    INC             reduce using rule 73 (group -> factor .)
    ^               reduce using rule 73 (group -> factor .)
    %               reduce using rule 73 (group -> factor .)
    /               reduce using rule 73 (group -> factor .)
    *               reduce using rule 73 (group -> factor .)
    -               reduce using rule 73 (group -> factor .)
    +               reduce using rule 73 (group -> factor .)
    GE              reduce using rule 73 (group -> factor .)
    GT              reduce using rule 73 (group -> factor .)
    LE              reduce using rule 73 (group -> factor .)
    LT              reduce using rule 73 (group -> factor .)
    NEQ             reduce using rule 73 (group -> factor .)
    EQ              reduce using rule 73 (group -> factor .)
    LAND            reduce using rule 73 (group -> factor .)
    LOR             reduce using rule 73 (group -> factor .)
    ;               reduce using rule 73 (group -> factor .)
    ]               reduce using rule 73 (group -> factor .)
    ,               reduce using rule 73 (group -> factor .)
    }               reduce using rule 73 (group -> factor .)
    )               reduce using rule 73 (group -> factor .)


state 49

    (75) group -> PRINT . expr
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr                           shift and go to state 115
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 50

    (77) group -> ( . expr )
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr                           shift and go to state 116
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 51

    (79) factor -> FALSE .
    DEC             reduce using rule 79 (factor -> FALSE .)
    INC             reduce using rule 79 (factor -> FALSE .)
    ^               reduce using rule 79 (factor -> FALSE .)
    %               reduce using rule 79 (factor -> FALSE .)
    /               reduce using rule 79 (factor -> FALSE .)
    *               reduce using rule 79 (factor -> FALSE .)
    -               reduce using rule 79 (factor -> FALSE .)
    +               reduce using rule 79 (factor -> FALSE .)
    GE              reduce using rule 79 (factor -> FALSE .)
    GT              reduce using rule 79 (factor -> FALSE .)
    LE              reduce using rule 79 (factor -> FALSE .)
    LT              reduce using rule 79 (factor -> FALSE .)
    NEQ             reduce using rule 79 (factor -> FALSE .)
    EQ              reduce using rule 79 (factor -> FALSE .)
    LAND            reduce using rule 79 (factor -> FALSE .)
    LOR             reduce using rule 79 (factor -> FALSE .)
    ;               reduce using rule 79 (factor -> FALSE .)
    ]               reduce using rule 79 (factor -> FALSE .)
    ,               reduce using rule 79 (factor -> FALSE .)
    }               reduce using rule 79 (factor -> FALSE .)
    )               reduce using rule 79 (factor -> FALSE .)


state 52

    (80) factor -> TRUE .
    DEC             reduce using rule 80 (factor -> TRUE .)
    INC             reduce using rule 80 (factor -> TRUE .)
    ^               reduce using rule 80 (factor -> TRUE .)
    %               reduce using rule 80 (factor -> TRUE .)
    /               reduce using rule 80 (factor -> TRUE .)
    *               reduce using rule 80 (factor -> TRUE .)
    -               reduce using rule 80 (factor -> TRUE .)
    +               reduce using rule 80 (factor -> TRUE .)
    GE              reduce using rule 80 (factor -> TRUE .)
    GT              reduce using rule 80 (factor -> TRUE .)
    LE              reduce using rule 80 (factor -> TRUE .)
    LT              reduce using rule 80 (factor -> TRUE .)
    NEQ             reduce using rule 80 (factor -> TRUE .)
    EQ              reduce using rule 80 (factor -> TRUE .)
    LAND            reduce using rule 80 (factor -> TRUE .)
    LOR             reduce using rule 80 (factor -> TRUE .)
    ;               reduce using rule 80 (factor -> TRUE .)
    ]               reduce using rule 80 (factor -> TRUE .)
    ,               reduce using rule 80 (factor -> TRUE .)
    }               reduce using rule 80 (factor -> TRUE .)
    )               reduce using rule 80 (factor -> TRUE .)


state 53

    (81) factor -> STRING_LIT .
    DEC             reduce using rule 81 (factor -> STRING_LIT .)
    INC             reduce using rule 81 (factor -> STRING_LIT .)
    ^               reduce using rule 81 (factor -> STRING_LIT .)
    %               reduce using rule 81 (factor -> STRING_LIT .)
    /               reduce using rule 81 (factor -> STRING_LIT .)
    *               reduce using rule 81 (factor -> STRING_LIT .)
    -               reduce using rule 81 (factor -> STRING_LIT .)
    +               reduce using rule 81 (factor -> STRING_LIT .)
    GE              reduce using rule 81 (factor -> STRING_LIT .)
    GT              reduce using rule 81 (factor -> STRING_LIT .)
    LE              reduce using rule 81 (factor -> STRING_LIT .)
    LT              reduce using rule 81 (factor -> STRING_LIT .)
    NEQ             reduce using rule 81 (factor -> STRING_LIT .)
    EQ              reduce using rule 81 (factor -> STRING_LIT .)
    LAND            reduce using rule 81 (factor -> STRING_LIT .)
    LOR             reduce using rule 81 (factor -> STRING_LIT .)
    ;               reduce using rule 81 (factor -> STRING_LIT .)
    ]               reduce using rule 81 (factor -> STRING_LIT .)
    ,               reduce using rule 81 (factor -> STRING_LIT .)
    }               reduce using rule 81 (factor -> STRING_LIT .)
    )               reduce using rule 81 (factor -> STRING_LIT .)


state 54

    (82) factor -> CHAR_LIT .
    DEC             reduce using rule 82 (factor -> CHAR_LIT .)
    INC             reduce using rule 82 (factor -> CHAR_LIT .)
    ^               reduce using rule 82 (factor -> CHAR_LIT .)
    %               reduce using rule 82 (factor -> CHAR_LIT .)
    /               reduce using rule 82 (factor -> CHAR_LIT .)
    *               reduce using rule 82 (factor -> CHAR_LIT .)
    -               reduce using rule 82 (factor -> CHAR_LIT .)
    +               reduce using rule 82 (factor -> CHAR_LIT .)
    GE              reduce using rule 82 (factor -> CHAR_LIT .)
    GT              reduce using rule 82 (factor -> CHAR_LIT .)
    LE              reduce using rule 82 (factor -> CHAR_LIT .)
    LT              reduce using rule 82 (factor -> CHAR_LIT .)
    NEQ             reduce using rule 82 (factor -> CHAR_LIT .)
    EQ              reduce using rule 82 (factor -> CHAR_LIT .)
    LAND            reduce using rule 82 (factor -> CHAR_LIT .)
    LOR             reduce using rule 82 (factor -> CHAR_LIT .)
    ;               reduce using rule 82 (factor -> CHAR_LIT .)
    ]               reduce using rule 82 (factor -> CHAR_LIT .)
    ,               reduce using rule 82 (factor -> CHAR_LIT .)
    }               reduce using rule 82 (factor -> CHAR_LIT .)
    )               reduce using rule 82 (factor -> CHAR_LIT .)


state 55

    (83) factor -> FLOAT_LIT .
    DEC             reduce using rule 83 (factor -> FLOAT_LIT .)
    INC             reduce using rule 83 (factor -> FLOAT_LIT .)
    ^               reduce using rule 83 (factor -> FLOAT_LIT .)
    %               reduce using rule 83 (factor -> FLOAT_LIT .)
    /               reduce using rule 83 (factor -> FLOAT_LIT .)
    *               reduce using rule 83 (factor -> FLOAT_LIT .)
    -               reduce using rule 83 (factor -> FLOAT_LIT .)
    +               reduce using rule 83 (factor -> FLOAT_LIT .)
    GE              reduce using rule 83 (factor -> FLOAT_LIT .)
    GT              reduce using rule 83 (factor -> FLOAT_LIT .)
    LE              reduce using rule 83 (factor -> FLOAT_LIT .)
    LT              reduce using rule 83 (factor -> FLOAT_LIT .)
    NEQ             reduce using rule 83 (factor -> FLOAT_LIT .)
    EQ              reduce using rule 83 (factor -> FLOAT_LIT .)
    LAND            reduce using rule 83 (factor -> FLOAT_LIT .)
    LOR             reduce using rule 83 (factor -> FLOAT_LIT .)
    ;               reduce using rule 83 (factor -> FLOAT_LIT .)
    ]               reduce using rule 83 (factor -> FLOAT_LIT .)
    ,               reduce using rule 83 (factor -> FLOAT_LIT .)
    }               reduce using rule 83 (factor -> FLOAT_LIT .)
    )               reduce using rule 83 (factor -> FLOAT_LIT .)


state 56

    (84) factor -> INT_LIT .
    DEC             reduce using rule 84 (factor -> INT_LIT .)
    INC             reduce using rule 84 (factor -> INT_LIT .)
    ^               reduce using rule 84 (factor -> INT_LIT .)
    %               reduce using rule 84 (factor -> INT_LIT .)
    /               reduce using rule 84 (factor -> INT_LIT .)
    *               reduce using rule 84 (factor -> INT_LIT .)
    -               reduce using rule 84 (factor -> INT_LIT .)
    +               reduce using rule 84 (factor -> INT_LIT .)
    GE              reduce using rule 84 (factor -> INT_LIT .)
    GT              reduce using rule 84 (factor -> INT_LIT .)
    LE              reduce using rule 84 (factor -> INT_LIT .)
    LT              reduce using rule 84 (factor -> INT_LIT .)
    NEQ             reduce using rule 84 (factor -> INT_LIT .)
    EQ              reduce using rule 84 (factor -> INT_LIT .)
    LAND            reduce using rule 84 (factor -> INT_LIT .)
    LOR             reduce using rule 84 (factor -> INT_LIT .)
    ;               reduce using rule 84 (factor -> INT_LIT .)
    ]               reduce using rule 84 (factor -> INT_LIT .)
    ,               reduce using rule 84 (factor -> INT_LIT .)
    }               reduce using rule 84 (factor -> INT_LIT .)
    )               reduce using rule 84 (factor -> INT_LIT .)


state 57

    (96) type_func -> FUNCTION type_array_sized ( . opt_param_list )
    (98) opt_param_list -> . param_list
    (99) opt_param_list -> . empty
    (100) param_list -> . param
    (101) param_list -> . param_list , param
    (105) empty -> .
    (102) param -> . ID : type_array_sized
    (103) param -> . ID : type_array
    (104) param -> . ID : type_simple
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 121

    opt_param_list                 shift and go to state 117
    param_list                     shift and go to state 118
    empty                          shift and go to state 119
    param                          shift and go to state 120

state 58

    (97) type_func -> FUNCTION type_simple ( . opt_param_list )
    (98) opt_param_list -> . param_list
    (99) opt_param_list -> . empty
    (100) param_list -> . param
    (101) param_list -> . param_list , param
    (105) empty -> .
    (102) param -> . ID : type_array_sized
    (103) param -> . ID : type_array
    (104) param -> . ID : type_simple
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 121

    opt_param_list                 shift and go to state 122
    param_list                     shift and go to state 118
    empty                          shift and go to state 119
    param                          shift and go to state 120

state 59

    (94) type_array_sized -> ARRAY index type_array_sized .
    ;               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    =               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    (               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    ,               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    )               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)


state 60

    (95) type_array_sized -> ARRAY index type_simple .
    ;               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    =               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    (               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    ,               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    )               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)


state 61

    (78) index -> [ expr . ]
    ]               shift and go to state 123


state 62

    (5) decl -> ID . : type_func ;
    (6) decl -> ID . : type_array_sized ;
    (7) decl -> ID . : type_simple ;
    (8) decl_init -> ID . : type_func = { opt_stmt_list }
    (9) decl_init -> ID . : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID . : type_simple = expr ;
    (43) lval -> ID . index
    (44) lval -> ID .
    (74) group -> ID . index
    (76) group -> ID . ( opt_expr_list )
    (85) factor -> ID .
    (78) index -> . [ expr ]
    :               shift and go to state 7
    =               reduce using rule 44 (lval -> ID .)
    (               shift and go to state 91
    DEC             reduce using rule 85 (factor -> ID .)
    INC             reduce using rule 85 (factor -> ID .)
    ^               reduce using rule 85 (factor -> ID .)
    %               reduce using rule 85 (factor -> ID .)
    /               reduce using rule 85 (factor -> ID .)
    *               reduce using rule 85 (factor -> ID .)
    -               reduce using rule 85 (factor -> ID .)
    +               reduce using rule 85 (factor -> ID .)
    GE              reduce using rule 85 (factor -> ID .)
    GT              reduce using rule 85 (factor -> ID .)
    LE              reduce using rule 85 (factor -> ID .)
    LT              reduce using rule 85 (factor -> ID .)
    NEQ             reduce using rule 85 (factor -> ID .)
    EQ              reduce using rule 85 (factor -> ID .)
    LAND            reduce using rule 85 (factor -> ID .)
    LOR             reduce using rule 85 (factor -> ID .)
    ;               reduce using rule 85 (factor -> ID .)
    [               shift and go to state 28

    index                          shift and go to state 90

state 63

    (26) block_stmt -> { . stmt_list }
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt_list stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    stmt_list                      shift and go to state 124
    stmt                           shift and go to state 67
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    while_header                   shift and go to state 79
    for_header                     shift and go to state 80
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 64

    (8) decl_init -> ID : type_func = { opt_stmt_list . }
    }               shift and go to state 125


state 65

    (11) opt_stmt_list -> empty .
    }               reduce using rule 11 (opt_stmt_list -> empty .)


state 66

    (12) opt_stmt_list -> stmt_list .
    (14) stmt_list -> stmt_list . stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               reduce using rule 12 (opt_stmt_list -> stmt_list .)
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    stmt                           shift and go to state 126
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    while_header                   shift and go to state 79
    for_header                     shift and go to state 80
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 67

    (13) stmt_list -> stmt .
    DO              reduce using rule 13 (stmt_list -> stmt .)
    ID              reduce using rule 13 (stmt_list -> stmt .)
    {               reduce using rule 13 (stmt_list -> stmt .)
    RETURN          reduce using rule 13 (stmt_list -> stmt .)
    WHILE           reduce using rule 13 (stmt_list -> stmt .)
    FOR             reduce using rule 13 (stmt_list -> stmt .)
    IF              reduce using rule 13 (stmt_list -> stmt .)
    !               reduce using rule 13 (stmt_list -> stmt .)
    -               reduce using rule 13 (stmt_list -> stmt .)
    DEC             reduce using rule 13 (stmt_list -> stmt .)
    INC             reduce using rule 13 (stmt_list -> stmt .)
    PRINT           reduce using rule 13 (stmt_list -> stmt .)
    (               reduce using rule 13 (stmt_list -> stmt .)
    FALSE           reduce using rule 13 (stmt_list -> stmt .)
    TRUE            reduce using rule 13 (stmt_list -> stmt .)
    STRING_LIT      reduce using rule 13 (stmt_list -> stmt .)
    CHAR_LIT        reduce using rule 13 (stmt_list -> stmt .)
    FLOAT_LIT       reduce using rule 13 (stmt_list -> stmt .)
    INT_LIT         reduce using rule 13 (stmt_list -> stmt .)
    }               reduce using rule 13 (stmt_list -> stmt .)


state 68

    (15) stmt -> closed_stmt .
    DO              reduce using rule 15 (stmt -> closed_stmt .)
    ID              reduce using rule 15 (stmt -> closed_stmt .)
    {               reduce using rule 15 (stmt -> closed_stmt .)
    RETURN          reduce using rule 15 (stmt -> closed_stmt .)
    WHILE           reduce using rule 15 (stmt -> closed_stmt .)
    FOR             reduce using rule 15 (stmt -> closed_stmt .)
    IF              reduce using rule 15 (stmt -> closed_stmt .)
    !               reduce using rule 15 (stmt -> closed_stmt .)
    -               reduce using rule 15 (stmt -> closed_stmt .)
    DEC             reduce using rule 15 (stmt -> closed_stmt .)
    INC             reduce using rule 15 (stmt -> closed_stmt .)
    PRINT           reduce using rule 15 (stmt -> closed_stmt .)
    (               reduce using rule 15 (stmt -> closed_stmt .)
    FALSE           reduce using rule 15 (stmt -> closed_stmt .)
    TRUE            reduce using rule 15 (stmt -> closed_stmt .)
    STRING_LIT      reduce using rule 15 (stmt -> closed_stmt .)
    CHAR_LIT        reduce using rule 15 (stmt -> closed_stmt .)
    FLOAT_LIT       reduce using rule 15 (stmt -> closed_stmt .)
    INT_LIT         reduce using rule 15 (stmt -> closed_stmt .)
    }               reduce using rule 15 (stmt -> closed_stmt .)


state 69

    (16) closed_stmt -> simple_stmt .
    DO              reduce using rule 16 (closed_stmt -> simple_stmt .)
    ID              reduce using rule 16 (closed_stmt -> simple_stmt .)
    {               reduce using rule 16 (closed_stmt -> simple_stmt .)
    RETURN          reduce using rule 16 (closed_stmt -> simple_stmt .)
    WHILE           reduce using rule 16 (closed_stmt -> simple_stmt .)
    FOR             reduce using rule 16 (closed_stmt -> simple_stmt .)
    IF              reduce using rule 16 (closed_stmt -> simple_stmt .)
    !               reduce using rule 16 (closed_stmt -> simple_stmt .)
    -               reduce using rule 16 (closed_stmt -> simple_stmt .)
    DEC             reduce using rule 16 (closed_stmt -> simple_stmt .)
    INC             reduce using rule 16 (closed_stmt -> simple_stmt .)
    PRINT           reduce using rule 16 (closed_stmt -> simple_stmt .)
    (               reduce using rule 16 (closed_stmt -> simple_stmt .)
    FALSE           reduce using rule 16 (closed_stmt -> simple_stmt .)
    TRUE            reduce using rule 16 (closed_stmt -> simple_stmt .)
    STRING_LIT      reduce using rule 16 (closed_stmt -> simple_stmt .)
    CHAR_LIT        reduce using rule 16 (closed_stmt -> simple_stmt .)
    FLOAT_LIT       reduce using rule 16 (closed_stmt -> simple_stmt .)
    INT_LIT         reduce using rule 16 (closed_stmt -> simple_stmt .)
    }               reduce using rule 16 (closed_stmt -> simple_stmt .)


state 70

    (17) simple_stmt -> expr . ;
    ;               shift and go to state 127


state 71

    (18) simple_stmt -> do_while_stmt .
    DO              reduce using rule 18 (simple_stmt -> do_while_stmt .)
    ID              reduce using rule 18 (simple_stmt -> do_while_stmt .)
    {               reduce using rule 18 (simple_stmt -> do_while_stmt .)
    RETURN          reduce using rule 18 (simple_stmt -> do_while_stmt .)
    WHILE           reduce using rule 18 (simple_stmt -> do_while_stmt .)
    FOR             reduce using rule 18 (simple_stmt -> do_while_stmt .)
    IF              reduce using rule 18 (simple_stmt -> do_while_stmt .)
    !               reduce using rule 18 (simple_stmt -> do_while_stmt .)
    -               reduce using rule 18 (simple_stmt -> do_while_stmt .)
    DEC             reduce using rule 18 (simple_stmt -> do_while_stmt .)
    INC             reduce using rule 18 (simple_stmt -> do_while_stmt .)
    PRINT           reduce using rule 18 (simple_stmt -> do_while_stmt .)
    (               reduce using rule 18 (simple_stmt -> do_while_stmt .)
    FALSE           reduce using rule 18 (simple_stmt -> do_while_stmt .)
    TRUE            reduce using rule 18 (simple_stmt -> do_while_stmt .)
    STRING_LIT      reduce using rule 18 (simple_stmt -> do_while_stmt .)
    CHAR_LIT        reduce using rule 18 (simple_stmt -> do_while_stmt .)
    FLOAT_LIT       reduce using rule 18 (simple_stmt -> do_while_stmt .)
    INT_LIT         reduce using rule 18 (simple_stmt -> do_while_stmt .)
    }               reduce using rule 18 (simple_stmt -> do_while_stmt .)


state 72

    (19) simple_stmt -> while_stmt .
    DO              reduce using rule 19 (simple_stmt -> while_stmt .)
    ID              reduce using rule 19 (simple_stmt -> while_stmt .)
    {               reduce using rule 19 (simple_stmt -> while_stmt .)
    RETURN          reduce using rule 19 (simple_stmt -> while_stmt .)
    WHILE           reduce using rule 19 (simple_stmt -> while_stmt .)
    FOR             reduce using rule 19 (simple_stmt -> while_stmt .)
    IF              reduce using rule 19 (simple_stmt -> while_stmt .)
    !               reduce using rule 19 (simple_stmt -> while_stmt .)
    -               reduce using rule 19 (simple_stmt -> while_stmt .)
    DEC             reduce using rule 19 (simple_stmt -> while_stmt .)
    INC             reduce using rule 19 (simple_stmt -> while_stmt .)
    PRINT           reduce using rule 19 (simple_stmt -> while_stmt .)
    (               reduce using rule 19 (simple_stmt -> while_stmt .)
    FALSE           reduce using rule 19 (simple_stmt -> while_stmt .)
    TRUE            reduce using rule 19 (simple_stmt -> while_stmt .)
    STRING_LIT      reduce using rule 19 (simple_stmt -> while_stmt .)
    CHAR_LIT        reduce using rule 19 (simple_stmt -> while_stmt .)
    FLOAT_LIT       reduce using rule 19 (simple_stmt -> while_stmt .)
    INT_LIT         reduce using rule 19 (simple_stmt -> while_stmt .)
    }               reduce using rule 19 (simple_stmt -> while_stmt .)


state 73

    (20) simple_stmt -> for_stmt .
    DO              reduce using rule 20 (simple_stmt -> for_stmt .)
    ID              reduce using rule 20 (simple_stmt -> for_stmt .)
    {               reduce using rule 20 (simple_stmt -> for_stmt .)
    RETURN          reduce using rule 20 (simple_stmt -> for_stmt .)
    WHILE           reduce using rule 20 (simple_stmt -> for_stmt .)
    FOR             reduce using rule 20 (simple_stmt -> for_stmt .)
    IF              reduce using rule 20 (simple_stmt -> for_stmt .)
    !               reduce using rule 20 (simple_stmt -> for_stmt .)
    -               reduce using rule 20 (simple_stmt -> for_stmt .)
    DEC             reduce using rule 20 (simple_stmt -> for_stmt .)
    INC             reduce using rule 20 (simple_stmt -> for_stmt .)
    PRINT           reduce using rule 20 (simple_stmt -> for_stmt .)
    (               reduce using rule 20 (simple_stmt -> for_stmt .)
    FALSE           reduce using rule 20 (simple_stmt -> for_stmt .)
    TRUE            reduce using rule 20 (simple_stmt -> for_stmt .)
    STRING_LIT      reduce using rule 20 (simple_stmt -> for_stmt .)
    CHAR_LIT        reduce using rule 20 (simple_stmt -> for_stmt .)
    FLOAT_LIT       reduce using rule 20 (simple_stmt -> for_stmt .)
    INT_LIT         reduce using rule 20 (simple_stmt -> for_stmt .)
    }               reduce using rule 20 (simple_stmt -> for_stmt .)


state 74

    (21) simple_stmt -> if_stmt .
    DO              reduce using rule 21 (simple_stmt -> if_stmt .)
    ID              reduce using rule 21 (simple_stmt -> if_stmt .)
    {               reduce using rule 21 (simple_stmt -> if_stmt .)
    RETURN          reduce using rule 21 (simple_stmt -> if_stmt .)
    WHILE           reduce using rule 21 (simple_stmt -> if_stmt .)
    FOR             reduce using rule 21 (simple_stmt -> if_stmt .)
    IF              reduce using rule 21 (simple_stmt -> if_stmt .)
    !               reduce using rule 21 (simple_stmt -> if_stmt .)
    -               reduce using rule 21 (simple_stmt -> if_stmt .)
    DEC             reduce using rule 21 (simple_stmt -> if_stmt .)
    INC             reduce using rule 21 (simple_stmt -> if_stmt .)
    PRINT           reduce using rule 21 (simple_stmt -> if_stmt .)
    (               reduce using rule 21 (simple_stmt -> if_stmt .)
    FALSE           reduce using rule 21 (simple_stmt -> if_stmt .)
    TRUE            reduce using rule 21 (simple_stmt -> if_stmt .)
    STRING_LIT      reduce using rule 21 (simple_stmt -> if_stmt .)
    CHAR_LIT        reduce using rule 21 (simple_stmt -> if_stmt .)
    FLOAT_LIT       reduce using rule 21 (simple_stmt -> if_stmt .)
    INT_LIT         reduce using rule 21 (simple_stmt -> if_stmt .)
    }               reduce using rule 21 (simple_stmt -> if_stmt .)


state 75

    (22) simple_stmt -> decl .
    DO              reduce using rule 22 (simple_stmt -> decl .)
    ID              reduce using rule 22 (simple_stmt -> decl .)
    {               reduce using rule 22 (simple_stmt -> decl .)
    RETURN          reduce using rule 22 (simple_stmt -> decl .)
    WHILE           reduce using rule 22 (simple_stmt -> decl .)
    FOR             reduce using rule 22 (simple_stmt -> decl .)
    IF              reduce using rule 22 (simple_stmt -> decl .)
    !               reduce using rule 22 (simple_stmt -> decl .)
    -               reduce using rule 22 (simple_stmt -> decl .)
    DEC             reduce using rule 22 (simple_stmt -> decl .)
    INC             reduce using rule 22 (simple_stmt -> decl .)
    PRINT           reduce using rule 22 (simple_stmt -> decl .)
    (               reduce using rule 22 (simple_stmt -> decl .)
    FALSE           reduce using rule 22 (simple_stmt -> decl .)
    TRUE            reduce using rule 22 (simple_stmt -> decl .)
    STRING_LIT      reduce using rule 22 (simple_stmt -> decl .)
    CHAR_LIT        reduce using rule 22 (simple_stmt -> decl .)
    FLOAT_LIT       reduce using rule 22 (simple_stmt -> decl .)
    INT_LIT         reduce using rule 22 (simple_stmt -> decl .)
    }               reduce using rule 22 (simple_stmt -> decl .)


state 76

    (23) simple_stmt -> block_stmt .
    DO              reduce using rule 23 (simple_stmt -> block_stmt .)
    ID              reduce using rule 23 (simple_stmt -> block_stmt .)
    {               reduce using rule 23 (simple_stmt -> block_stmt .)
    RETURN          reduce using rule 23 (simple_stmt -> block_stmt .)
    WHILE           reduce using rule 23 (simple_stmt -> block_stmt .)
    FOR             reduce using rule 23 (simple_stmt -> block_stmt .)
    IF              reduce using rule 23 (simple_stmt -> block_stmt .)
    !               reduce using rule 23 (simple_stmt -> block_stmt .)
    -               reduce using rule 23 (simple_stmt -> block_stmt .)
    DEC             reduce using rule 23 (simple_stmt -> block_stmt .)
    INC             reduce using rule 23 (simple_stmt -> block_stmt .)
    PRINT           reduce using rule 23 (simple_stmt -> block_stmt .)
    (               reduce using rule 23 (simple_stmt -> block_stmt .)
    FALSE           reduce using rule 23 (simple_stmt -> block_stmt .)
    TRUE            reduce using rule 23 (simple_stmt -> block_stmt .)
    STRING_LIT      reduce using rule 23 (simple_stmt -> block_stmt .)
    CHAR_LIT        reduce using rule 23 (simple_stmt -> block_stmt .)
    FLOAT_LIT       reduce using rule 23 (simple_stmt -> block_stmt .)
    INT_LIT         reduce using rule 23 (simple_stmt -> block_stmt .)
    }               reduce using rule 23 (simple_stmt -> block_stmt .)


state 77

    (24) simple_stmt -> return_stmt .
    DO              reduce using rule 24 (simple_stmt -> return_stmt .)
    ID              reduce using rule 24 (simple_stmt -> return_stmt .)
    {               reduce using rule 24 (simple_stmt -> return_stmt .)
    RETURN          reduce using rule 24 (simple_stmt -> return_stmt .)
    WHILE           reduce using rule 24 (simple_stmt -> return_stmt .)
    FOR             reduce using rule 24 (simple_stmt -> return_stmt .)
    IF              reduce using rule 24 (simple_stmt -> return_stmt .)
    !               reduce using rule 24 (simple_stmt -> return_stmt .)
    -               reduce using rule 24 (simple_stmt -> return_stmt .)
    DEC             reduce using rule 24 (simple_stmt -> return_stmt .)
    INC             reduce using rule 24 (simple_stmt -> return_stmt .)
    PRINT           reduce using rule 24 (simple_stmt -> return_stmt .)
    (               reduce using rule 24 (simple_stmt -> return_stmt .)
    FALSE           reduce using rule 24 (simple_stmt -> return_stmt .)
    TRUE            reduce using rule 24 (simple_stmt -> return_stmt .)
    STRING_LIT      reduce using rule 24 (simple_stmt -> return_stmt .)
    CHAR_LIT        reduce using rule 24 (simple_stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 24 (simple_stmt -> return_stmt .)
    INT_LIT         reduce using rule 24 (simple_stmt -> return_stmt .)
    }               reduce using rule 24 (simple_stmt -> return_stmt .)


state 78

    (33) do_while_stmt -> DO . stmt while_header ;
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    stmt                           shift and go to state 128
    while_header                   shift and go to state 79
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    for_header                     shift and go to state 80
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 79

    (32) while_stmt -> while_header . { stmt_list }
    {               shift and go to state 129


state 80

    (30) for_stmt -> for_header . { stmt_list }
    {               shift and go to state 130


state 81

    (28) if_stmt -> if_header . { opt_stmt_list }
    {               shift and go to state 131


state 82

    (25) return_stmt -> RETURN . opt_expr ;
    (38) opt_expr -> . expr
    (39) opt_expr -> . empty
    (40) expr -> . expr1
    (105) empty -> .
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ;               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr                       shift and go to state 132
    expr                           shift and go to state 133
    empty                          shift and go to state 134
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 83

    (31) while_header -> WHILE . ( opt_expr )
    (               shift and go to state 135


state 84

    (29) for_header -> FOR . ( opt_expr ; opt_expr ; opt_expr )
    (               shift and go to state 136


state 85

    (27) if_header -> IF . ( opt_expr )
    (               shift and go to state 137


state 86

    (9) decl_init -> ID : type_array_sized = { opt_expr_list . } ;
    }               shift and go to state 138


state 87

    (34) opt_expr_list -> expr_list .
    }               reduce using rule 34 (opt_expr_list -> expr_list .)
    )               reduce using rule 34 (opt_expr_list -> expr_list .)


state 88

    (35) opt_expr_list -> empty .
    }               reduce using rule 35 (opt_expr_list -> empty .)
    )               reduce using rule 35 (opt_expr_list -> empty .)


state 89

    (36) expr_list -> expr .
    (37) expr_list -> expr . , expr_list
    }               reduce using rule 36 (expr_list -> expr .)
    )               reduce using rule 36 (expr_list -> expr .)
    ,               shift and go to state 139


state 90

    (43) lval -> ID index .
    (74) group -> ID index .
    =               reduce using rule 43 (lval -> ID index .)
    DEC             reduce using rule 74 (group -> ID index .)
    INC             reduce using rule 74 (group -> ID index .)
    ^               reduce using rule 74 (group -> ID index .)
    %               reduce using rule 74 (group -> ID index .)
    /               reduce using rule 74 (group -> ID index .)
    *               reduce using rule 74 (group -> ID index .)
    -               reduce using rule 74 (group -> ID index .)
    +               reduce using rule 74 (group -> ID index .)
    GE              reduce using rule 74 (group -> ID index .)
    GT              reduce using rule 74 (group -> ID index .)
    LE              reduce using rule 74 (group -> ID index .)
    LT              reduce using rule 74 (group -> ID index .)
    NEQ             reduce using rule 74 (group -> ID index .)
    EQ              reduce using rule 74 (group -> ID index .)
    LAND            reduce using rule 74 (group -> ID index .)
    LOR             reduce using rule 74 (group -> ID index .)
    ;               reduce using rule 74 (group -> ID index .)
    ]               reduce using rule 74 (group -> ID index .)
    ,               reduce using rule 74 (group -> ID index .)
    }               reduce using rule 74 (group -> ID index .)
    )               reduce using rule 74 (group -> ID index .)


state 91

    (76) group -> ID ( . opt_expr_list )
    (34) opt_expr_list -> . expr_list
    (35) opt_expr_list -> . empty
    (36) expr_list -> . expr
    (37) expr_list -> . expr , expr_list
    (105) empty -> .
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr_list                  shift and go to state 140
    expr_list                      shift and go to state 87
    empty                          shift and go to state 88
    expr                           shift and go to state 89
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 92

    (10) decl_init -> ID : type_simple = expr ; .
    ID              reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    $end            reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    DO              reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    {               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    RETURN          reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    WHILE           reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FOR             reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    IF              reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    !               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    -               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    DEC             reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    INC             reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    PRINT           reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    (               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FALSE           reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    TRUE            reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    STRING_LIT      reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    CHAR_LIT        reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FLOAT_LIT       reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    INT_LIT         reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    }               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)


state 93

    (46) expr2 -> expr2 LOR . expr3
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr3                          shift and go to state 141
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 94

    (42) expr1 -> lval = . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    lval                           shift and go to state 35
    expr1                          shift and go to state 142
    expr2                          shift and go to state 34
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 95

    (48) expr3 -> expr3 LAND . expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr4                          shift and go to state 143
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 96

    (50) expr4 -> expr4 GE . expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr5                          shift and go to state 144
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 97

    (51) expr4 -> expr4 GT . expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr5                          shift and go to state 145
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 98

    (52) expr4 -> expr4 LE . expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr5                          shift and go to state 146
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 99

    (53) expr4 -> expr4 LT . expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr5                          shift and go to state 147
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 100

    (54) expr4 -> expr4 NEQ . expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr5                          shift and go to state 148
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 101

    (55) expr4 -> expr4 EQ . expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr5                          shift and go to state 149
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 102

    (57) expr5 -> expr5 - . expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr6                          shift and go to state 150
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 103

    (58) expr5 -> expr5 + . expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr6                          shift and go to state 151
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 104

    (60) expr6 -> expr6 % . expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr7                          shift and go to state 152
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 105

    (61) expr6 -> expr6 / . expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr7                          shift and go to state 153
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 106

    (62) expr6 -> expr6 * . expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr7                          shift and go to state 154
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 107

    (67) expr8 -> - expr8 .
    ^               reduce using rule 67 (expr8 -> - expr8 .)
    %               reduce using rule 67 (expr8 -> - expr8 .)
    /               reduce using rule 67 (expr8 -> - expr8 .)
    *               reduce using rule 67 (expr8 -> - expr8 .)
    -               reduce using rule 67 (expr8 -> - expr8 .)
    +               reduce using rule 67 (expr8 -> - expr8 .)
    GE              reduce using rule 67 (expr8 -> - expr8 .)
    GT              reduce using rule 67 (expr8 -> - expr8 .)
    LE              reduce using rule 67 (expr8 -> - expr8 .)
    LT              reduce using rule 67 (expr8 -> - expr8 .)
    NEQ             reduce using rule 67 (expr8 -> - expr8 .)
    EQ              reduce using rule 67 (expr8 -> - expr8 .)
    LAND            reduce using rule 67 (expr8 -> - expr8 .)
    LOR             reduce using rule 67 (expr8 -> - expr8 .)
    ;               reduce using rule 67 (expr8 -> - expr8 .)
    ]               reduce using rule 67 (expr8 -> - expr8 .)
    ,               reduce using rule 67 (expr8 -> - expr8 .)
    }               reduce using rule 67 (expr8 -> - expr8 .)
    DEC             reduce using rule 67 (expr8 -> - expr8 .)
    INC             reduce using rule 67 (expr8 -> - expr8 .)
    )               reduce using rule 67 (expr8 -> - expr8 .)


state 108

    (74) group -> ID . index
    (76) group -> ID . ( opt_expr_list )
    (85) factor -> ID .
    (78) index -> . [ expr ]
    (               shift and go to state 91
    DEC             reduce using rule 85 (factor -> ID .)
    INC             reduce using rule 85 (factor -> ID .)
    ^               reduce using rule 85 (factor -> ID .)
    %               reduce using rule 85 (factor -> ID .)
    /               reduce using rule 85 (factor -> ID .)
    *               reduce using rule 85 (factor -> ID .)
    -               reduce using rule 85 (factor -> ID .)
    +               reduce using rule 85 (factor -> ID .)
    GE              reduce using rule 85 (factor -> ID .)
    GT              reduce using rule 85 (factor -> ID .)
    LE              reduce using rule 85 (factor -> ID .)
    LT              reduce using rule 85 (factor -> ID .)
    NEQ             reduce using rule 85 (factor -> ID .)
    EQ              reduce using rule 85 (factor -> ID .)
    LAND            reduce using rule 85 (factor -> ID .)
    LOR             reduce using rule 85 (factor -> ID .)
    ;               reduce using rule 85 (factor -> ID .)
    ]               reduce using rule 85 (factor -> ID .)
    ,               reduce using rule 85 (factor -> ID .)
    }               reduce using rule 85 (factor -> ID .)
    )               reduce using rule 85 (factor -> ID .)
    [               shift and go to state 28

    index                          shift and go to state 155

state 109

    (64) expr7 -> expr7 ^ . expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 108
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr8                          shift and go to state 156
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 110

    (71) expr9 -> expr9 DEC .
    DEC             reduce using rule 71 (expr9 -> expr9 DEC .)
    INC             reduce using rule 71 (expr9 -> expr9 DEC .)
    ^               reduce using rule 71 (expr9 -> expr9 DEC .)
    %               reduce using rule 71 (expr9 -> expr9 DEC .)
    /               reduce using rule 71 (expr9 -> expr9 DEC .)
    *               reduce using rule 71 (expr9 -> expr9 DEC .)
    -               reduce using rule 71 (expr9 -> expr9 DEC .)
    +               reduce using rule 71 (expr9 -> expr9 DEC .)
    GE              reduce using rule 71 (expr9 -> expr9 DEC .)
    GT              reduce using rule 71 (expr9 -> expr9 DEC .)
    LE              reduce using rule 71 (expr9 -> expr9 DEC .)
    LT              reduce using rule 71 (expr9 -> expr9 DEC .)
    NEQ             reduce using rule 71 (expr9 -> expr9 DEC .)
    EQ              reduce using rule 71 (expr9 -> expr9 DEC .)
    LAND            reduce using rule 71 (expr9 -> expr9 DEC .)
    LOR             reduce using rule 71 (expr9 -> expr9 DEC .)
    ;               reduce using rule 71 (expr9 -> expr9 DEC .)
    ]               reduce using rule 71 (expr9 -> expr9 DEC .)
    ,               reduce using rule 71 (expr9 -> expr9 DEC .)
    }               reduce using rule 71 (expr9 -> expr9 DEC .)
    )               reduce using rule 71 (expr9 -> expr9 DEC .)


state 111

    (72) expr9 -> expr9 INC .
    DEC             reduce using rule 72 (expr9 -> expr9 INC .)
    INC             reduce using rule 72 (expr9 -> expr9 INC .)
    ^               reduce using rule 72 (expr9 -> expr9 INC .)
    %               reduce using rule 72 (expr9 -> expr9 INC .)
    /               reduce using rule 72 (expr9 -> expr9 INC .)
    *               reduce using rule 72 (expr9 -> expr9 INC .)
    -               reduce using rule 72 (expr9 -> expr9 INC .)
    +               reduce using rule 72 (expr9 -> expr9 INC .)
    GE              reduce using rule 72 (expr9 -> expr9 INC .)
    GT              reduce using rule 72 (expr9 -> expr9 INC .)
    LE              reduce using rule 72 (expr9 -> expr9 INC .)
    LT              reduce using rule 72 (expr9 -> expr9 INC .)
    NEQ             reduce using rule 72 (expr9 -> expr9 INC .)
    EQ              reduce using rule 72 (expr9 -> expr9 INC .)
    LAND            reduce using rule 72 (expr9 -> expr9 INC .)
    LOR             reduce using rule 72 (expr9 -> expr9 INC .)
    ;               reduce using rule 72 (expr9 -> expr9 INC .)
    ]               reduce using rule 72 (expr9 -> expr9 INC .)
    ,               reduce using rule 72 (expr9 -> expr9 INC .)
    }               reduce using rule 72 (expr9 -> expr9 INC .)
    )               reduce using rule 72 (expr9 -> expr9 INC .)


state 112

    (66) expr8 -> ! expr8 .
    ^               reduce using rule 66 (expr8 -> ! expr8 .)
    %               reduce using rule 66 (expr8 -> ! expr8 .)
    /               reduce using rule 66 (expr8 -> ! expr8 .)
    *               reduce using rule 66 (expr8 -> ! expr8 .)
    -               reduce using rule 66 (expr8 -> ! expr8 .)
    +               reduce using rule 66 (expr8 -> ! expr8 .)
    GE              reduce using rule 66 (expr8 -> ! expr8 .)
    GT              reduce using rule 66 (expr8 -> ! expr8 .)
    LE              reduce using rule 66 (expr8 -> ! expr8 .)
    LT              reduce using rule 66 (expr8 -> ! expr8 .)
    NEQ             reduce using rule 66 (expr8 -> ! expr8 .)
    EQ              reduce using rule 66 (expr8 -> ! expr8 .)
    LAND            reduce using rule 66 (expr8 -> ! expr8 .)
    LOR             reduce using rule 66 (expr8 -> ! expr8 .)
    ;               reduce using rule 66 (expr8 -> ! expr8 .)
    ]               reduce using rule 66 (expr8 -> ! expr8 .)
    ,               reduce using rule 66 (expr8 -> ! expr8 .)
    }               reduce using rule 66 (expr8 -> ! expr8 .)
    DEC             reduce using rule 66 (expr8 -> ! expr8 .)
    INC             reduce using rule 66 (expr8 -> ! expr8 .)
    )               reduce using rule 66 (expr8 -> ! expr8 .)


state 113

    (68) expr9 -> DEC expr9 .
    (71) expr9 -> expr9 . DEC
    (72) expr9 -> expr9 . INC
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
    ^               reduce using rule 68 (expr9 -> DEC expr9 .)
    %               reduce using rule 68 (expr9 -> DEC expr9 .)
    /               reduce using rule 68 (expr9 -> DEC expr9 .)
    *               reduce using rule 68 (expr9 -> DEC expr9 .)
    -               reduce using rule 68 (expr9 -> DEC expr9 .)
    +               reduce using rule 68 (expr9 -> DEC expr9 .)
    GE              reduce using rule 68 (expr9 -> DEC expr9 .)
    GT              reduce using rule 68 (expr9 -> DEC expr9 .)
    LE              reduce using rule 68 (expr9 -> DEC expr9 .)
    LT              reduce using rule 68 (expr9 -> DEC expr9 .)
    NEQ             reduce using rule 68 (expr9 -> DEC expr9 .)
    EQ              reduce using rule 68 (expr9 -> DEC expr9 .)
    LAND            reduce using rule 68 (expr9 -> DEC expr9 .)
    LOR             reduce using rule 68 (expr9 -> DEC expr9 .)
    ;               reduce using rule 68 (expr9 -> DEC expr9 .)
    ]               reduce using rule 68 (expr9 -> DEC expr9 .)
    ,               reduce using rule 68 (expr9 -> DEC expr9 .)
    }               reduce using rule 68 (expr9 -> DEC expr9 .)
    )               reduce using rule 68 (expr9 -> DEC expr9 .)
    DEC             shift and go to state 110
    INC             shift and go to state 111


state 114

    (69) expr9 -> INC expr9 .
    (71) expr9 -> expr9 . DEC
    (72) expr9 -> expr9 . INC
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
    ^               reduce using rule 69 (expr9 -> INC expr9 .)
    %               reduce using rule 69 (expr9 -> INC expr9 .)
    /               reduce using rule 69 (expr9 -> INC expr9 .)
    *               reduce using rule 69 (expr9 -> INC expr9 .)
    -               reduce using rule 69 (expr9 -> INC expr9 .)
    +               reduce using rule 69 (expr9 -> INC expr9 .)
    GE              reduce using rule 69 (expr9 -> INC expr9 .)
    GT              reduce using rule 69 (expr9 -> INC expr9 .)
    LE              reduce using rule 69 (expr9 -> INC expr9 .)
    LT              reduce using rule 69 (expr9 -> INC expr9 .)
    NEQ             reduce using rule 69 (expr9 -> INC expr9 .)
    EQ              reduce using rule 69 (expr9 -> INC expr9 .)
    LAND            reduce using rule 69 (expr9 -> INC expr9 .)
    LOR             reduce using rule 69 (expr9 -> INC expr9 .)
    ;               reduce using rule 69 (expr9 -> INC expr9 .)
    ]               reduce using rule 69 (expr9 -> INC expr9 .)
    ,               reduce using rule 69 (expr9 -> INC expr9 .)
    }               reduce using rule 69 (expr9 -> INC expr9 .)
    )               reduce using rule 69 (expr9 -> INC expr9 .)
    DEC             shift and go to state 110
    INC             shift and go to state 111


state 115

    (75) group -> PRINT expr .
    DEC             reduce using rule 75 (group -> PRINT expr .)
    INC             reduce using rule 75 (group -> PRINT expr .)
    ^               reduce using rule 75 (group -> PRINT expr .)
    %               reduce using rule 75 (group -> PRINT expr .)
    /               reduce using rule 75 (group -> PRINT expr .)
    *               reduce using rule 75 (group -> PRINT expr .)
    -               reduce using rule 75 (group -> PRINT expr .)
    +               reduce using rule 75 (group -> PRINT expr .)
    GE              reduce using rule 75 (group -> PRINT expr .)
    GT              reduce using rule 75 (group -> PRINT expr .)
    LE              reduce using rule 75 (group -> PRINT expr .)
    LT              reduce using rule 75 (group -> PRINT expr .)
    NEQ             reduce using rule 75 (group -> PRINT expr .)
    EQ              reduce using rule 75 (group -> PRINT expr .)
    LAND            reduce using rule 75 (group -> PRINT expr .)
    LOR             reduce using rule 75 (group -> PRINT expr .)
    ;               reduce using rule 75 (group -> PRINT expr .)
    ]               reduce using rule 75 (group -> PRINT expr .)
    ,               reduce using rule 75 (group -> PRINT expr .)
    }               reduce using rule 75 (group -> PRINT expr .)
    )               reduce using rule 75 (group -> PRINT expr .)


state 116

    (77) group -> ( expr . )
    )               shift and go to state 157


state 117

    (96) type_func -> FUNCTION type_array_sized ( opt_param_list . )
    )               shift and go to state 158


state 118

    (98) opt_param_list -> param_list .
    (101) param_list -> param_list . , param
    )               reduce using rule 98 (opt_param_list -> param_list .)
    ,               shift and go to state 159


state 119

    (99) opt_param_list -> empty .
    )               reduce using rule 99 (opt_param_list -> empty .)


state 120

    (100) param_list -> param .
    ,               reduce using rule 100 (param_list -> param .)
    )               reduce using rule 100 (param_list -> param .)


state 121

    (102) param -> ID . : type_array_sized
    (103) param -> ID . : type_array
    (104) param -> ID . : type_simple
    :               shift and go to state 160


state 122

    (97) type_func -> FUNCTION type_simple ( opt_param_list . )
    )               shift and go to state 161


state 123

    (78) index -> [ expr ] .
    ARRAY           reduce using rule 78 (index -> [ expr ] .)
    VOID            reduce using rule 78 (index -> [ expr ] .)
    STRING          reduce using rule 78 (index -> [ expr ] .)
    CHAR            reduce using rule 78 (index -> [ expr ] .)
    BOOLEAN         reduce using rule 78 (index -> [ expr ] .)
    FLOAT           reduce using rule 78 (index -> [ expr ] .)
    INTEGER         reduce using rule 78 (index -> [ expr ] .)
    =               reduce using rule 78 (index -> [ expr ] .)
    DEC             reduce using rule 78 (index -> [ expr ] .)
    INC             reduce using rule 78 (index -> [ expr ] .)
    ^               reduce using rule 78 (index -> [ expr ] .)
    %               reduce using rule 78 (index -> [ expr ] .)
    /               reduce using rule 78 (index -> [ expr ] .)
    *               reduce using rule 78 (index -> [ expr ] .)
    -               reduce using rule 78 (index -> [ expr ] .)
    +               reduce using rule 78 (index -> [ expr ] .)
    GE              reduce using rule 78 (index -> [ expr ] .)
    GT              reduce using rule 78 (index -> [ expr ] .)
    LE              reduce using rule 78 (index -> [ expr ] .)
    LT              reduce using rule 78 (index -> [ expr ] .)
    NEQ             reduce using rule 78 (index -> [ expr ] .)
    EQ              reduce using rule 78 (index -> [ expr ] .)
    LAND            reduce using rule 78 (index -> [ expr ] .)
    LOR             reduce using rule 78 (index -> [ expr ] .)
    ;               reduce using rule 78 (index -> [ expr ] .)
    ]               reduce using rule 78 (index -> [ expr ] .)
    ,               reduce using rule 78 (index -> [ expr ] .)
    }               reduce using rule 78 (index -> [ expr ] .)
    )               reduce using rule 78 (index -> [ expr ] .)


state 124

    (26) block_stmt -> { stmt_list . }
    (14) stmt_list -> stmt_list . stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               shift and go to state 162
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    stmt                           shift and go to state 126
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    while_header                   shift and go to state 79
    for_header                     shift and go to state 80
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 125

    (8) decl_init -> ID : type_func = { opt_stmt_list } .
    ID              reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    $end            reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    DO              reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    {               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    RETURN          reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    WHILE           reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FOR             reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    IF              reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    !               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    -               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    DEC             reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    INC             reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    PRINT           reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    (               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FALSE           reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    TRUE            reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    STRING_LIT      reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    CHAR_LIT        reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FLOAT_LIT       reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    INT_LIT         reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    }               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)


state 126

    (14) stmt_list -> stmt_list stmt .
    DO              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    {               reduce using rule 14 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 14 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 14 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    !               reduce using rule 14 (stmt_list -> stmt_list stmt .)
    -               reduce using rule 14 (stmt_list -> stmt_list stmt .)
    DEC             reduce using rule 14 (stmt_list -> stmt_list stmt .)
    INC             reduce using rule 14 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    (               reduce using rule 14 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 14 (stmt_list -> stmt_list stmt .)
    STRING_LIT      reduce using rule 14 (stmt_list -> stmt_list stmt .)
    CHAR_LIT        reduce using rule 14 (stmt_list -> stmt_list stmt .)
    FLOAT_LIT       reduce using rule 14 (stmt_list -> stmt_list stmt .)
    INT_LIT         reduce using rule 14 (stmt_list -> stmt_list stmt .)
    }               reduce using rule 14 (stmt_list -> stmt_list stmt .)


state 127

    (17) simple_stmt -> expr ; .
    DO              reduce using rule 17 (simple_stmt -> expr ; .)
    ID              reduce using rule 17 (simple_stmt -> expr ; .)
    {               reduce using rule 17 (simple_stmt -> expr ; .)
    RETURN          reduce using rule 17 (simple_stmt -> expr ; .)
    WHILE           reduce using rule 17 (simple_stmt -> expr ; .)
    FOR             reduce using rule 17 (simple_stmt -> expr ; .)
    IF              reduce using rule 17 (simple_stmt -> expr ; .)
    !               reduce using rule 17 (simple_stmt -> expr ; .)
    -               reduce using rule 17 (simple_stmt -> expr ; .)
    DEC             reduce using rule 17 (simple_stmt -> expr ; .)
    INC             reduce using rule 17 (simple_stmt -> expr ; .)
    PRINT           reduce using rule 17 (simple_stmt -> expr ; .)
    (               reduce using rule 17 (simple_stmt -> expr ; .)
    FALSE           reduce using rule 17 (simple_stmt -> expr ; .)
    TRUE            reduce using rule 17 (simple_stmt -> expr ; .)
    STRING_LIT      reduce using rule 17 (simple_stmt -> expr ; .)
    CHAR_LIT        reduce using rule 17 (simple_stmt -> expr ; .)
    FLOAT_LIT       reduce using rule 17 (simple_stmt -> expr ; .)
    INT_LIT         reduce using rule 17 (simple_stmt -> expr ; .)
    }               reduce using rule 17 (simple_stmt -> expr ; .)


state 128

    (33) do_while_stmt -> DO stmt . while_header ;
    (31) while_header -> . WHILE ( opt_expr )
    WHILE           shift and go to state 83

    while_header                   shift and go to state 163

state 129

    (32) while_stmt -> while_header { . stmt_list }
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt_list stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    while_header                   shift and go to state 79
    stmt_list                      shift and go to state 164
    stmt                           shift and go to state 67
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    for_header                     shift and go to state 80
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 130

    (30) for_stmt -> for_header { . stmt_list }
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt_list stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    for_header                     shift and go to state 80
    stmt_list                      shift and go to state 165
    stmt                           shift and go to state 67
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    while_header                   shift and go to state 79
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 131

    (28) if_stmt -> if_header { . opt_stmt_list }
    (11) opt_stmt_list -> . empty
    (12) opt_stmt_list -> . stmt_list
    (105) empty -> .
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt_list stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               reduce using rule 105 (empty -> .)
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    if_header                      shift and go to state 81
    opt_stmt_list                  shift and go to state 166
    empty                          shift and go to state 65
    stmt_list                      shift and go to state 66
    stmt                           shift and go to state 67
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    while_header                   shift and go to state 79
    for_header                     shift and go to state 80
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 132

    (25) return_stmt -> RETURN opt_expr . ;
    ;               shift and go to state 167


state 133

    (38) opt_expr -> expr .
    ;               reduce using rule 38 (opt_expr -> expr .)
    )               reduce using rule 38 (opt_expr -> expr .)


state 134

    (39) opt_expr -> empty .
    ;               reduce using rule 39 (opt_expr -> empty .)
    )               reduce using rule 39 (opt_expr -> empty .)


state 135

    (31) while_header -> WHILE ( . opt_expr )
    (38) opt_expr -> . expr
    (39) opt_expr -> . empty
    (40) expr -> . expr1
    (105) empty -> .
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr                       shift and go to state 168
    expr                           shift and go to state 133
    empty                          shift and go to state 134
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 136

    (29) for_header -> FOR ( . opt_expr ; opt_expr ; opt_expr )
    (38) opt_expr -> . expr
    (39) opt_expr -> . empty
    (40) expr -> . expr1
    (105) empty -> .
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ;               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr                       shift and go to state 169
    expr                           shift and go to state 133
    empty                          shift and go to state 134
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 137

    (27) if_header -> IF ( . opt_expr )
    (38) opt_expr -> . expr
    (39) opt_expr -> . empty
    (40) expr -> . expr1
    (105) empty -> .
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr                       shift and go to state 170
    expr                           shift and go to state 133
    empty                          shift and go to state 134
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 138

    (9) decl_init -> ID : type_array_sized = { opt_expr_list } . ;
    ;               shift and go to state 171


state 139

    (37) expr_list -> expr , . expr_list
    (36) expr_list -> . expr
    (37) expr_list -> . expr , expr_list
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr                           shift and go to state 89
    expr_list                      shift and go to state 172
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 140

    (76) group -> ID ( opt_expr_list . )
    )               shift and go to state 173


state 141

    (46) expr2 -> expr2 LOR expr3 .
    (48) expr3 -> expr3 . LAND expr4
  ! shift/reduce conflict for LAND resolved as shift
    LOR             reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    ;               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    ]               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    ,               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    }               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    DEC             reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    INC             reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    ^               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    %               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    /               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    *               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    -               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    +               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    GE              reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    GT              reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    LE              reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    LT              reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    NEQ             reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    EQ              reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    )               reduce using rule 46 (expr2 -> expr2 LOR expr3 .)
    LAND            shift and go to state 95


state 142

    (42) expr1 -> lval = expr1 .
    ;               reduce using rule 42 (expr1 -> lval = expr1 .)
    ]               reduce using rule 42 (expr1 -> lval = expr1 .)
    ,               reduce using rule 42 (expr1 -> lval = expr1 .)
    }               reduce using rule 42 (expr1 -> lval = expr1 .)
    DEC             reduce using rule 42 (expr1 -> lval = expr1 .)
    INC             reduce using rule 42 (expr1 -> lval = expr1 .)
    ^               reduce using rule 42 (expr1 -> lval = expr1 .)
    %               reduce using rule 42 (expr1 -> lval = expr1 .)
    /               reduce using rule 42 (expr1 -> lval = expr1 .)
    *               reduce using rule 42 (expr1 -> lval = expr1 .)
    -               reduce using rule 42 (expr1 -> lval = expr1 .)
    +               reduce using rule 42 (expr1 -> lval = expr1 .)
    GE              reduce using rule 42 (expr1 -> lval = expr1 .)
    GT              reduce using rule 42 (expr1 -> lval = expr1 .)
    LE              reduce using rule 42 (expr1 -> lval = expr1 .)
    LT              reduce using rule 42 (expr1 -> lval = expr1 .)
    NEQ             reduce using rule 42 (expr1 -> lval = expr1 .)
    EQ              reduce using rule 42 (expr1 -> lval = expr1 .)
    LAND            reduce using rule 42 (expr1 -> lval = expr1 .)
    LOR             reduce using rule 42 (expr1 -> lval = expr1 .)
    )               reduce using rule 42 (expr1 -> lval = expr1 .)


state 143

    (48) expr3 -> expr3 LAND expr4 .
    (50) expr4 -> expr4 . GE expr5
    (51) expr4 -> expr4 . GT expr5
    (52) expr4 -> expr4 . LE expr5
    (53) expr4 -> expr4 . LT expr5
    (54) expr4 -> expr4 . NEQ expr5
    (55) expr4 -> expr4 . EQ expr5
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    LAND            reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    LOR             reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    ;               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    ]               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    ,               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    }               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    DEC             reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    INC             reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    ^               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    %               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    /               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    *               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    -               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    +               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    )               reduce using rule 48 (expr3 -> expr3 LAND expr4 .)
    GE              shift and go to state 96
    GT              shift and go to state 97
    LE              shift and go to state 98
    LT              shift and go to state 99
    NEQ             shift and go to state 100
    EQ              shift and go to state 101


state 144

    (50) expr4 -> expr4 GE expr5 .
    (57) expr5 -> expr5 . - expr6
    (58) expr5 -> expr5 . + expr6
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    GE              reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    GT              reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    LE              reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    LT              reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    NEQ             reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    EQ              reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    LAND            reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    LOR             reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    ;               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    ]               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    ,               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    }               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    DEC             reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    INC             reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    ^               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    %               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    /               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    *               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    )               reduce using rule 50 (expr4 -> expr4 GE expr5 .)
    -               shift and go to state 102
    +               shift and go to state 103


state 145

    (51) expr4 -> expr4 GT expr5 .
    (57) expr5 -> expr5 . - expr6
    (58) expr5 -> expr5 . + expr6
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    GE              reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    GT              reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    LE              reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    LT              reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    NEQ             reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    EQ              reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    LAND            reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    LOR             reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    ;               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    ]               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    ,               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    }               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    DEC             reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    INC             reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    ^               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    %               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    /               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    *               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    )               reduce using rule 51 (expr4 -> expr4 GT expr5 .)
    -               shift and go to state 102
    +               shift and go to state 103


state 146

    (52) expr4 -> expr4 LE expr5 .
    (57) expr5 -> expr5 . - expr6
    (58) expr5 -> expr5 . + expr6
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    GE              reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    GT              reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    LE              reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    LT              reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    NEQ             reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    EQ              reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    LAND            reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    LOR             reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    ;               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    ]               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    ,               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    }               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    DEC             reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    INC             reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    ^               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    %               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    /               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    *               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    )               reduce using rule 52 (expr4 -> expr4 LE expr5 .)
    -               shift and go to state 102
    +               shift and go to state 103


state 147

    (53) expr4 -> expr4 LT expr5 .
    (57) expr5 -> expr5 . - expr6
    (58) expr5 -> expr5 . + expr6
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    GE              reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    GT              reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    LE              reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    LT              reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    NEQ             reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    EQ              reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    LAND            reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    LOR             reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    ;               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    ]               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    ,               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    }               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    DEC             reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    INC             reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    ^               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    %               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    /               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    *               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    )               reduce using rule 53 (expr4 -> expr4 LT expr5 .)
    -               shift and go to state 102
    +               shift and go to state 103


state 148

    (54) expr4 -> expr4 NEQ expr5 .
    (57) expr5 -> expr5 . - expr6
    (58) expr5 -> expr5 . + expr6
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    GE              reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    GT              reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    LE              reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    LT              reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    NEQ             reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    EQ              reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    LAND            reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    LOR             reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    ;               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    ]               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    ,               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    }               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    DEC             reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    INC             reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    ^               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    %               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    /               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    *               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    )               reduce using rule 54 (expr4 -> expr4 NEQ expr5 .)
    -               shift and go to state 102
    +               shift and go to state 103


state 149

    (55) expr4 -> expr4 EQ expr5 .
    (57) expr5 -> expr5 . - expr6
    (58) expr5 -> expr5 . + expr6
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    GE              reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    GT              reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    LE              reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    LT              reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    NEQ             reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    EQ              reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    LAND            reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    LOR             reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    ;               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    ]               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    ,               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    }               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    DEC             reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    INC             reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    ^               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    %               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    /               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    *               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    )               reduce using rule 55 (expr4 -> expr4 EQ expr5 .)
    -               shift and go to state 102
    +               shift and go to state 103


state 150

    (57) expr5 -> expr5 - expr6 .
    (60) expr6 -> expr6 . % expr7
    (61) expr6 -> expr6 . / expr7
    (62) expr6 -> expr6 . * expr7
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    -               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    +               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    GE              reduce using rule 57 (expr5 -> expr5 - expr6 .)
    GT              reduce using rule 57 (expr5 -> expr5 - expr6 .)
    LE              reduce using rule 57 (expr5 -> expr5 - expr6 .)
    LT              reduce using rule 57 (expr5 -> expr5 - expr6 .)
    NEQ             reduce using rule 57 (expr5 -> expr5 - expr6 .)
    EQ              reduce using rule 57 (expr5 -> expr5 - expr6 .)
    LAND            reduce using rule 57 (expr5 -> expr5 - expr6 .)
    LOR             reduce using rule 57 (expr5 -> expr5 - expr6 .)
    ;               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    ]               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    ,               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    }               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    DEC             reduce using rule 57 (expr5 -> expr5 - expr6 .)
    INC             reduce using rule 57 (expr5 -> expr5 - expr6 .)
    ^               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    )               reduce using rule 57 (expr5 -> expr5 - expr6 .)
    %               shift and go to state 104
    /               shift and go to state 105
    *               shift and go to state 106


state 151

    (58) expr5 -> expr5 + expr6 .
    (60) expr6 -> expr6 . % expr7
    (61) expr6 -> expr6 . / expr7
    (62) expr6 -> expr6 . * expr7
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    -               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    +               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    GE              reduce using rule 58 (expr5 -> expr5 + expr6 .)
    GT              reduce using rule 58 (expr5 -> expr5 + expr6 .)
    LE              reduce using rule 58 (expr5 -> expr5 + expr6 .)
    LT              reduce using rule 58 (expr5 -> expr5 + expr6 .)
    NEQ             reduce using rule 58 (expr5 -> expr5 + expr6 .)
    EQ              reduce using rule 58 (expr5 -> expr5 + expr6 .)
    LAND            reduce using rule 58 (expr5 -> expr5 + expr6 .)
    LOR             reduce using rule 58 (expr5 -> expr5 + expr6 .)
    ;               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    ]               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    ,               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    }               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    DEC             reduce using rule 58 (expr5 -> expr5 + expr6 .)
    INC             reduce using rule 58 (expr5 -> expr5 + expr6 .)
    ^               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    )               reduce using rule 58 (expr5 -> expr5 + expr6 .)
    %               shift and go to state 104
    /               shift and go to state 105
    *               shift and go to state 106


state 152

    (60) expr6 -> expr6 % expr7 .
    (64) expr7 -> expr7 . ^ expr8
  ! shift/reduce conflict for ^ resolved as shift
    %               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    /               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    *               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    -               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    +               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    GE              reduce using rule 60 (expr6 -> expr6 % expr7 .)
    GT              reduce using rule 60 (expr6 -> expr6 % expr7 .)
    LE              reduce using rule 60 (expr6 -> expr6 % expr7 .)
    LT              reduce using rule 60 (expr6 -> expr6 % expr7 .)
    NEQ             reduce using rule 60 (expr6 -> expr6 % expr7 .)
    EQ              reduce using rule 60 (expr6 -> expr6 % expr7 .)
    LAND            reduce using rule 60 (expr6 -> expr6 % expr7 .)
    LOR             reduce using rule 60 (expr6 -> expr6 % expr7 .)
    ;               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    ]               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    ,               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    }               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    DEC             reduce using rule 60 (expr6 -> expr6 % expr7 .)
    INC             reduce using rule 60 (expr6 -> expr6 % expr7 .)
    )               reduce using rule 60 (expr6 -> expr6 % expr7 .)
    ^               shift and go to state 109


state 153

    (61) expr6 -> expr6 / expr7 .
    (64) expr7 -> expr7 . ^ expr8
  ! shift/reduce conflict for ^ resolved as shift
    %               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    /               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    *               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    -               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    +               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    GE              reduce using rule 61 (expr6 -> expr6 / expr7 .)
    GT              reduce using rule 61 (expr6 -> expr6 / expr7 .)
    LE              reduce using rule 61 (expr6 -> expr6 / expr7 .)
    LT              reduce using rule 61 (expr6 -> expr6 / expr7 .)
    NEQ             reduce using rule 61 (expr6 -> expr6 / expr7 .)
    EQ              reduce using rule 61 (expr6 -> expr6 / expr7 .)
    LAND            reduce using rule 61 (expr6 -> expr6 / expr7 .)
    LOR             reduce using rule 61 (expr6 -> expr6 / expr7 .)
    ;               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    ]               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    ,               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    }               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    DEC             reduce using rule 61 (expr6 -> expr6 / expr7 .)
    INC             reduce using rule 61 (expr6 -> expr6 / expr7 .)
    )               reduce using rule 61 (expr6 -> expr6 / expr7 .)
    ^               shift and go to state 109


state 154

    (62) expr6 -> expr6 * expr7 .
    (64) expr7 -> expr7 . ^ expr8
  ! shift/reduce conflict for ^ resolved as shift
    %               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    /               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    *               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    -               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    +               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    GE              reduce using rule 62 (expr6 -> expr6 * expr7 .)
    GT              reduce using rule 62 (expr6 -> expr6 * expr7 .)
    LE              reduce using rule 62 (expr6 -> expr6 * expr7 .)
    LT              reduce using rule 62 (expr6 -> expr6 * expr7 .)
    NEQ             reduce using rule 62 (expr6 -> expr6 * expr7 .)
    EQ              reduce using rule 62 (expr6 -> expr6 * expr7 .)
    LAND            reduce using rule 62 (expr6 -> expr6 * expr7 .)
    LOR             reduce using rule 62 (expr6 -> expr6 * expr7 .)
    ;               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    ]               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    ,               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    }               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    DEC             reduce using rule 62 (expr6 -> expr6 * expr7 .)
    INC             reduce using rule 62 (expr6 -> expr6 * expr7 .)
    )               reduce using rule 62 (expr6 -> expr6 * expr7 .)
    ^               shift and go to state 109


state 155

    (74) group -> ID index .
    DEC             reduce using rule 74 (group -> ID index .)
    INC             reduce using rule 74 (group -> ID index .)
    ^               reduce using rule 74 (group -> ID index .)
    %               reduce using rule 74 (group -> ID index .)
    /               reduce using rule 74 (group -> ID index .)
    *               reduce using rule 74 (group -> ID index .)
    -               reduce using rule 74 (group -> ID index .)
    +               reduce using rule 74 (group -> ID index .)
    GE              reduce using rule 74 (group -> ID index .)
    GT              reduce using rule 74 (group -> ID index .)
    LE              reduce using rule 74 (group -> ID index .)
    LT              reduce using rule 74 (group -> ID index .)
    NEQ             reduce using rule 74 (group -> ID index .)
    EQ              reduce using rule 74 (group -> ID index .)
    LAND            reduce using rule 74 (group -> ID index .)
    LOR             reduce using rule 74 (group -> ID index .)
    ;               reduce using rule 74 (group -> ID index .)
    ]               reduce using rule 74 (group -> ID index .)
    ,               reduce using rule 74 (group -> ID index .)
    }               reduce using rule 74 (group -> ID index .)
    )               reduce using rule 74 (group -> ID index .)


state 156

    (64) expr7 -> expr7 ^ expr8 .
    ^               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    %               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    /               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    *               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    -               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    +               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    GE              reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    GT              reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    LE              reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    LT              reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    NEQ             reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    EQ              reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    LAND            reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    LOR             reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    ;               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    ]               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    ,               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    }               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    DEC             reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    INC             reduce using rule 64 (expr7 -> expr7 ^ expr8 .)
    )               reduce using rule 64 (expr7 -> expr7 ^ expr8 .)


state 157

    (77) group -> ( expr ) .
    DEC             reduce using rule 77 (group -> ( expr ) .)
    INC             reduce using rule 77 (group -> ( expr ) .)
    ^               reduce using rule 77 (group -> ( expr ) .)
    %               reduce using rule 77 (group -> ( expr ) .)
    /               reduce using rule 77 (group -> ( expr ) .)
    *               reduce using rule 77 (group -> ( expr ) .)
    -               reduce using rule 77 (group -> ( expr ) .)
    +               reduce using rule 77 (group -> ( expr ) .)
    GE              reduce using rule 77 (group -> ( expr ) .)
    GT              reduce using rule 77 (group -> ( expr ) .)
    LE              reduce using rule 77 (group -> ( expr ) .)
    LT              reduce using rule 77 (group -> ( expr ) .)
    NEQ             reduce using rule 77 (group -> ( expr ) .)
    EQ              reduce using rule 77 (group -> ( expr ) .)
    LAND            reduce using rule 77 (group -> ( expr ) .)
    LOR             reduce using rule 77 (group -> ( expr ) .)
    ;               reduce using rule 77 (group -> ( expr ) .)
    ]               reduce using rule 77 (group -> ( expr ) .)
    ,               reduce using rule 77 (group -> ( expr ) .)
    }               reduce using rule 77 (group -> ( expr ) .)
    )               reduce using rule 77 (group -> ( expr ) .)


state 158

    (96) type_func -> FUNCTION type_array_sized ( opt_param_list ) .
    ;               reduce using rule 96 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)
    =               reduce using rule 96 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)


state 159

    (101) param_list -> param_list , . param
    (102) param -> . ID : type_array_sized
    (103) param -> . ID : type_array
    (104) param -> . ID : type_simple
    ID              shift and go to state 121

    param                          shift and go to state 174

state 160

    (102) param -> ID : . type_array_sized
    (103) param -> ID : . type_array
    (104) param -> ID : . type_simple
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (92) type_array -> . ARRAY [ ] type_array
    (93) type_array -> . ARRAY [ ] type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 178
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array_sized               shift and go to state 175
    type_array                     shift and go to state 176
    type_simple                    shift and go to state 177

state 161

    (97) type_func -> FUNCTION type_simple ( opt_param_list ) .
    ;               reduce using rule 97 (type_func -> FUNCTION type_simple ( opt_param_list ) .)
    =               reduce using rule 97 (type_func -> FUNCTION type_simple ( opt_param_list ) .)


state 162

    (26) block_stmt -> { stmt_list } .
    DO              reduce using rule 26 (block_stmt -> { stmt_list } .)
    ID              reduce using rule 26 (block_stmt -> { stmt_list } .)
    {               reduce using rule 26 (block_stmt -> { stmt_list } .)
    RETURN          reduce using rule 26 (block_stmt -> { stmt_list } .)
    WHILE           reduce using rule 26 (block_stmt -> { stmt_list } .)
    FOR             reduce using rule 26 (block_stmt -> { stmt_list } .)
    IF              reduce using rule 26 (block_stmt -> { stmt_list } .)
    !               reduce using rule 26 (block_stmt -> { stmt_list } .)
    -               reduce using rule 26 (block_stmt -> { stmt_list } .)
    DEC             reduce using rule 26 (block_stmt -> { stmt_list } .)
    INC             reduce using rule 26 (block_stmt -> { stmt_list } .)
    PRINT           reduce using rule 26 (block_stmt -> { stmt_list } .)
    (               reduce using rule 26 (block_stmt -> { stmt_list } .)
    FALSE           reduce using rule 26 (block_stmt -> { stmt_list } .)
    TRUE            reduce using rule 26 (block_stmt -> { stmt_list } .)
    STRING_LIT      reduce using rule 26 (block_stmt -> { stmt_list } .)
    CHAR_LIT        reduce using rule 26 (block_stmt -> { stmt_list } .)
    FLOAT_LIT       reduce using rule 26 (block_stmt -> { stmt_list } .)
    INT_LIT         reduce using rule 26 (block_stmt -> { stmt_list } .)
    }               reduce using rule 26 (block_stmt -> { stmt_list } .)


state 163

    (33) do_while_stmt -> DO stmt while_header . ;
    ;               shift and go to state 179


state 164

    (32) while_stmt -> while_header { stmt_list . }
    (14) stmt_list -> stmt_list . stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               shift and go to state 180
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    while_header                   shift and go to state 79
    stmt                           shift and go to state 126
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    for_header                     shift and go to state 80
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 165

    (30) for_stmt -> for_header { stmt_list . }
    (14) stmt_list -> stmt_list . stmt
    (15) stmt -> . closed_stmt
    (16) closed_stmt -> . simple_stmt
    (17) simple_stmt -> . expr ;
    (18) simple_stmt -> . do_while_stmt
    (19) simple_stmt -> . while_stmt
    (20) simple_stmt -> . for_stmt
    (21) simple_stmt -> . if_stmt
    (22) simple_stmt -> . decl
    (23) simple_stmt -> . block_stmt
    (24) simple_stmt -> . return_stmt
    (40) expr -> . expr1
    (33) do_while_stmt -> . DO stmt while_header ;
    (32) while_stmt -> . while_header { stmt_list }
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . if_header { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (26) block_stmt -> . { stmt_list }
    (25) return_stmt -> . RETURN opt_expr ;
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (31) while_header -> . WHILE ( opt_expr )
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (27) if_header -> . IF ( opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               shift and go to state 181
    DO              shift and go to state 78
    ID              shift and go to state 62
    {               shift and go to state 63
    RETURN          shift and go to state 82
    WHILE           shift and go to state 83
    FOR             shift and go to state 84
    IF              shift and go to state 85
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    for_header                     shift and go to state 80
    stmt                           shift and go to state 126
    closed_stmt                    shift and go to state 68
    simple_stmt                    shift and go to state 69
    expr                           shift and go to state 70
    do_while_stmt                  shift and go to state 71
    while_stmt                     shift and go to state 72
    for_stmt                       shift and go to state 73
    if_stmt                        shift and go to state 74
    decl                           shift and go to state 75
    block_stmt                     shift and go to state 76
    return_stmt                    shift and go to state 77
    expr1                          shift and go to state 33
    while_header                   shift and go to state 79
    if_header                      shift and go to state 81
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 166

    (28) if_stmt -> if_header { opt_stmt_list . }
    }               shift and go to state 182


state 167

    (25) return_stmt -> RETURN opt_expr ; .
    DO              reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    ID              reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    {               reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    RETURN          reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    WHILE           reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    FOR             reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    IF              reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    !               reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    -               reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    DEC             reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    INC             reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    PRINT           reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    (               reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    FALSE           reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    TRUE            reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    STRING_LIT      reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    CHAR_LIT        reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    FLOAT_LIT       reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    INT_LIT         reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)
    }               reduce using rule 25 (return_stmt -> RETURN opt_expr ; .)


state 168

    (31) while_header -> WHILE ( opt_expr . )
    )               shift and go to state 183


state 169

    (29) for_header -> FOR ( opt_expr . ; opt_expr ; opt_expr )
    ;               shift and go to state 184


state 170

    (27) if_header -> IF ( opt_expr . )
    )               shift and go to state 185


state 171

    (9) decl_init -> ID : type_array_sized = { opt_expr_list } ; .
    ID              reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    $end            reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    DO              reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    {               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    RETURN          reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    WHILE           reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FOR             reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    IF              reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    !               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    -               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    DEC             reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    INC             reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    PRINT           reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    (               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FALSE           reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    TRUE            reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    STRING_LIT      reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    CHAR_LIT        reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FLOAT_LIT       reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    INT_LIT         reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    }               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)


state 172

    (37) expr_list -> expr , expr_list .
    }               reduce using rule 37 (expr_list -> expr , expr_list .)
    )               reduce using rule 37 (expr_list -> expr , expr_list .)


state 173

    (76) group -> ID ( opt_expr_list ) .
    DEC             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    INC             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ^               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    %               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    /               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    *               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    -               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    +               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    GE              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    GT              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LE              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LT              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    NEQ             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    EQ              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LAND            reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LOR             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ;               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ]               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ,               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    }               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    )               reduce using rule 76 (group -> ID ( opt_expr_list ) .)


state 174

    (101) param_list -> param_list , param .
    ,               reduce using rule 101 (param_list -> param_list , param .)
    )               reduce using rule 101 (param_list -> param_list , param .)


state 175

    (102) param -> ID : type_array_sized .
    ,               reduce using rule 102 (param -> ID : type_array_sized .)
    )               reduce using rule 102 (param -> ID : type_array_sized .)


state 176

    (103) param -> ID : type_array .
    ,               reduce using rule 103 (param -> ID : type_array .)
    )               reduce using rule 103 (param -> ID : type_array .)


state 177

    (104) param -> ID : type_simple .
    ,               reduce using rule 104 (param -> ID : type_simple .)
    )               reduce using rule 104 (param -> ID : type_simple .)


state 178

    (94) type_array_sized -> ARRAY . index type_array_sized
    (95) type_array_sized -> ARRAY . index type_simple
    (92) type_array -> ARRAY . [ ] type_array
    (93) type_array -> ARRAY . [ ] type_simple
    (78) index -> . [ expr ]
    [               shift and go to state 186

    index                          shift and go to state 27

state 179

    (33) do_while_stmt -> DO stmt while_header ; .
    DO              reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    ID              reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    {               reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    RETURN          reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    WHILE           reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    FOR             reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    IF              reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    !               reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    -               reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    DEC             reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    INC             reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    PRINT           reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    (               reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    FALSE           reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    TRUE            reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    STRING_LIT      reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    CHAR_LIT        reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    FLOAT_LIT       reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    INT_LIT         reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)
    }               reduce using rule 33 (do_while_stmt -> DO stmt while_header ; .)


state 180

    (32) while_stmt -> while_header { stmt_list } .
    DO              reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    ID              reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    {               reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    RETURN          reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    WHILE           reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    FOR             reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    IF              reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    !               reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    -               reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    DEC             reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    INC             reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    PRINT           reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    (               reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    FALSE           reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    TRUE            reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    STRING_LIT      reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    CHAR_LIT        reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    FLOAT_LIT       reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    INT_LIT         reduce using rule 32 (while_stmt -> while_header { stmt_list } .)
    }               reduce using rule 32 (while_stmt -> while_header { stmt_list } .)


state 181

    (30) for_stmt -> for_header { stmt_list } .
    DO              reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    ID              reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    {               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    RETURN          reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    WHILE           reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    FOR             reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    IF              reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    !               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    -               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    DEC             reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    INC             reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    PRINT           reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    (               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    FALSE           reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    TRUE            reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    STRING_LIT      reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    CHAR_LIT        reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    FLOAT_LIT       reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    INT_LIT         reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    }               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)


state 182

    (28) if_stmt -> if_header { opt_stmt_list } .
    DO              reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    ID              reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    {               reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    RETURN          reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    WHILE           reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    FOR             reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    IF              reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    !               reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    -               reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    DEC             reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    INC             reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    PRINT           reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    (               reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    FALSE           reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    TRUE            reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    STRING_LIT      reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    CHAR_LIT        reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    FLOAT_LIT       reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    INT_LIT         reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)
    }               reduce using rule 28 (if_stmt -> if_header { opt_stmt_list } .)


state 183

    (31) while_header -> WHILE ( opt_expr ) .
    {               reduce using rule 31 (while_header -> WHILE ( opt_expr ) .)
    ;               reduce using rule 31 (while_header -> WHILE ( opt_expr ) .)


state 184

    (29) for_header -> FOR ( opt_expr ; . opt_expr ; opt_expr )
    (38) opt_expr -> . expr
    (39) opt_expr -> . empty
    (40) expr -> . expr1
    (105) empty -> .
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ;               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr                       shift and go to state 187
    expr                           shift and go to state 133
    empty                          shift and go to state 134
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 185

    (27) if_header -> IF ( opt_expr ) .
    {               reduce using rule 27 (if_header -> IF ( opt_expr ) .)


state 186

    (92) type_array -> ARRAY [ . ] type_array
    (93) type_array -> ARRAY [ . ] type_simple
    (78) index -> [ . expr ]
    (40) expr -> . expr1
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ]               shift and go to state 188
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    expr                           shift and go to state 61
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 187

    (29) for_header -> FOR ( opt_expr ; opt_expr . ; opt_expr )
    ;               shift and go to state 189


state 188

    (92) type_array -> ARRAY [ ] . type_array
    (93) type_array -> ARRAY [ ] . type_simple
    (92) type_array -> . ARRAY [ ] type_array
    (93) type_array -> . ARRAY [ ] type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 190
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array                     shift and go to state 191
    type_simple                    shift and go to state 192

state 189

    (29) for_header -> FOR ( opt_expr ; opt_expr ; . opt_expr )
    (38) opt_expr -> . expr
    (39) opt_expr -> . empty
    (40) expr -> . expr1
    (105) empty -> .
    (41) expr1 -> . expr2
    (42) expr1 -> . lval = expr1
    (45) expr2 -> . expr3
    (46) expr2 -> . expr2 LOR expr3
    (43) lval -> . ID index
    (44) lval -> . ID
    (47) expr3 -> . expr4
    (48) expr3 -> . expr3 LAND expr4
    (49) expr4 -> . expr5
    (50) expr4 -> . expr4 GE expr5
    (51) expr4 -> . expr4 GT expr5
    (52) expr4 -> . expr4 LE expr5
    (53) expr4 -> . expr4 LT expr5
    (54) expr4 -> . expr4 NEQ expr5
    (55) expr4 -> . expr4 EQ expr5
    (56) expr5 -> . expr6
    (57) expr5 -> . expr5 - expr6
    (58) expr5 -> . expr5 + expr6
    (59) expr6 -> . expr7
    (60) expr6 -> . expr6 % expr7
    (61) expr6 -> . expr6 / expr7
    (62) expr6 -> . expr6 * expr7
    (63) expr7 -> . expr8
    (64) expr7 -> . expr7 ^ expr8
    (65) expr8 -> . expr9
    (66) expr8 -> . ! expr8
    (67) expr8 -> . - expr8
    (68) expr9 -> . DEC expr9
    (69) expr9 -> . INC expr9
    (70) expr9 -> . group
    (71) expr9 -> . expr9 DEC
    (72) expr9 -> . expr9 INC
    (73) group -> . factor
    (74) group -> . ID index
    (75) group -> . PRINT expr
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    PRINT           shift and go to state 49
    (               shift and go to state 50
    FALSE           shift and go to state 51
    TRUE            shift and go to state 52
    STRING_LIT      shift and go to state 53
    CHAR_LIT        shift and go to state 54
    FLOAT_LIT       shift and go to state 55
    INT_LIT         shift and go to state 56

    opt_expr                       shift and go to state 193
    expr                           shift and go to state 133
    empty                          shift and go to state 134
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 190

    (92) type_array -> ARRAY . [ ] type_array
    (93) type_array -> ARRAY . [ ] type_simple
    [               shift and go to state 194


state 191

    (92) type_array -> ARRAY [ ] type_array .
    ,               reduce using rule 92 (type_array -> ARRAY [ ] type_array .)
    )               reduce using rule 92 (type_array -> ARRAY [ ] type_array .)


state 192

    (93) type_array -> ARRAY [ ] type_simple .
    ,               reduce using rule 93 (type_array -> ARRAY [ ] type_simple .)
    )               reduce using rule 93 (type_array -> ARRAY [ ] type_simple .)


state 193

    (29) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr . )
    )               shift and go to state 195


state 194

    (92) type_array -> ARRAY [ . ] type_array
    (93) type_array -> ARRAY [ . ] type_simple
    ]               shift and go to state 188


state 195

    (29) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .
    {               reduce using rule 29 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)


Conflicts:

shift/reduce conflict for LOR in state 34 resolved as shift
shift/reduce conflict for LAND in state 36 resolved as shift
shift/reduce conflict for GE in state 37 resolved as shift
shift/reduce conflict for GT in state 37 resolved as shift
shift/reduce conflict for LE in state 37 resolved as shift
shift/reduce conflict for LT in state 37 resolved as shift
shift/reduce conflict for NEQ in state 37 resolved as shift
shift/reduce conflict for EQ in state 37 resolved as shift
shift/reduce conflict for - in state 38 resolved as shift
shift/reduce conflict for + in state 38 resolved as shift
shift/reduce conflict for % in state 39 resolved as shift
shift/reduce conflict for / in state 39 resolved as shift
shift/reduce conflict for * in state 39 resolved as shift
shift/reduce conflict for ^ in state 41 resolved as shift
shift/reduce conflict for DEC in state 43 resolved as shift
shift/reduce conflict for INC in state 43 resolved as shift
shift/reduce conflict for DEC in state 113 resolved as shift
shift/reduce conflict for INC in state 113 resolved as shift
shift/reduce conflict for DEC in state 114 resolved as shift
shift/reduce conflict for INC in state 114 resolved as shift
shift/reduce conflict for LAND in state 141 resolved as shift
shift/reduce conflict for GE in state 143 resolved as shift
shift/reduce conflict for GT in state 143 resolved as shift
shift/reduce conflict for LE in state 143 resolved as shift
shift/reduce conflict for LT in state 143 resolved as shift
shift/reduce conflict for NEQ in state 143 resolved as shift
shift/reduce conflict for EQ in state 143 resolved as shift
shift/reduce conflict for - in state 144 resolved as shift
shift/reduce conflict for + in state 144 resolved as shift
shift/reduce conflict for - in state 145 resolved as shift
shift/reduce conflict for + in state 145 resolved as shift
shift/reduce conflict for - in state 146 resolved as shift
shift/reduce conflict for + in state 146 resolved as shift
shift/reduce conflict for - in state 147 resolved as shift
shift/reduce conflict for + in state 147 resolved as shift
shift/reduce conflict for - in state 148 resolved as shift
shift/reduce conflict for + in state 148 resolved as shift
shift/reduce conflict for - in state 149 resolved as shift
shift/reduce conflict for + in state 149 resolved as shift
shift/reduce conflict for % in state 150 resolved as shift
shift/reduce conflict for / in state 150 resolved as shift
shift/reduce conflict for * in state 150 resolved as shift
shift/reduce conflict for % in state 151 resolved as shift
shift/reduce conflict for / in state 151 resolved as shift
shift/reduce conflict for * in state 151 resolved as shift
shift/reduce conflict for ^ in state 152 resolved as shift
shift/reduce conflict for ^ in state 153 resolved as shift
shift/reduce conflict for ^ in state 154 resolved as shift