Grammar:

Rule 0     S' -> prog
Rule 1     prog -> decl_list
Rule 2     decl_list -> empty
Rule 3     decl_list -> decl decl_list
Rule 4     decl -> decl_init
Rule 5     decl -> ID : type_func ;
Rule 6     decl -> ID : type_array_sized ;
Rule 7     decl -> ID : type_simple ;
Rule 8     decl_init -> ID : type_func = { opt_stmt_list }
Rule 9     decl_init -> ID : type_array_sized = { opt_expr_list } ;
Rule 10    decl_init -> ID : type_simple = expr ;
Rule 11    opt_stmt_list -> empty
Rule 12    opt_stmt_list -> stmt_list
Rule 13    stmt_list -> stmt
Rule 14    stmt_list -> stmt stmt_list
Rule 15    stmt -> closed_stmt
Rule 16    stmt -> open_stmt
Rule 17    closed_stmt -> simple_stmt
Rule 18    closed_stmt -> for_stmt_closed
Rule 19    closed_stmt -> if_stmt_closed
Rule 20    open_stmt -> for_stmt_open
Rule 21    open_stmt -> if_stmt_open
Rule 22    if_cond -> IF ( opt_expr )
Rule 23    if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt
Rule 24    if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open
Rule 25    if_stmt_open -> if_cond stmt
Rule 26    for_header -> FOR ( opt_expr ; opt_expr ; opt_expr )
Rule 27    for_stmt_open -> for_header open_stmt
Rule 28    for_stmt_closed -> for_header closed_stmt
Rule 29    simple_stmt -> expr ;
Rule 30    simple_stmt -> decl
Rule 31    simple_stmt -> block_stmt
Rule 32    simple_stmt -> return_stmt
Rule 33    simple_stmt -> print_stmt
Rule 34    print_stmt -> PRINT opt_expr_list ;
Rule 35    return_stmt -> RETURN opt_expr ;
Rule 36    block_stmt -> { stmt_list }
Rule 37    opt_expr_list -> expr_list
Rule 38    opt_expr_list -> empty
Rule 39    expr_list -> expr
Rule 40    expr_list -> expr , expr_list
Rule 41    opt_expr -> expr
Rule 42    opt_expr -> empty
Rule 43    expr -> expr1
Rule 44    expr1 -> expr2
Rule 45    expr1 -> lval = expr1
Rule 46    lval -> ID index
Rule 47    lval -> ID
Rule 48    expr2 -> expr3
Rule 49    expr2 -> expr2 LOR expr3
Rule 50    expr3 -> expr4
Rule 51    expr3 -> expr3 LAND expr4
Rule 52    expr4 -> expr5
Rule 53    expr4 -> expr4 GE expr5
Rule 54    expr4 -> expr4 GT expr5
Rule 55    expr4 -> expr4 LE expr5
Rule 56    expr4 -> expr4 LT expr5
Rule 57    expr4 -> expr4 NEQ expr5
Rule 58    expr4 -> expr4 EQ expr5
Rule 59    expr5 -> expr6
Rule 60    expr5 -> expr5 - expr6
Rule 61    expr5 -> expr5 + expr6
Rule 62    expr6 -> expr7
Rule 63    expr6 -> expr6 % expr7
Rule 64    expr6 -> expr6 / expr7
Rule 65    expr6 -> expr6 * expr7
Rule 66    expr7 -> expr8
Rule 67    expr7 -> expr7 ^ expr8
Rule 68    expr8 -> expr9
Rule 69    expr8 -> ! expr8
Rule 70    expr8 -> - expr8
Rule 71    expr9 -> group
Rule 72    expr9 -> expr9 DEC
Rule 73    expr9 -> expr9 INC
Rule 74    group -> factor
Rule 75    group -> ID index
Rule 76    group -> ID ( opt_expr_list )
Rule 77    group -> ( expr )
Rule 78    index -> [ expr ]
Rule 79    factor -> FALSE
Rule 80    factor -> TRUE
Rule 81    factor -> STRING_LIT
Rule 82    factor -> CHAR_LIT
Rule 83    factor -> FLOAT_LIT
Rule 84    factor -> INT_LIT
Rule 85    factor -> ID
Rule 86    type_simple -> VOID
Rule 87    type_simple -> STRING
Rule 88    type_simple -> CHAR
Rule 89    type_simple -> BOOLEAN
Rule 90    type_simple -> FLOAT
Rule 91    type_simple -> INTEGER
Rule 92    type_array -> ARRAY [ ] type_array
Rule 93    type_array -> ARRAY [ ] type_simple
Rule 94    type_array_sized -> ARRAY index type_array_sized
Rule 95    type_array_sized -> ARRAY index type_simple
Rule 96    type_func -> FUNCTION type_array_sized ( opt_param_list )
Rule 97    type_func -> FUNCTION type_simple ( opt_param_list )
Rule 98    opt_param_list -> param_list
Rule 99    opt_param_list -> empty
Rule 100   param_list -> param
Rule 101   param_list -> param_list , param
Rule 102   param -> ID : type_array_sized
Rule 103   param -> ID : type_array
Rule 104   param -> ID : type_simple
Rule 105   empty -> <empty>

Unused terminals:

    AUTO
    AND
    NOT
    WHILE
    OR

Terminals, with rules where they appear:

!                    : 69
%                    : 63
(                    : 22 26 76 77 96 97
)                    : 22 26 76 77 96 97
*                    : 65
+                    : 61
,                    : 40 101
-                    : 60 70
/                    : 64
:                    : 5 6 7 8 9 10 102 103 104
;                    : 5 6 7 9 10 26 26 29 34 35
=                    : 8 9 10 45
AND                  : 
ARRAY                : 92 93 94 95
AUTO                 : 
BOOLEAN              : 89
CHAR                 : 88
CHAR_LIT             : 82
DEC                  : 72
ELSE                 : 23 24
EQ                   : 58
FALSE                : 79
FLOAT                : 90
FLOAT_LIT            : 83
FOR                  : 26
FUNCTION             : 96 97
GE                   : 53
GT                   : 54
ID                   : 5 6 7 8 9 10 46 47 75 76 85 102 103 104
IF                   : 22
INC                  : 73
INTEGER              : 91
INT_LIT              : 84
LAND                 : 51
LE                   : 55
LOR                  : 49
LT                   : 56
NEQ                  : 57
NOT                  : 
OR                   : 
PRINT                : 34
RETURN               : 35
STRING               : 87
STRING_LIT           : 81
TRUE                 : 80
VOID                 : 86
WHILE                : 
[                    : 78 92 93
]                    : 78 92 93
^                    : 67
error                : 
{                    : 8 9 36
}                    : 8 9 36

Nonterminals, with rules where they appear:

block_stmt           : 31
closed_stmt          : 15 23 23 24 28
decl                 : 3 30
decl_init            : 4
decl_list            : 1 3
empty                : 2 11 38 42 99
expr                 : 10 29 39 40 41 77 78
expr1                : 43 45
expr2                : 44 49
expr3                : 48 49 51
expr4                : 50 51 53 54 55 56 57 58
expr5                : 52 53 54 55 56 57 58 60 61
expr6                : 59 60 61 63 64 65
expr7                : 62 63 64 65 67
expr8                : 66 67 69 70
expr9                : 68 72 73
expr_list            : 37 40
factor               : 74
for_header           : 27 28
for_stmt_closed      : 18
for_stmt_open        : 20
group                : 71
if_cond              : 23 24 25
if_stmt_closed       : 19
if_stmt_open         : 21 24
index                : 46 75 94 95
lval                 : 45
open_stmt            : 16 27
opt_expr             : 22 26 26 26 35
opt_expr_list        : 9 34 76
opt_param_list       : 96 97
opt_stmt_list        : 8
param                : 100 101
param_list           : 98 101
print_stmt           : 33
prog                 : 0
return_stmt          : 32
simple_stmt          : 17
stmt                 : 13 14 25
stmt_list            : 12 14 36
type_array           : 92 103
type_array_sized     : 6 9 94 96 102
type_func            : 5 8
type_simple          : 7 10 93 95 97 104


state 0

    (0) S' -> . prog
    (1) prog -> . decl_list
    (2) decl_list -> . empty
    (3) decl_list -> . decl decl_list
    (105) empty -> .
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    $end            reduce using rule 105 (empty -> .)
    ID              shift and go to state 6

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2
    empty                          shift and go to state 3
    decl                           shift and go to state 4
    decl_init                      shift and go to state 5

state 1

    (0) S' -> prog .


state 2

    (1) prog -> decl_list .
    $end            reduce using rule 1 (prog -> decl_list .)


state 3

    (2) decl_list -> empty .
    $end            reduce using rule 2 (decl_list -> empty .)


state 4

    (3) decl_list -> decl . decl_list
    (2) decl_list -> . empty
    (3) decl_list -> . decl decl_list
    (105) empty -> .
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    $end            reduce using rule 105 (empty -> .)
    ID              shift and go to state 6

    decl                           shift and go to state 4
    decl_list                      shift and go to state 7
    empty                          shift and go to state 3
    decl_init                      shift and go to state 5

state 5

    (4) decl -> decl_init .
    ID              reduce using rule 4 (decl -> decl_init .)
    $end            reduce using rule 4 (decl -> decl_init .)
    {               reduce using rule 4 (decl -> decl_init .)
    RETURN          reduce using rule 4 (decl -> decl_init .)
    PRINT           reduce using rule 4 (decl -> decl_init .)
    FOR             reduce using rule 4 (decl -> decl_init .)
    IF              reduce using rule 4 (decl -> decl_init .)
    !               reduce using rule 4 (decl -> decl_init .)
    -               reduce using rule 4 (decl -> decl_init .)
    (               reduce using rule 4 (decl -> decl_init .)
    FALSE           reduce using rule 4 (decl -> decl_init .)
    TRUE            reduce using rule 4 (decl -> decl_init .)
    STRING_LIT      reduce using rule 4 (decl -> decl_init .)
    CHAR_LIT        reduce using rule 4 (decl -> decl_init .)
    FLOAT_LIT       reduce using rule 4 (decl -> decl_init .)
    INT_LIT         reduce using rule 4 (decl -> decl_init .)
    }               reduce using rule 4 (decl -> decl_init .)
    ELSE            reduce using rule 4 (decl -> decl_init .)


state 6

    (5) decl -> ID . : type_func ;
    (6) decl -> ID . : type_array_sized ;
    (7) decl -> ID . : type_simple ;
    (8) decl_init -> ID . : type_func = { opt_stmt_list }
    (9) decl_init -> ID . : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID . : type_simple = expr ;
    :               shift and go to state 8


state 7

    (3) decl_list -> decl decl_list .
    $end            reduce using rule 3 (decl_list -> decl decl_list .)


state 8

    (5) decl -> ID : . type_func ;
    (6) decl -> ID : . type_array_sized ;
    (7) decl -> ID : . type_simple ;
    (8) decl_init -> ID : . type_func = { opt_stmt_list }
    (9) decl_init -> ID : . type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID : . type_simple = expr ;
    (96) type_func -> . FUNCTION type_array_sized ( opt_param_list )
    (97) type_func -> . FUNCTION type_simple ( opt_param_list )
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    FUNCTION        shift and go to state 12
    ARRAY           shift and go to state 13
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_func                      shift and go to state 9
    type_array_sized               shift and go to state 10
    type_simple                    shift and go to state 11

state 9

    (5) decl -> ID : type_func . ;
    (8) decl_init -> ID : type_func . = { opt_stmt_list }
    ;               shift and go to state 20
    =               shift and go to state 21


state 10

    (6) decl -> ID : type_array_sized . ;
    (9) decl_init -> ID : type_array_sized . = { opt_expr_list } ;
    ;               shift and go to state 22
    =               shift and go to state 23


state 11

    (7) decl -> ID : type_simple . ;
    (10) decl_init -> ID : type_simple . = expr ;
    ;               shift and go to state 24
    =               shift and go to state 25


state 12

    (96) type_func -> FUNCTION . type_array_sized ( opt_param_list )
    (97) type_func -> FUNCTION . type_simple ( opt_param_list )
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 13
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array_sized               shift and go to state 26
    type_simple                    shift and go to state 27

state 13

    (94) type_array_sized -> ARRAY . index type_array_sized
    (95) type_array_sized -> ARRAY . index type_simple
    (78) index -> . [ expr ]
    [               shift and go to state 29

    index                          shift and go to state 28

state 14

    (86) type_simple -> VOID .
    ;               reduce using rule 86 (type_simple -> VOID .)
    =               reduce using rule 86 (type_simple -> VOID .)
    (               reduce using rule 86 (type_simple -> VOID .)
    ,               reduce using rule 86 (type_simple -> VOID .)
    )               reduce using rule 86 (type_simple -> VOID .)


state 15

    (87) type_simple -> STRING .
    ;               reduce using rule 87 (type_simple -> STRING .)
    =               reduce using rule 87 (type_simple -> STRING .)
    (               reduce using rule 87 (type_simple -> STRING .)
    ,               reduce using rule 87 (type_simple -> STRING .)
    )               reduce using rule 87 (type_simple -> STRING .)


state 16

    (88) type_simple -> CHAR .
    ;               reduce using rule 88 (type_simple -> CHAR .)
    =               reduce using rule 88 (type_simple -> CHAR .)
    (               reduce using rule 88 (type_simple -> CHAR .)
    ,               reduce using rule 88 (type_simple -> CHAR .)
    )               reduce using rule 88 (type_simple -> CHAR .)


state 17

    (89) type_simple -> BOOLEAN .
    ;               reduce using rule 89 (type_simple -> BOOLEAN .)
    =               reduce using rule 89 (type_simple -> BOOLEAN .)
    (               reduce using rule 89 (type_simple -> BOOLEAN .)
    ,               reduce using rule 89 (type_simple -> BOOLEAN .)
    )               reduce using rule 89 (type_simple -> BOOLEAN .)


state 18

    (90) type_simple -> FLOAT .
    ;               reduce using rule 90 (type_simple -> FLOAT .)
    =               reduce using rule 90 (type_simple -> FLOAT .)
    (               reduce using rule 90 (type_simple -> FLOAT .)
    ,               reduce using rule 90 (type_simple -> FLOAT .)
    )               reduce using rule 90 (type_simple -> FLOAT .)


state 19

    (91) type_simple -> INTEGER .
    ;               reduce using rule 91 (type_simple -> INTEGER .)
    =               reduce using rule 91 (type_simple -> INTEGER .)
    (               reduce using rule 91 (type_simple -> INTEGER .)
    ,               reduce using rule 91 (type_simple -> INTEGER .)
    )               reduce using rule 91 (type_simple -> INTEGER .)


state 20

    (5) decl -> ID : type_func ; .
    ID              reduce using rule 5 (decl -> ID : type_func ; .)
    $end            reduce using rule 5 (decl -> ID : type_func ; .)
    {               reduce using rule 5 (decl -> ID : type_func ; .)
    RETURN          reduce using rule 5 (decl -> ID : type_func ; .)
    PRINT           reduce using rule 5 (decl -> ID : type_func ; .)
    FOR             reduce using rule 5 (decl -> ID : type_func ; .)
    IF              reduce using rule 5 (decl -> ID : type_func ; .)
    !               reduce using rule 5 (decl -> ID : type_func ; .)
    -               reduce using rule 5 (decl -> ID : type_func ; .)
    (               reduce using rule 5 (decl -> ID : type_func ; .)
    FALSE           reduce using rule 5 (decl -> ID : type_func ; .)
    TRUE            reduce using rule 5 (decl -> ID : type_func ; .)
    STRING_LIT      reduce using rule 5 (decl -> ID : type_func ; .)
    CHAR_LIT        reduce using rule 5 (decl -> ID : type_func ; .)
    FLOAT_LIT       reduce using rule 5 (decl -> ID : type_func ; .)
    INT_LIT         reduce using rule 5 (decl -> ID : type_func ; .)
    }               reduce using rule 5 (decl -> ID : type_func ; .)
    ELSE            reduce using rule 5 (decl -> ID : type_func ; .)


state 21

    (8) decl_init -> ID : type_func = . { opt_stmt_list }
    {               shift and go to state 30


state 22

    (6) decl -> ID : type_array_sized ; .
    ID              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    $end            reduce using rule 6 (decl -> ID : type_array_sized ; .)
    {               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    RETURN          reduce using rule 6 (decl -> ID : type_array_sized ; .)
    PRINT           reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FOR             reduce using rule 6 (decl -> ID : type_array_sized ; .)
    IF              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    !               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    -               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    (               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FALSE           reduce using rule 6 (decl -> ID : type_array_sized ; .)
    TRUE            reduce using rule 6 (decl -> ID : type_array_sized ; .)
    STRING_LIT      reduce using rule 6 (decl -> ID : type_array_sized ; .)
    CHAR_LIT        reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FLOAT_LIT       reduce using rule 6 (decl -> ID : type_array_sized ; .)
    INT_LIT         reduce using rule 6 (decl -> ID : type_array_sized ; .)
    }               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    ELSE            reduce using rule 6 (decl -> ID : type_array_sized ; .)


state 23

    (9) decl_init -> ID : type_array_sized = . { opt_expr_list } ;
    {               shift and go to state 31


state 24

    (7) decl -> ID : type_simple ; .
    ID              reduce using rule 7 (decl -> ID : type_simple ; .)
    $end            reduce using rule 7 (decl -> ID : type_simple ; .)
    {               reduce using rule 7 (decl -> ID : type_simple ; .)
    RETURN          reduce using rule 7 (decl -> ID : type_simple ; .)
    PRINT           reduce using rule 7 (decl -> ID : type_simple ; .)
    FOR             reduce using rule 7 (decl -> ID : type_simple ; .)
    IF              reduce using rule 7 (decl -> ID : type_simple ; .)
    !               reduce using rule 7 (decl -> ID : type_simple ; .)
    -               reduce using rule 7 (decl -> ID : type_simple ; .)
    (               reduce using rule 7 (decl -> ID : type_simple ; .)
    FALSE           reduce using rule 7 (decl -> ID : type_simple ; .)
    TRUE            reduce using rule 7 (decl -> ID : type_simple ; .)
    STRING_LIT      reduce using rule 7 (decl -> ID : type_simple ; .)
    CHAR_LIT        reduce using rule 7 (decl -> ID : type_simple ; .)
    FLOAT_LIT       reduce using rule 7 (decl -> ID : type_simple ; .)
    INT_LIT         reduce using rule 7 (decl -> ID : type_simple ; .)
    }               reduce using rule 7 (decl -> ID : type_simple ; .)
    ELSE            reduce using rule 7 (decl -> ID : type_simple ; .)


state 25

    (10) decl_init -> ID : type_simple = . expr ;
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr                           shift and go to state 33
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 26

    (96) type_func -> FUNCTION type_array_sized . ( opt_param_list )
    (               shift and go to state 55


state 27

    (97) type_func -> FUNCTION type_simple . ( opt_param_list )
    (               shift and go to state 56


state 28

    (94) type_array_sized -> ARRAY index . type_array_sized
    (95) type_array_sized -> ARRAY index . type_simple
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 13
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array_sized               shift and go to state 57
    type_simple                    shift and go to state 58

state 29

    (78) index -> [ . expr ]
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr                           shift and go to state 59
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 30

    (8) decl_init -> ID : type_func = { . opt_stmt_list }
    (11) opt_stmt_list -> . empty
    (12) opt_stmt_list -> . stmt_list
    (105) empty -> .
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt stmt_list
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               reduce using rule 105 (empty -> .)
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_stmt_list                  shift and go to state 62
    empty                          shift and go to state 63
    stmt_list                      shift and go to state 64
    stmt                           shift and go to state 65
    closed_stmt                    shift and go to state 66
    open_stmt                      shift and go to state 67
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    for_stmt_open                  shift and go to state 71
    if_stmt_open                   shift and go to state 72
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 78
    if_cond                        shift and go to state 79
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 31

    (9) decl_init -> ID : type_array_sized = { . opt_expr_list } ;
    (37) opt_expr_list -> . expr_list
    (38) opt_expr_list -> . empty
    (39) expr_list -> . expr
    (40) expr_list -> . expr , expr_list
    (105) empty -> .
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr_list                  shift and go to state 84
    expr_list                      shift and go to state 85
    empty                          shift and go to state 86
    expr                           shift and go to state 87
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 32

    (46) lval -> ID . index
    (47) lval -> ID .
    (75) group -> ID . index
    (76) group -> ID . ( opt_expr_list )
    (85) factor -> ID .
    (78) index -> . [ expr ]
    =               reduce using rule 47 (lval -> ID .)
    (               shift and go to state 89
    DEC             reduce using rule 85 (factor -> ID .)
    INC             reduce using rule 85 (factor -> ID .)
    ^               reduce using rule 85 (factor -> ID .)
    %               reduce using rule 85 (factor -> ID .)
    /               reduce using rule 85 (factor -> ID .)
    *               reduce using rule 85 (factor -> ID .)
    -               reduce using rule 85 (factor -> ID .)
    +               reduce using rule 85 (factor -> ID .)
    GE              reduce using rule 85 (factor -> ID .)
    GT              reduce using rule 85 (factor -> ID .)
    LE              reduce using rule 85 (factor -> ID .)
    LT              reduce using rule 85 (factor -> ID .)
    NEQ             reduce using rule 85 (factor -> ID .)
    EQ              reduce using rule 85 (factor -> ID .)
    LAND            reduce using rule 85 (factor -> ID .)
    LOR             reduce using rule 85 (factor -> ID .)
    ;               reduce using rule 85 (factor -> ID .)
    ]               reduce using rule 85 (factor -> ID .)
    ,               reduce using rule 85 (factor -> ID .)
    }               reduce using rule 85 (factor -> ID .)
    )               reduce using rule 85 (factor -> ID .)
    [               shift and go to state 29

    index                          shift and go to state 88

state 33

    (10) decl_init -> ID : type_simple = expr . ;
    ;               shift and go to state 90


state 34

    (43) expr -> expr1 .
    ;               reduce using rule 43 (expr -> expr1 .)
    ]               reduce using rule 43 (expr -> expr1 .)
    ,               reduce using rule 43 (expr -> expr1 .)
    }               reduce using rule 43 (expr -> expr1 .)
    )               reduce using rule 43 (expr -> expr1 .)


state 35

    (44) expr1 -> expr2 .
    (49) expr2 -> expr2 . LOR expr3
    ;               reduce using rule 44 (expr1 -> expr2 .)
    ]               reduce using rule 44 (expr1 -> expr2 .)
    ,               reduce using rule 44 (expr1 -> expr2 .)
    }               reduce using rule 44 (expr1 -> expr2 .)
    )               reduce using rule 44 (expr1 -> expr2 .)
    LOR             shift and go to state 91


state 36

    (45) expr1 -> lval . = expr1
    =               shift and go to state 92


state 37

    (48) expr2 -> expr3 .
    (51) expr3 -> expr3 . LAND expr4
    LOR             reduce using rule 48 (expr2 -> expr3 .)
    ;               reduce using rule 48 (expr2 -> expr3 .)
    ]               reduce using rule 48 (expr2 -> expr3 .)
    ,               reduce using rule 48 (expr2 -> expr3 .)
    }               reduce using rule 48 (expr2 -> expr3 .)
    )               reduce using rule 48 (expr2 -> expr3 .)
    LAND            shift and go to state 93


state 38

    (50) expr3 -> expr4 .
    (53) expr4 -> expr4 . GE expr5
    (54) expr4 -> expr4 . GT expr5
    (55) expr4 -> expr4 . LE expr5
    (56) expr4 -> expr4 . LT expr5
    (57) expr4 -> expr4 . NEQ expr5
    (58) expr4 -> expr4 . EQ expr5
    LAND            reduce using rule 50 (expr3 -> expr4 .)
    LOR             reduce using rule 50 (expr3 -> expr4 .)
    ;               reduce using rule 50 (expr3 -> expr4 .)
    ]               reduce using rule 50 (expr3 -> expr4 .)
    ,               reduce using rule 50 (expr3 -> expr4 .)
    }               reduce using rule 50 (expr3 -> expr4 .)
    )               reduce using rule 50 (expr3 -> expr4 .)
    GE              shift and go to state 94
    GT              shift and go to state 95
    LE              shift and go to state 96
    LT              shift and go to state 97
    NEQ             shift and go to state 98
    EQ              shift and go to state 99


state 39

    (52) expr4 -> expr5 .
    (60) expr5 -> expr5 . - expr6
    (61) expr5 -> expr5 . + expr6
    GE              reduce using rule 52 (expr4 -> expr5 .)
    GT              reduce using rule 52 (expr4 -> expr5 .)
    LE              reduce using rule 52 (expr4 -> expr5 .)
    LT              reduce using rule 52 (expr4 -> expr5 .)
    NEQ             reduce using rule 52 (expr4 -> expr5 .)
    EQ              reduce using rule 52 (expr4 -> expr5 .)
    LAND            reduce using rule 52 (expr4 -> expr5 .)
    LOR             reduce using rule 52 (expr4 -> expr5 .)
    ;               reduce using rule 52 (expr4 -> expr5 .)
    ]               reduce using rule 52 (expr4 -> expr5 .)
    ,               reduce using rule 52 (expr4 -> expr5 .)
    }               reduce using rule 52 (expr4 -> expr5 .)
    )               reduce using rule 52 (expr4 -> expr5 .)
    -               shift and go to state 100
    +               shift and go to state 101


state 40

    (59) expr5 -> expr6 .
    (63) expr6 -> expr6 . % expr7
    (64) expr6 -> expr6 . / expr7
    (65) expr6 -> expr6 . * expr7
    -               reduce using rule 59 (expr5 -> expr6 .)
    +               reduce using rule 59 (expr5 -> expr6 .)
    GE              reduce using rule 59 (expr5 -> expr6 .)
    GT              reduce using rule 59 (expr5 -> expr6 .)
    LE              reduce using rule 59 (expr5 -> expr6 .)
    LT              reduce using rule 59 (expr5 -> expr6 .)
    NEQ             reduce using rule 59 (expr5 -> expr6 .)
    EQ              reduce using rule 59 (expr5 -> expr6 .)
    LAND            reduce using rule 59 (expr5 -> expr6 .)
    LOR             reduce using rule 59 (expr5 -> expr6 .)
    ;               reduce using rule 59 (expr5 -> expr6 .)
    ]               reduce using rule 59 (expr5 -> expr6 .)
    ,               reduce using rule 59 (expr5 -> expr6 .)
    }               reduce using rule 59 (expr5 -> expr6 .)
    )               reduce using rule 59 (expr5 -> expr6 .)
    %               shift and go to state 102
    /               shift and go to state 103
    *               shift and go to state 104


state 41

    (70) expr8 -> - . expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr8                          shift and go to state 105
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 42

    (62) expr6 -> expr7 .
    (67) expr7 -> expr7 . ^ expr8
    %               reduce using rule 62 (expr6 -> expr7 .)
    /               reduce using rule 62 (expr6 -> expr7 .)
    *               reduce using rule 62 (expr6 -> expr7 .)
    -               reduce using rule 62 (expr6 -> expr7 .)
    +               reduce using rule 62 (expr6 -> expr7 .)
    GE              reduce using rule 62 (expr6 -> expr7 .)
    GT              reduce using rule 62 (expr6 -> expr7 .)
    LE              reduce using rule 62 (expr6 -> expr7 .)
    LT              reduce using rule 62 (expr6 -> expr7 .)
    NEQ             reduce using rule 62 (expr6 -> expr7 .)
    EQ              reduce using rule 62 (expr6 -> expr7 .)
    LAND            reduce using rule 62 (expr6 -> expr7 .)
    LOR             reduce using rule 62 (expr6 -> expr7 .)
    ;               reduce using rule 62 (expr6 -> expr7 .)
    ]               reduce using rule 62 (expr6 -> expr7 .)
    ,               reduce using rule 62 (expr6 -> expr7 .)
    }               reduce using rule 62 (expr6 -> expr7 .)
    )               reduce using rule 62 (expr6 -> expr7 .)
    ^               shift and go to state 107


state 43

    (66) expr7 -> expr8 .
    ^               reduce using rule 66 (expr7 -> expr8 .)
    %               reduce using rule 66 (expr7 -> expr8 .)
    /               reduce using rule 66 (expr7 -> expr8 .)
    *               reduce using rule 66 (expr7 -> expr8 .)
    -               reduce using rule 66 (expr7 -> expr8 .)
    +               reduce using rule 66 (expr7 -> expr8 .)
    GE              reduce using rule 66 (expr7 -> expr8 .)
    GT              reduce using rule 66 (expr7 -> expr8 .)
    LE              reduce using rule 66 (expr7 -> expr8 .)
    LT              reduce using rule 66 (expr7 -> expr8 .)
    NEQ             reduce using rule 66 (expr7 -> expr8 .)
    EQ              reduce using rule 66 (expr7 -> expr8 .)
    LAND            reduce using rule 66 (expr7 -> expr8 .)
    LOR             reduce using rule 66 (expr7 -> expr8 .)
    ;               reduce using rule 66 (expr7 -> expr8 .)
    ]               reduce using rule 66 (expr7 -> expr8 .)
    ,               reduce using rule 66 (expr7 -> expr8 .)
    }               reduce using rule 66 (expr7 -> expr8 .)
    )               reduce using rule 66 (expr7 -> expr8 .)


state 44

    (68) expr8 -> expr9 .
    (72) expr9 -> expr9 . DEC
    (73) expr9 -> expr9 . INC
    ^               reduce using rule 68 (expr8 -> expr9 .)
    %               reduce using rule 68 (expr8 -> expr9 .)
    /               reduce using rule 68 (expr8 -> expr9 .)
    *               reduce using rule 68 (expr8 -> expr9 .)
    -               reduce using rule 68 (expr8 -> expr9 .)
    +               reduce using rule 68 (expr8 -> expr9 .)
    GE              reduce using rule 68 (expr8 -> expr9 .)
    GT              reduce using rule 68 (expr8 -> expr9 .)
    LE              reduce using rule 68 (expr8 -> expr9 .)
    LT              reduce using rule 68 (expr8 -> expr9 .)
    NEQ             reduce using rule 68 (expr8 -> expr9 .)
    EQ              reduce using rule 68 (expr8 -> expr9 .)
    LAND            reduce using rule 68 (expr8 -> expr9 .)
    LOR             reduce using rule 68 (expr8 -> expr9 .)
    ;               reduce using rule 68 (expr8 -> expr9 .)
    ]               reduce using rule 68 (expr8 -> expr9 .)
    ,               reduce using rule 68 (expr8 -> expr9 .)
    }               reduce using rule 68 (expr8 -> expr9 .)
    )               reduce using rule 68 (expr8 -> expr9 .)
    DEC             shift and go to state 108
    INC             shift and go to state 109


state 45

    (69) expr8 -> ! . expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr8                          shift and go to state 110
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 46

    (71) expr9 -> group .
    DEC             reduce using rule 71 (expr9 -> group .)
    INC             reduce using rule 71 (expr9 -> group .)
    ^               reduce using rule 71 (expr9 -> group .)
    %               reduce using rule 71 (expr9 -> group .)
    /               reduce using rule 71 (expr9 -> group .)
    *               reduce using rule 71 (expr9 -> group .)
    -               reduce using rule 71 (expr9 -> group .)
    +               reduce using rule 71 (expr9 -> group .)
    GE              reduce using rule 71 (expr9 -> group .)
    GT              reduce using rule 71 (expr9 -> group .)
    LE              reduce using rule 71 (expr9 -> group .)
    LT              reduce using rule 71 (expr9 -> group .)
    NEQ             reduce using rule 71 (expr9 -> group .)
    EQ              reduce using rule 71 (expr9 -> group .)
    LAND            reduce using rule 71 (expr9 -> group .)
    LOR             reduce using rule 71 (expr9 -> group .)
    ;               reduce using rule 71 (expr9 -> group .)
    ]               reduce using rule 71 (expr9 -> group .)
    ,               reduce using rule 71 (expr9 -> group .)
    }               reduce using rule 71 (expr9 -> group .)
    )               reduce using rule 71 (expr9 -> group .)


state 47

    (74) group -> factor .
    DEC             reduce using rule 74 (group -> factor .)
    INC             reduce using rule 74 (group -> factor .)
    ^               reduce using rule 74 (group -> factor .)
    %               reduce using rule 74 (group -> factor .)
    /               reduce using rule 74 (group -> factor .)
    *               reduce using rule 74 (group -> factor .)
    -               reduce using rule 74 (group -> factor .)
    +               reduce using rule 74 (group -> factor .)
    GE              reduce using rule 74 (group -> factor .)
    GT              reduce using rule 74 (group -> factor .)
    LE              reduce using rule 74 (group -> factor .)
    LT              reduce using rule 74 (group -> factor .)
    NEQ             reduce using rule 74 (group -> factor .)
    EQ              reduce using rule 74 (group -> factor .)
    LAND            reduce using rule 74 (group -> factor .)
    LOR             reduce using rule 74 (group -> factor .)
    ;               reduce using rule 74 (group -> factor .)
    ]               reduce using rule 74 (group -> factor .)
    ,               reduce using rule 74 (group -> factor .)
    }               reduce using rule 74 (group -> factor .)
    )               reduce using rule 74 (group -> factor .)


state 48

    (77) group -> ( . expr )
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr                           shift and go to state 111
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 49

    (79) factor -> FALSE .
    DEC             reduce using rule 79 (factor -> FALSE .)
    INC             reduce using rule 79 (factor -> FALSE .)
    ^               reduce using rule 79 (factor -> FALSE .)
    %               reduce using rule 79 (factor -> FALSE .)
    /               reduce using rule 79 (factor -> FALSE .)
    *               reduce using rule 79 (factor -> FALSE .)
    -               reduce using rule 79 (factor -> FALSE .)
    +               reduce using rule 79 (factor -> FALSE .)
    GE              reduce using rule 79 (factor -> FALSE .)
    GT              reduce using rule 79 (factor -> FALSE .)
    LE              reduce using rule 79 (factor -> FALSE .)
    LT              reduce using rule 79 (factor -> FALSE .)
    NEQ             reduce using rule 79 (factor -> FALSE .)
    EQ              reduce using rule 79 (factor -> FALSE .)
    LAND            reduce using rule 79 (factor -> FALSE .)
    LOR             reduce using rule 79 (factor -> FALSE .)
    ;               reduce using rule 79 (factor -> FALSE .)
    ]               reduce using rule 79 (factor -> FALSE .)
    ,               reduce using rule 79 (factor -> FALSE .)
    }               reduce using rule 79 (factor -> FALSE .)
    )               reduce using rule 79 (factor -> FALSE .)


state 50

    (80) factor -> TRUE .
    DEC             reduce using rule 80 (factor -> TRUE .)
    INC             reduce using rule 80 (factor -> TRUE .)
    ^               reduce using rule 80 (factor -> TRUE .)
    %               reduce using rule 80 (factor -> TRUE .)
    /               reduce using rule 80 (factor -> TRUE .)
    *               reduce using rule 80 (factor -> TRUE .)
    -               reduce using rule 80 (factor -> TRUE .)
    +               reduce using rule 80 (factor -> TRUE .)
    GE              reduce using rule 80 (factor -> TRUE .)
    GT              reduce using rule 80 (factor -> TRUE .)
    LE              reduce using rule 80 (factor -> TRUE .)
    LT              reduce using rule 80 (factor -> TRUE .)
    NEQ             reduce using rule 80 (factor -> TRUE .)
    EQ              reduce using rule 80 (factor -> TRUE .)
    LAND            reduce using rule 80 (factor -> TRUE .)
    LOR             reduce using rule 80 (factor -> TRUE .)
    ;               reduce using rule 80 (factor -> TRUE .)
    ]               reduce using rule 80 (factor -> TRUE .)
    ,               reduce using rule 80 (factor -> TRUE .)
    }               reduce using rule 80 (factor -> TRUE .)
    )               reduce using rule 80 (factor -> TRUE .)


state 51

    (81) factor -> STRING_LIT .
    DEC             reduce using rule 81 (factor -> STRING_LIT .)
    INC             reduce using rule 81 (factor -> STRING_LIT .)
    ^               reduce using rule 81 (factor -> STRING_LIT .)
    %               reduce using rule 81 (factor -> STRING_LIT .)
    /               reduce using rule 81 (factor -> STRING_LIT .)
    *               reduce using rule 81 (factor -> STRING_LIT .)
    -               reduce using rule 81 (factor -> STRING_LIT .)
    +               reduce using rule 81 (factor -> STRING_LIT .)
    GE              reduce using rule 81 (factor -> STRING_LIT .)
    GT              reduce using rule 81 (factor -> STRING_LIT .)
    LE              reduce using rule 81 (factor -> STRING_LIT .)
    LT              reduce using rule 81 (factor -> STRING_LIT .)
    NEQ             reduce using rule 81 (factor -> STRING_LIT .)
    EQ              reduce using rule 81 (factor -> STRING_LIT .)
    LAND            reduce using rule 81 (factor -> STRING_LIT .)
    LOR             reduce using rule 81 (factor -> STRING_LIT .)
    ;               reduce using rule 81 (factor -> STRING_LIT .)
    ]               reduce using rule 81 (factor -> STRING_LIT .)
    ,               reduce using rule 81 (factor -> STRING_LIT .)
    }               reduce using rule 81 (factor -> STRING_LIT .)
    )               reduce using rule 81 (factor -> STRING_LIT .)


state 52

    (82) factor -> CHAR_LIT .
    DEC             reduce using rule 82 (factor -> CHAR_LIT .)
    INC             reduce using rule 82 (factor -> CHAR_LIT .)
    ^               reduce using rule 82 (factor -> CHAR_LIT .)
    %               reduce using rule 82 (factor -> CHAR_LIT .)
    /               reduce using rule 82 (factor -> CHAR_LIT .)
    *               reduce using rule 82 (factor -> CHAR_LIT .)
    -               reduce using rule 82 (factor -> CHAR_LIT .)
    +               reduce using rule 82 (factor -> CHAR_LIT .)
    GE              reduce using rule 82 (factor -> CHAR_LIT .)
    GT              reduce using rule 82 (factor -> CHAR_LIT .)
    LE              reduce using rule 82 (factor -> CHAR_LIT .)
    LT              reduce using rule 82 (factor -> CHAR_LIT .)
    NEQ             reduce using rule 82 (factor -> CHAR_LIT .)
    EQ              reduce using rule 82 (factor -> CHAR_LIT .)
    LAND            reduce using rule 82 (factor -> CHAR_LIT .)
    LOR             reduce using rule 82 (factor -> CHAR_LIT .)
    ;               reduce using rule 82 (factor -> CHAR_LIT .)
    ]               reduce using rule 82 (factor -> CHAR_LIT .)
    ,               reduce using rule 82 (factor -> CHAR_LIT .)
    }               reduce using rule 82 (factor -> CHAR_LIT .)
    )               reduce using rule 82 (factor -> CHAR_LIT .)


state 53

    (83) factor -> FLOAT_LIT .
    DEC             reduce using rule 83 (factor -> FLOAT_LIT .)
    INC             reduce using rule 83 (factor -> FLOAT_LIT .)
    ^               reduce using rule 83 (factor -> FLOAT_LIT .)
    %               reduce using rule 83 (factor -> FLOAT_LIT .)
    /               reduce using rule 83 (factor -> FLOAT_LIT .)
    *               reduce using rule 83 (factor -> FLOAT_LIT .)
    -               reduce using rule 83 (factor -> FLOAT_LIT .)
    +               reduce using rule 83 (factor -> FLOAT_LIT .)
    GE              reduce using rule 83 (factor -> FLOAT_LIT .)
    GT              reduce using rule 83 (factor -> FLOAT_LIT .)
    LE              reduce using rule 83 (factor -> FLOAT_LIT .)
    LT              reduce using rule 83 (factor -> FLOAT_LIT .)
    NEQ             reduce using rule 83 (factor -> FLOAT_LIT .)
    EQ              reduce using rule 83 (factor -> FLOAT_LIT .)
    LAND            reduce using rule 83 (factor -> FLOAT_LIT .)
    LOR             reduce using rule 83 (factor -> FLOAT_LIT .)
    ;               reduce using rule 83 (factor -> FLOAT_LIT .)
    ]               reduce using rule 83 (factor -> FLOAT_LIT .)
    ,               reduce using rule 83 (factor -> FLOAT_LIT .)
    }               reduce using rule 83 (factor -> FLOAT_LIT .)
    )               reduce using rule 83 (factor -> FLOAT_LIT .)


state 54

    (84) factor -> INT_LIT .
    DEC             reduce using rule 84 (factor -> INT_LIT .)
    INC             reduce using rule 84 (factor -> INT_LIT .)
    ^               reduce using rule 84 (factor -> INT_LIT .)
    %               reduce using rule 84 (factor -> INT_LIT .)
    /               reduce using rule 84 (factor -> INT_LIT .)
    *               reduce using rule 84 (factor -> INT_LIT .)
    -               reduce using rule 84 (factor -> INT_LIT .)
    +               reduce using rule 84 (factor -> INT_LIT .)
    GE              reduce using rule 84 (factor -> INT_LIT .)
    GT              reduce using rule 84 (factor -> INT_LIT .)
    LE              reduce using rule 84 (factor -> INT_LIT .)
    LT              reduce using rule 84 (factor -> INT_LIT .)
    NEQ             reduce using rule 84 (factor -> INT_LIT .)
    EQ              reduce using rule 84 (factor -> INT_LIT .)
    LAND            reduce using rule 84 (factor -> INT_LIT .)
    LOR             reduce using rule 84 (factor -> INT_LIT .)
    ;               reduce using rule 84 (factor -> INT_LIT .)
    ]               reduce using rule 84 (factor -> INT_LIT .)
    ,               reduce using rule 84 (factor -> INT_LIT .)
    }               reduce using rule 84 (factor -> INT_LIT .)
    )               reduce using rule 84 (factor -> INT_LIT .)


state 55

    (96) type_func -> FUNCTION type_array_sized ( . opt_param_list )
    (98) opt_param_list -> . param_list
    (99) opt_param_list -> . empty
    (100) param_list -> . param
    (101) param_list -> . param_list , param
    (105) empty -> .
    (102) param -> . ID : type_array_sized
    (103) param -> . ID : type_array
    (104) param -> . ID : type_simple
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 116

    opt_param_list                 shift and go to state 112
    param_list                     shift and go to state 113
    empty                          shift and go to state 114
    param                          shift and go to state 115

state 56

    (97) type_func -> FUNCTION type_simple ( . opt_param_list )
    (98) opt_param_list -> . param_list
    (99) opt_param_list -> . empty
    (100) param_list -> . param
    (101) param_list -> . param_list , param
    (105) empty -> .
    (102) param -> . ID : type_array_sized
    (103) param -> . ID : type_array
    (104) param -> . ID : type_simple
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 116

    opt_param_list                 shift and go to state 117
    param_list                     shift and go to state 113
    empty                          shift and go to state 114
    param                          shift and go to state 115

state 57

    (94) type_array_sized -> ARRAY index type_array_sized .
    ;               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    =               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    (               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    ,               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)
    )               reduce using rule 94 (type_array_sized -> ARRAY index type_array_sized .)


state 58

    (95) type_array_sized -> ARRAY index type_simple .
    ;               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    =               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    (               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    ,               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)
    )               reduce using rule 95 (type_array_sized -> ARRAY index type_simple .)


state 59

    (78) index -> [ expr . ]
    ]               shift and go to state 118


state 60

    (5) decl -> ID . : type_func ;
    (6) decl -> ID . : type_array_sized ;
    (7) decl -> ID . : type_simple ;
    (8) decl_init -> ID . : type_func = { opt_stmt_list }
    (9) decl_init -> ID . : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID . : type_simple = expr ;
    (46) lval -> ID . index
    (47) lval -> ID .
    (75) group -> ID . index
    (76) group -> ID . ( opt_expr_list )
    (85) factor -> ID .
    (78) index -> . [ expr ]
    :               shift and go to state 8
    =               reduce using rule 47 (lval -> ID .)
    (               shift and go to state 89
    DEC             reduce using rule 85 (factor -> ID .)
    INC             reduce using rule 85 (factor -> ID .)
    ^               reduce using rule 85 (factor -> ID .)
    %               reduce using rule 85 (factor -> ID .)
    /               reduce using rule 85 (factor -> ID .)
    *               reduce using rule 85 (factor -> ID .)
    -               reduce using rule 85 (factor -> ID .)
    +               reduce using rule 85 (factor -> ID .)
    GE              reduce using rule 85 (factor -> ID .)
    GT              reduce using rule 85 (factor -> ID .)
    LE              reduce using rule 85 (factor -> ID .)
    LT              reduce using rule 85 (factor -> ID .)
    NEQ             reduce using rule 85 (factor -> ID .)
    EQ              reduce using rule 85 (factor -> ID .)
    LAND            reduce using rule 85 (factor -> ID .)
    LOR             reduce using rule 85 (factor -> ID .)
    ;               reduce using rule 85 (factor -> ID .)
    [               shift and go to state 29

    index                          shift and go to state 88

state 61

    (36) block_stmt -> { . stmt_list }
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt stmt_list
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    stmt_list                      shift and go to state 119
    stmt                           shift and go to state 65
    closed_stmt                    shift and go to state 66
    open_stmt                      shift and go to state 67
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    for_stmt_open                  shift and go to state 71
    if_stmt_open                   shift and go to state 72
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 78
    if_cond                        shift and go to state 79
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 62

    (8) decl_init -> ID : type_func = { opt_stmt_list . }
    }               shift and go to state 120


state 63

    (11) opt_stmt_list -> empty .
    }               reduce using rule 11 (opt_stmt_list -> empty .)


state 64

    (12) opt_stmt_list -> stmt_list .
    }               reduce using rule 12 (opt_stmt_list -> stmt_list .)


state 65

    (13) stmt_list -> stmt .
    (14) stmt_list -> stmt . stmt_list
    (13) stmt_list -> . stmt
    (14) stmt_list -> . stmt stmt_list
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    }               reduce using rule 13 (stmt_list -> stmt .)
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    stmt                           shift and go to state 65
    stmt_list                      shift and go to state 121
    closed_stmt                    shift and go to state 66
    open_stmt                      shift and go to state 67
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    for_stmt_open                  shift and go to state 71
    if_stmt_open                   shift and go to state 72
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 78
    if_cond                        shift and go to state 79
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 66

    (15) stmt -> closed_stmt .
    ID              reduce using rule 15 (stmt -> closed_stmt .)
    {               reduce using rule 15 (stmt -> closed_stmt .)
    RETURN          reduce using rule 15 (stmt -> closed_stmt .)
    PRINT           reduce using rule 15 (stmt -> closed_stmt .)
    FOR             reduce using rule 15 (stmt -> closed_stmt .)
    IF              reduce using rule 15 (stmt -> closed_stmt .)
    !               reduce using rule 15 (stmt -> closed_stmt .)
    -               reduce using rule 15 (stmt -> closed_stmt .)
    (               reduce using rule 15 (stmt -> closed_stmt .)
    FALSE           reduce using rule 15 (stmt -> closed_stmt .)
    TRUE            reduce using rule 15 (stmt -> closed_stmt .)
    STRING_LIT      reduce using rule 15 (stmt -> closed_stmt .)
    CHAR_LIT        reduce using rule 15 (stmt -> closed_stmt .)
    FLOAT_LIT       reduce using rule 15 (stmt -> closed_stmt .)
    INT_LIT         reduce using rule 15 (stmt -> closed_stmt .)
    }               reduce using rule 15 (stmt -> closed_stmt .)


state 67

    (16) stmt -> open_stmt .
    ID              reduce using rule 16 (stmt -> open_stmt .)
    {               reduce using rule 16 (stmt -> open_stmt .)
    RETURN          reduce using rule 16 (stmt -> open_stmt .)
    PRINT           reduce using rule 16 (stmt -> open_stmt .)
    FOR             reduce using rule 16 (stmt -> open_stmt .)
    IF              reduce using rule 16 (stmt -> open_stmt .)
    !               reduce using rule 16 (stmt -> open_stmt .)
    -               reduce using rule 16 (stmt -> open_stmt .)
    (               reduce using rule 16 (stmt -> open_stmt .)
    FALSE           reduce using rule 16 (stmt -> open_stmt .)
    TRUE            reduce using rule 16 (stmt -> open_stmt .)
    STRING_LIT      reduce using rule 16 (stmt -> open_stmt .)
    CHAR_LIT        reduce using rule 16 (stmt -> open_stmt .)
    FLOAT_LIT       reduce using rule 16 (stmt -> open_stmt .)
    INT_LIT         reduce using rule 16 (stmt -> open_stmt .)
    }               reduce using rule 16 (stmt -> open_stmt .)


state 68

    (17) closed_stmt -> simple_stmt .
    ID              reduce using rule 17 (closed_stmt -> simple_stmt .)
    {               reduce using rule 17 (closed_stmt -> simple_stmt .)
    RETURN          reduce using rule 17 (closed_stmt -> simple_stmt .)
    PRINT           reduce using rule 17 (closed_stmt -> simple_stmt .)
    FOR             reduce using rule 17 (closed_stmt -> simple_stmt .)
    IF              reduce using rule 17 (closed_stmt -> simple_stmt .)
    !               reduce using rule 17 (closed_stmt -> simple_stmt .)
    -               reduce using rule 17 (closed_stmt -> simple_stmt .)
    (               reduce using rule 17 (closed_stmt -> simple_stmt .)
    FALSE           reduce using rule 17 (closed_stmt -> simple_stmt .)
    TRUE            reduce using rule 17 (closed_stmt -> simple_stmt .)
    STRING_LIT      reduce using rule 17 (closed_stmt -> simple_stmt .)
    CHAR_LIT        reduce using rule 17 (closed_stmt -> simple_stmt .)
    FLOAT_LIT       reduce using rule 17 (closed_stmt -> simple_stmt .)
    INT_LIT         reduce using rule 17 (closed_stmt -> simple_stmt .)
    }               reduce using rule 17 (closed_stmt -> simple_stmt .)
    ELSE            reduce using rule 17 (closed_stmt -> simple_stmt .)


state 69

    (18) closed_stmt -> for_stmt_closed .
    ID              reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    {               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    RETURN          reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    PRINT           reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    FOR             reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    IF              reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    !               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    -               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    (               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    FALSE           reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    TRUE            reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    STRING_LIT      reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    CHAR_LIT        reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    FLOAT_LIT       reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    INT_LIT         reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    }               reduce using rule 18 (closed_stmt -> for_stmt_closed .)
    ELSE            reduce using rule 18 (closed_stmt -> for_stmt_closed .)


state 70

    (19) closed_stmt -> if_stmt_closed .
    ID              reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    {               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    RETURN          reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    PRINT           reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    FOR             reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    IF              reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    !               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    -               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    (               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    FALSE           reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    TRUE            reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    STRING_LIT      reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    CHAR_LIT        reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    FLOAT_LIT       reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    INT_LIT         reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    }               reduce using rule 19 (closed_stmt -> if_stmt_closed .)
    ELSE            reduce using rule 19 (closed_stmt -> if_stmt_closed .)


state 71

    (20) open_stmt -> for_stmt_open .
    ID              reduce using rule 20 (open_stmt -> for_stmt_open .)
    {               reduce using rule 20 (open_stmt -> for_stmt_open .)
    RETURN          reduce using rule 20 (open_stmt -> for_stmt_open .)
    PRINT           reduce using rule 20 (open_stmt -> for_stmt_open .)
    FOR             reduce using rule 20 (open_stmt -> for_stmt_open .)
    IF              reduce using rule 20 (open_stmt -> for_stmt_open .)
    !               reduce using rule 20 (open_stmt -> for_stmt_open .)
    -               reduce using rule 20 (open_stmt -> for_stmt_open .)
    (               reduce using rule 20 (open_stmt -> for_stmt_open .)
    FALSE           reduce using rule 20 (open_stmt -> for_stmt_open .)
    TRUE            reduce using rule 20 (open_stmt -> for_stmt_open .)
    STRING_LIT      reduce using rule 20 (open_stmt -> for_stmt_open .)
    CHAR_LIT        reduce using rule 20 (open_stmt -> for_stmt_open .)
    FLOAT_LIT       reduce using rule 20 (open_stmt -> for_stmt_open .)
    INT_LIT         reduce using rule 20 (open_stmt -> for_stmt_open .)
    }               reduce using rule 20 (open_stmt -> for_stmt_open .)


state 72

    (21) open_stmt -> if_stmt_open .
    ID              reduce using rule 21 (open_stmt -> if_stmt_open .)
    {               reduce using rule 21 (open_stmt -> if_stmt_open .)
    RETURN          reduce using rule 21 (open_stmt -> if_stmt_open .)
    PRINT           reduce using rule 21 (open_stmt -> if_stmt_open .)
    FOR             reduce using rule 21 (open_stmt -> if_stmt_open .)
    IF              reduce using rule 21 (open_stmt -> if_stmt_open .)
    !               reduce using rule 21 (open_stmt -> if_stmt_open .)
    -               reduce using rule 21 (open_stmt -> if_stmt_open .)
    (               reduce using rule 21 (open_stmt -> if_stmt_open .)
    FALSE           reduce using rule 21 (open_stmt -> if_stmt_open .)
    TRUE            reduce using rule 21 (open_stmt -> if_stmt_open .)
    STRING_LIT      reduce using rule 21 (open_stmt -> if_stmt_open .)
    CHAR_LIT        reduce using rule 21 (open_stmt -> if_stmt_open .)
    FLOAT_LIT       reduce using rule 21 (open_stmt -> if_stmt_open .)
    INT_LIT         reduce using rule 21 (open_stmt -> if_stmt_open .)
    }               reduce using rule 21 (open_stmt -> if_stmt_open .)


state 73

    (29) simple_stmt -> expr . ;
    ;               shift and go to state 122


state 74

    (30) simple_stmt -> decl .
    ID              reduce using rule 30 (simple_stmt -> decl .)
    {               reduce using rule 30 (simple_stmt -> decl .)
    RETURN          reduce using rule 30 (simple_stmt -> decl .)
    PRINT           reduce using rule 30 (simple_stmt -> decl .)
    FOR             reduce using rule 30 (simple_stmt -> decl .)
    IF              reduce using rule 30 (simple_stmt -> decl .)
    !               reduce using rule 30 (simple_stmt -> decl .)
    -               reduce using rule 30 (simple_stmt -> decl .)
    (               reduce using rule 30 (simple_stmt -> decl .)
    FALSE           reduce using rule 30 (simple_stmt -> decl .)
    TRUE            reduce using rule 30 (simple_stmt -> decl .)
    STRING_LIT      reduce using rule 30 (simple_stmt -> decl .)
    CHAR_LIT        reduce using rule 30 (simple_stmt -> decl .)
    FLOAT_LIT       reduce using rule 30 (simple_stmt -> decl .)
    INT_LIT         reduce using rule 30 (simple_stmt -> decl .)
    }               reduce using rule 30 (simple_stmt -> decl .)
    ELSE            reduce using rule 30 (simple_stmt -> decl .)


state 75

    (31) simple_stmt -> block_stmt .
    ID              reduce using rule 31 (simple_stmt -> block_stmt .)
    {               reduce using rule 31 (simple_stmt -> block_stmt .)
    RETURN          reduce using rule 31 (simple_stmt -> block_stmt .)
    PRINT           reduce using rule 31 (simple_stmt -> block_stmt .)
    FOR             reduce using rule 31 (simple_stmt -> block_stmt .)
    IF              reduce using rule 31 (simple_stmt -> block_stmt .)
    !               reduce using rule 31 (simple_stmt -> block_stmt .)
    -               reduce using rule 31 (simple_stmt -> block_stmt .)
    (               reduce using rule 31 (simple_stmt -> block_stmt .)
    FALSE           reduce using rule 31 (simple_stmt -> block_stmt .)
    TRUE            reduce using rule 31 (simple_stmt -> block_stmt .)
    STRING_LIT      reduce using rule 31 (simple_stmt -> block_stmt .)
    CHAR_LIT        reduce using rule 31 (simple_stmt -> block_stmt .)
    FLOAT_LIT       reduce using rule 31 (simple_stmt -> block_stmt .)
    INT_LIT         reduce using rule 31 (simple_stmt -> block_stmt .)
    }               reduce using rule 31 (simple_stmt -> block_stmt .)
    ELSE            reduce using rule 31 (simple_stmt -> block_stmt .)


state 76

    (32) simple_stmt -> return_stmt .
    ID              reduce using rule 32 (simple_stmt -> return_stmt .)
    {               reduce using rule 32 (simple_stmt -> return_stmt .)
    RETURN          reduce using rule 32 (simple_stmt -> return_stmt .)
    PRINT           reduce using rule 32 (simple_stmt -> return_stmt .)
    FOR             reduce using rule 32 (simple_stmt -> return_stmt .)
    IF              reduce using rule 32 (simple_stmt -> return_stmt .)
    !               reduce using rule 32 (simple_stmt -> return_stmt .)
    -               reduce using rule 32 (simple_stmt -> return_stmt .)
    (               reduce using rule 32 (simple_stmt -> return_stmt .)
    FALSE           reduce using rule 32 (simple_stmt -> return_stmt .)
    TRUE            reduce using rule 32 (simple_stmt -> return_stmt .)
    STRING_LIT      reduce using rule 32 (simple_stmt -> return_stmt .)
    CHAR_LIT        reduce using rule 32 (simple_stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 32 (simple_stmt -> return_stmt .)
    INT_LIT         reduce using rule 32 (simple_stmt -> return_stmt .)
    }               reduce using rule 32 (simple_stmt -> return_stmt .)
    ELSE            reduce using rule 32 (simple_stmt -> return_stmt .)


state 77

    (33) simple_stmt -> print_stmt .
    ID              reduce using rule 33 (simple_stmt -> print_stmt .)
    {               reduce using rule 33 (simple_stmt -> print_stmt .)
    RETURN          reduce using rule 33 (simple_stmt -> print_stmt .)
    PRINT           reduce using rule 33 (simple_stmt -> print_stmt .)
    FOR             reduce using rule 33 (simple_stmt -> print_stmt .)
    IF              reduce using rule 33 (simple_stmt -> print_stmt .)
    !               reduce using rule 33 (simple_stmt -> print_stmt .)
    -               reduce using rule 33 (simple_stmt -> print_stmt .)
    (               reduce using rule 33 (simple_stmt -> print_stmt .)
    FALSE           reduce using rule 33 (simple_stmt -> print_stmt .)
    TRUE            reduce using rule 33 (simple_stmt -> print_stmt .)
    STRING_LIT      reduce using rule 33 (simple_stmt -> print_stmt .)
    CHAR_LIT        reduce using rule 33 (simple_stmt -> print_stmt .)
    FLOAT_LIT       reduce using rule 33 (simple_stmt -> print_stmt .)
    INT_LIT         reduce using rule 33 (simple_stmt -> print_stmt .)
    }               reduce using rule 33 (simple_stmt -> print_stmt .)
    ELSE            reduce using rule 33 (simple_stmt -> print_stmt .)


state 78

    (28) for_stmt_closed -> for_header . closed_stmt
    (27) for_stmt_open -> for_header . open_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    for_header                     shift and go to state 78
    closed_stmt                    shift and go to state 123
    open_stmt                      shift and go to state 124
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    for_stmt_open                  shift and go to state 71
    if_stmt_open                   shift and go to state 72
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    if_cond                        shift and go to state 79
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 79

    (23) if_stmt_closed -> if_cond . closed_stmt ELSE closed_stmt
    (24) if_stmt_open -> if_cond . closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> if_cond . stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    if_cond                        shift and go to state 79
    closed_stmt                    shift and go to state 125
    if_stmt_open                   shift and go to state 72
    stmt                           shift and go to state 126
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    open_stmt                      shift and go to state 67
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 78
    for_stmt_open                  shift and go to state 71
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 80

    (35) return_stmt -> RETURN . opt_expr ;
    (41) opt_expr -> . expr
    (42) opt_expr -> . empty
    (43) expr -> . expr1
    (105) empty -> .
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ;               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr                       shift and go to state 127
    expr                           shift and go to state 128
    empty                          shift and go to state 129
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 81

    (34) print_stmt -> PRINT . opt_expr_list ;
    (37) opt_expr_list -> . expr_list
    (38) opt_expr_list -> . empty
    (39) expr_list -> . expr
    (40) expr_list -> . expr , expr_list
    (105) empty -> .
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ;               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr_list                  shift and go to state 130
    expr_list                      shift and go to state 85
    empty                          shift and go to state 86
    expr                           shift and go to state 87
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 82

    (26) for_header -> FOR . ( opt_expr ; opt_expr ; opt_expr )
    (               shift and go to state 131


state 83

    (22) if_cond -> IF . ( opt_expr )
    (               shift and go to state 132


state 84

    (9) decl_init -> ID : type_array_sized = { opt_expr_list . } ;
    }               shift and go to state 133


state 85

    (37) opt_expr_list -> expr_list .
    }               reduce using rule 37 (opt_expr_list -> expr_list .)
    ;               reduce using rule 37 (opt_expr_list -> expr_list .)
    )               reduce using rule 37 (opt_expr_list -> expr_list .)


state 86

    (38) opt_expr_list -> empty .
    }               reduce using rule 38 (opt_expr_list -> empty .)
    ;               reduce using rule 38 (opt_expr_list -> empty .)
    )               reduce using rule 38 (opt_expr_list -> empty .)


state 87

    (39) expr_list -> expr .
    (40) expr_list -> expr . , expr_list
    }               reduce using rule 39 (expr_list -> expr .)
    ;               reduce using rule 39 (expr_list -> expr .)
    )               reduce using rule 39 (expr_list -> expr .)
    ,               shift and go to state 134


state 88

    (46) lval -> ID index .
    (75) group -> ID index .
    =               reduce using rule 46 (lval -> ID index .)
    DEC             reduce using rule 75 (group -> ID index .)
    INC             reduce using rule 75 (group -> ID index .)
    ^               reduce using rule 75 (group -> ID index .)
    %               reduce using rule 75 (group -> ID index .)
    /               reduce using rule 75 (group -> ID index .)
    *               reduce using rule 75 (group -> ID index .)
    -               reduce using rule 75 (group -> ID index .)
    +               reduce using rule 75 (group -> ID index .)
    GE              reduce using rule 75 (group -> ID index .)
    GT              reduce using rule 75 (group -> ID index .)
    LE              reduce using rule 75 (group -> ID index .)
    LT              reduce using rule 75 (group -> ID index .)
    NEQ             reduce using rule 75 (group -> ID index .)
    EQ              reduce using rule 75 (group -> ID index .)
    LAND            reduce using rule 75 (group -> ID index .)
    LOR             reduce using rule 75 (group -> ID index .)
    ;               reduce using rule 75 (group -> ID index .)
    ]               reduce using rule 75 (group -> ID index .)
    ,               reduce using rule 75 (group -> ID index .)
    }               reduce using rule 75 (group -> ID index .)
    )               reduce using rule 75 (group -> ID index .)


state 89

    (76) group -> ID ( . opt_expr_list )
    (37) opt_expr_list -> . expr_list
    (38) opt_expr_list -> . empty
    (39) expr_list -> . expr
    (40) expr_list -> . expr , expr_list
    (105) empty -> .
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr_list                  shift and go to state 135
    expr_list                      shift and go to state 85
    empty                          shift and go to state 86
    expr                           shift and go to state 87
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 90

    (10) decl_init -> ID : type_simple = expr ; .
    ID              reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    $end            reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    {               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    RETURN          reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    PRINT           reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FOR             reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    IF              reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    !               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    -               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    (               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FALSE           reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    TRUE            reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    STRING_LIT      reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    CHAR_LIT        reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FLOAT_LIT       reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    INT_LIT         reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    }               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    ELSE            reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)


state 91

    (49) expr2 -> expr2 LOR . expr3
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr3                          shift and go to state 136
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 92

    (45) expr1 -> lval = . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    lval                           shift and go to state 36
    expr1                          shift and go to state 137
    expr2                          shift and go to state 35
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 93

    (51) expr3 -> expr3 LAND . expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr4                          shift and go to state 138
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 94

    (53) expr4 -> expr4 GE . expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr5                          shift and go to state 139
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 95

    (54) expr4 -> expr4 GT . expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr5                          shift and go to state 140
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 96

    (55) expr4 -> expr4 LE . expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr5                          shift and go to state 141
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 97

    (56) expr4 -> expr4 LT . expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr5                          shift and go to state 142
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 98

    (57) expr4 -> expr4 NEQ . expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr5                          shift and go to state 143
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 99

    (58) expr4 -> expr4 EQ . expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr5                          shift and go to state 144
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 100

    (60) expr5 -> expr5 - . expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr6                          shift and go to state 145
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 101

    (61) expr5 -> expr5 + . expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr6                          shift and go to state 146
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 102

    (63) expr6 -> expr6 % . expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr7                          shift and go to state 147
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 103

    (64) expr6 -> expr6 / . expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr7                          shift and go to state 148
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 104

    (65) expr6 -> expr6 * . expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr7                          shift and go to state 149
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 105

    (70) expr8 -> - expr8 .
    ^               reduce using rule 70 (expr8 -> - expr8 .)
    %               reduce using rule 70 (expr8 -> - expr8 .)
    /               reduce using rule 70 (expr8 -> - expr8 .)
    *               reduce using rule 70 (expr8 -> - expr8 .)
    -               reduce using rule 70 (expr8 -> - expr8 .)
    +               reduce using rule 70 (expr8 -> - expr8 .)
    GE              reduce using rule 70 (expr8 -> - expr8 .)
    GT              reduce using rule 70 (expr8 -> - expr8 .)
    LE              reduce using rule 70 (expr8 -> - expr8 .)
    LT              reduce using rule 70 (expr8 -> - expr8 .)
    NEQ             reduce using rule 70 (expr8 -> - expr8 .)
    EQ              reduce using rule 70 (expr8 -> - expr8 .)
    LAND            reduce using rule 70 (expr8 -> - expr8 .)
    LOR             reduce using rule 70 (expr8 -> - expr8 .)
    ;               reduce using rule 70 (expr8 -> - expr8 .)
    ]               reduce using rule 70 (expr8 -> - expr8 .)
    ,               reduce using rule 70 (expr8 -> - expr8 .)
    }               reduce using rule 70 (expr8 -> - expr8 .)
    )               reduce using rule 70 (expr8 -> - expr8 .)


state 106

    (75) group -> ID . index
    (76) group -> ID . ( opt_expr_list )
    (85) factor -> ID .
    (78) index -> . [ expr ]
    (               shift and go to state 89
    DEC             reduce using rule 85 (factor -> ID .)
    INC             reduce using rule 85 (factor -> ID .)
    ^               reduce using rule 85 (factor -> ID .)
    %               reduce using rule 85 (factor -> ID .)
    /               reduce using rule 85 (factor -> ID .)
    *               reduce using rule 85 (factor -> ID .)
    -               reduce using rule 85 (factor -> ID .)
    +               reduce using rule 85 (factor -> ID .)
    GE              reduce using rule 85 (factor -> ID .)
    GT              reduce using rule 85 (factor -> ID .)
    LE              reduce using rule 85 (factor -> ID .)
    LT              reduce using rule 85 (factor -> ID .)
    NEQ             reduce using rule 85 (factor -> ID .)
    EQ              reduce using rule 85 (factor -> ID .)
    LAND            reduce using rule 85 (factor -> ID .)
    LOR             reduce using rule 85 (factor -> ID .)
    ;               reduce using rule 85 (factor -> ID .)
    ]               reduce using rule 85 (factor -> ID .)
    ,               reduce using rule 85 (factor -> ID .)
    }               reduce using rule 85 (factor -> ID .)
    )               reduce using rule 85 (factor -> ID .)
    [               shift and go to state 29

    index                          shift and go to state 150

state 107

    (67) expr7 -> expr7 ^ . expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    !               shift and go to state 45
    -               shift and go to state 41
    ID              shift and go to state 106
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr8                          shift and go to state 151
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 108

    (72) expr9 -> expr9 DEC .
    DEC             reduce using rule 72 (expr9 -> expr9 DEC .)
    INC             reduce using rule 72 (expr9 -> expr9 DEC .)
    ^               reduce using rule 72 (expr9 -> expr9 DEC .)
    %               reduce using rule 72 (expr9 -> expr9 DEC .)
    /               reduce using rule 72 (expr9 -> expr9 DEC .)
    *               reduce using rule 72 (expr9 -> expr9 DEC .)
    -               reduce using rule 72 (expr9 -> expr9 DEC .)
    +               reduce using rule 72 (expr9 -> expr9 DEC .)
    GE              reduce using rule 72 (expr9 -> expr9 DEC .)
    GT              reduce using rule 72 (expr9 -> expr9 DEC .)
    LE              reduce using rule 72 (expr9 -> expr9 DEC .)
    LT              reduce using rule 72 (expr9 -> expr9 DEC .)
    NEQ             reduce using rule 72 (expr9 -> expr9 DEC .)
    EQ              reduce using rule 72 (expr9 -> expr9 DEC .)
    LAND            reduce using rule 72 (expr9 -> expr9 DEC .)
    LOR             reduce using rule 72 (expr9 -> expr9 DEC .)
    ;               reduce using rule 72 (expr9 -> expr9 DEC .)
    ]               reduce using rule 72 (expr9 -> expr9 DEC .)
    ,               reduce using rule 72 (expr9 -> expr9 DEC .)
    }               reduce using rule 72 (expr9 -> expr9 DEC .)
    )               reduce using rule 72 (expr9 -> expr9 DEC .)


state 109

    (73) expr9 -> expr9 INC .
    DEC             reduce using rule 73 (expr9 -> expr9 INC .)
    INC             reduce using rule 73 (expr9 -> expr9 INC .)
    ^               reduce using rule 73 (expr9 -> expr9 INC .)
    %               reduce using rule 73 (expr9 -> expr9 INC .)
    /               reduce using rule 73 (expr9 -> expr9 INC .)
    *               reduce using rule 73 (expr9 -> expr9 INC .)
    -               reduce using rule 73 (expr9 -> expr9 INC .)
    +               reduce using rule 73 (expr9 -> expr9 INC .)
    GE              reduce using rule 73 (expr9 -> expr9 INC .)
    GT              reduce using rule 73 (expr9 -> expr9 INC .)
    LE              reduce using rule 73 (expr9 -> expr9 INC .)
    LT              reduce using rule 73 (expr9 -> expr9 INC .)
    NEQ             reduce using rule 73 (expr9 -> expr9 INC .)
    EQ              reduce using rule 73 (expr9 -> expr9 INC .)
    LAND            reduce using rule 73 (expr9 -> expr9 INC .)
    LOR             reduce using rule 73 (expr9 -> expr9 INC .)
    ;               reduce using rule 73 (expr9 -> expr9 INC .)
    ]               reduce using rule 73 (expr9 -> expr9 INC .)
    ,               reduce using rule 73 (expr9 -> expr9 INC .)
    }               reduce using rule 73 (expr9 -> expr9 INC .)
    )               reduce using rule 73 (expr9 -> expr9 INC .)


state 110

    (69) expr8 -> ! expr8 .
    ^               reduce using rule 69 (expr8 -> ! expr8 .)
    %               reduce using rule 69 (expr8 -> ! expr8 .)
    /               reduce using rule 69 (expr8 -> ! expr8 .)
    *               reduce using rule 69 (expr8 -> ! expr8 .)
    -               reduce using rule 69 (expr8 -> ! expr8 .)
    +               reduce using rule 69 (expr8 -> ! expr8 .)
    GE              reduce using rule 69 (expr8 -> ! expr8 .)
    GT              reduce using rule 69 (expr8 -> ! expr8 .)
    LE              reduce using rule 69 (expr8 -> ! expr8 .)
    LT              reduce using rule 69 (expr8 -> ! expr8 .)
    NEQ             reduce using rule 69 (expr8 -> ! expr8 .)
    EQ              reduce using rule 69 (expr8 -> ! expr8 .)
    LAND            reduce using rule 69 (expr8 -> ! expr8 .)
    LOR             reduce using rule 69 (expr8 -> ! expr8 .)
    ;               reduce using rule 69 (expr8 -> ! expr8 .)
    ]               reduce using rule 69 (expr8 -> ! expr8 .)
    ,               reduce using rule 69 (expr8 -> ! expr8 .)
    }               reduce using rule 69 (expr8 -> ! expr8 .)
    )               reduce using rule 69 (expr8 -> ! expr8 .)


state 111

    (77) group -> ( expr . )
    )               shift and go to state 152


state 112

    (96) type_func -> FUNCTION type_array_sized ( opt_param_list . )
    )               shift and go to state 153


state 113

    (98) opt_param_list -> param_list .
    (101) param_list -> param_list . , param
    )               reduce using rule 98 (opt_param_list -> param_list .)
    ,               shift and go to state 154


state 114

    (99) opt_param_list -> empty .
    )               reduce using rule 99 (opt_param_list -> empty .)


state 115

    (100) param_list -> param .
    ,               reduce using rule 100 (param_list -> param .)
    )               reduce using rule 100 (param_list -> param .)


state 116

    (102) param -> ID . : type_array_sized
    (103) param -> ID . : type_array
    (104) param -> ID . : type_simple
    :               shift and go to state 155


state 117

    (97) type_func -> FUNCTION type_simple ( opt_param_list . )
    )               shift and go to state 156


state 118

    (78) index -> [ expr ] .
    ARRAY           reduce using rule 78 (index -> [ expr ] .)
    VOID            reduce using rule 78 (index -> [ expr ] .)
    STRING          reduce using rule 78 (index -> [ expr ] .)
    CHAR            reduce using rule 78 (index -> [ expr ] .)
    BOOLEAN         reduce using rule 78 (index -> [ expr ] .)
    FLOAT           reduce using rule 78 (index -> [ expr ] .)
    INTEGER         reduce using rule 78 (index -> [ expr ] .)
    =               reduce using rule 78 (index -> [ expr ] .)
    DEC             reduce using rule 78 (index -> [ expr ] .)
    INC             reduce using rule 78 (index -> [ expr ] .)
    ^               reduce using rule 78 (index -> [ expr ] .)
    %               reduce using rule 78 (index -> [ expr ] .)
    /               reduce using rule 78 (index -> [ expr ] .)
    *               reduce using rule 78 (index -> [ expr ] .)
    -               reduce using rule 78 (index -> [ expr ] .)
    +               reduce using rule 78 (index -> [ expr ] .)
    GE              reduce using rule 78 (index -> [ expr ] .)
    GT              reduce using rule 78 (index -> [ expr ] .)
    LE              reduce using rule 78 (index -> [ expr ] .)
    LT              reduce using rule 78 (index -> [ expr ] .)
    NEQ             reduce using rule 78 (index -> [ expr ] .)
    EQ              reduce using rule 78 (index -> [ expr ] .)
    LAND            reduce using rule 78 (index -> [ expr ] .)
    LOR             reduce using rule 78 (index -> [ expr ] .)
    ;               reduce using rule 78 (index -> [ expr ] .)
    ]               reduce using rule 78 (index -> [ expr ] .)
    ,               reduce using rule 78 (index -> [ expr ] .)
    }               reduce using rule 78 (index -> [ expr ] .)
    )               reduce using rule 78 (index -> [ expr ] .)


state 119

    (36) block_stmt -> { stmt_list . }
    }               shift and go to state 157


state 120

    (8) decl_init -> ID : type_func = { opt_stmt_list } .
    ID              reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    $end            reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    {               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    RETURN          reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    PRINT           reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FOR             reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    IF              reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    !               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    -               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    (               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FALSE           reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    TRUE            reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    STRING_LIT      reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    CHAR_LIT        reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FLOAT_LIT       reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    INT_LIT         reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    }               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    ELSE            reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)


state 121

    (14) stmt_list -> stmt stmt_list .
    }               reduce using rule 14 (stmt_list -> stmt stmt_list .)


state 122

    (29) simple_stmt -> expr ; .
    ID              reduce using rule 29 (simple_stmt -> expr ; .)
    {               reduce using rule 29 (simple_stmt -> expr ; .)
    RETURN          reduce using rule 29 (simple_stmt -> expr ; .)
    PRINT           reduce using rule 29 (simple_stmt -> expr ; .)
    FOR             reduce using rule 29 (simple_stmt -> expr ; .)
    IF              reduce using rule 29 (simple_stmt -> expr ; .)
    !               reduce using rule 29 (simple_stmt -> expr ; .)
    -               reduce using rule 29 (simple_stmt -> expr ; .)
    (               reduce using rule 29 (simple_stmt -> expr ; .)
    FALSE           reduce using rule 29 (simple_stmt -> expr ; .)
    TRUE            reduce using rule 29 (simple_stmt -> expr ; .)
    STRING_LIT      reduce using rule 29 (simple_stmt -> expr ; .)
    CHAR_LIT        reduce using rule 29 (simple_stmt -> expr ; .)
    FLOAT_LIT       reduce using rule 29 (simple_stmt -> expr ; .)
    INT_LIT         reduce using rule 29 (simple_stmt -> expr ; .)
    }               reduce using rule 29 (simple_stmt -> expr ; .)
    ELSE            reduce using rule 29 (simple_stmt -> expr ; .)


state 123

    (28) for_stmt_closed -> for_header closed_stmt .
    ID              reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    {               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    RETURN          reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    PRINT           reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    FOR             reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    IF              reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    !               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    -               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    (               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    FALSE           reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    TRUE            reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    STRING_LIT      reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    CHAR_LIT        reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    FLOAT_LIT       reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    INT_LIT         reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    }               reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)
    ELSE            reduce using rule 28 (for_stmt_closed -> for_header closed_stmt .)


state 124

    (27) for_stmt_open -> for_header open_stmt .
    ID              reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    {               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    RETURN          reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    PRINT           reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    FOR             reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    IF              reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    !               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    -               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    (               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    FALSE           reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    TRUE            reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    STRING_LIT      reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    CHAR_LIT        reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    FLOAT_LIT       reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    INT_LIT         reduce using rule 27 (for_stmt_open -> for_header open_stmt .)
    }               reduce using rule 27 (for_stmt_open -> for_header open_stmt .)


state 125

    (23) if_stmt_closed -> if_cond closed_stmt . ELSE closed_stmt
    (24) if_stmt_open -> if_cond closed_stmt . ELSE if_stmt_open
    (15) stmt -> closed_stmt .
    ELSE            shift and go to state 158
    ID              reduce using rule 15 (stmt -> closed_stmt .)
    {               reduce using rule 15 (stmt -> closed_stmt .)
    RETURN          reduce using rule 15 (stmt -> closed_stmt .)
    PRINT           reduce using rule 15 (stmt -> closed_stmt .)
    FOR             reduce using rule 15 (stmt -> closed_stmt .)
    IF              reduce using rule 15 (stmt -> closed_stmt .)
    !               reduce using rule 15 (stmt -> closed_stmt .)
    -               reduce using rule 15 (stmt -> closed_stmt .)
    (               reduce using rule 15 (stmt -> closed_stmt .)
    FALSE           reduce using rule 15 (stmt -> closed_stmt .)
    TRUE            reduce using rule 15 (stmt -> closed_stmt .)
    STRING_LIT      reduce using rule 15 (stmt -> closed_stmt .)
    CHAR_LIT        reduce using rule 15 (stmt -> closed_stmt .)
    FLOAT_LIT       reduce using rule 15 (stmt -> closed_stmt .)
    INT_LIT         reduce using rule 15 (stmt -> closed_stmt .)
    }               reduce using rule 15 (stmt -> closed_stmt .)


state 126

    (25) if_stmt_open -> if_cond stmt .
    ID              reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    {               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    RETURN          reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    PRINT           reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    FOR             reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    IF              reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    !               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    -               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    (               reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    FALSE           reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    TRUE            reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    STRING_LIT      reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    CHAR_LIT        reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    FLOAT_LIT       reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    INT_LIT         reduce using rule 25 (if_stmt_open -> if_cond stmt .)
    }               reduce using rule 25 (if_stmt_open -> if_cond stmt .)


state 127

    (35) return_stmt -> RETURN opt_expr . ;
    ;               shift and go to state 159


state 128

    (41) opt_expr -> expr .
    ;               reduce using rule 41 (opt_expr -> expr .)
    )               reduce using rule 41 (opt_expr -> expr .)


state 129

    (42) opt_expr -> empty .
    ;               reduce using rule 42 (opt_expr -> empty .)
    )               reduce using rule 42 (opt_expr -> empty .)


state 130

    (34) print_stmt -> PRINT opt_expr_list . ;
    ;               shift and go to state 160


state 131

    (26) for_header -> FOR ( . opt_expr ; opt_expr ; opt_expr )
    (41) opt_expr -> . expr
    (42) opt_expr -> . empty
    (43) expr -> . expr1
    (105) empty -> .
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ;               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr                       shift and go to state 161
    expr                           shift and go to state 128
    empty                          shift and go to state 129
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 132

    (22) if_cond -> IF ( . opt_expr )
    (41) opt_expr -> . expr
    (42) opt_expr -> . empty
    (43) expr -> . expr1
    (105) empty -> .
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr                       shift and go to state 162
    expr                           shift and go to state 128
    empty                          shift and go to state 129
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 133

    (9) decl_init -> ID : type_array_sized = { opt_expr_list } . ;
    ;               shift and go to state 163


state 134

    (40) expr_list -> expr , . expr_list
    (39) expr_list -> . expr
    (40) expr_list -> . expr , expr_list
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr                           shift and go to state 87
    expr_list                      shift and go to state 164
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 135

    (76) group -> ID ( opt_expr_list . )
    )               shift and go to state 165


state 136

    (49) expr2 -> expr2 LOR expr3 .
    (51) expr3 -> expr3 . LAND expr4
    LOR             reduce using rule 49 (expr2 -> expr2 LOR expr3 .)
    ;               reduce using rule 49 (expr2 -> expr2 LOR expr3 .)
    ]               reduce using rule 49 (expr2 -> expr2 LOR expr3 .)
    ,               reduce using rule 49 (expr2 -> expr2 LOR expr3 .)
    }               reduce using rule 49 (expr2 -> expr2 LOR expr3 .)
    )               reduce using rule 49 (expr2 -> expr2 LOR expr3 .)
    LAND            shift and go to state 93


state 137

    (45) expr1 -> lval = expr1 .
    ;               reduce using rule 45 (expr1 -> lval = expr1 .)
    ]               reduce using rule 45 (expr1 -> lval = expr1 .)
    ,               reduce using rule 45 (expr1 -> lval = expr1 .)
    }               reduce using rule 45 (expr1 -> lval = expr1 .)
    )               reduce using rule 45 (expr1 -> lval = expr1 .)


state 138

    (51) expr3 -> expr3 LAND expr4 .
    (53) expr4 -> expr4 . GE expr5
    (54) expr4 -> expr4 . GT expr5
    (55) expr4 -> expr4 . LE expr5
    (56) expr4 -> expr4 . LT expr5
    (57) expr4 -> expr4 . NEQ expr5
    (58) expr4 -> expr4 . EQ expr5
    LAND            reduce using rule 51 (expr3 -> expr3 LAND expr4 .)
    LOR             reduce using rule 51 (expr3 -> expr3 LAND expr4 .)
    ;               reduce using rule 51 (expr3 -> expr3 LAND expr4 .)
    ]               reduce using rule 51 (expr3 -> expr3 LAND expr4 .)
    ,               reduce using rule 51 (expr3 -> expr3 LAND expr4 .)
    }               reduce using rule 51 (expr3 -> expr3 LAND expr4 .)
    )               reduce using rule 51 (expr3 -> expr3 LAND expr4 .)
    GE              shift and go to state 94
    GT              shift and go to state 95
    LE              shift and go to state 96
    LT              shift and go to state 97
    NEQ             shift and go to state 98
    EQ              shift and go to state 99


state 139

    (53) expr4 -> expr4 GE expr5 .
    (60) expr5 -> expr5 . - expr6
    (61) expr5 -> expr5 . + expr6
    GE              reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    GT              reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    LE              reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    LT              reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    NEQ             reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    EQ              reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    LAND            reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    LOR             reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    ;               reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    ]               reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    ,               reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    }               reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    )               reduce using rule 53 (expr4 -> expr4 GE expr5 .)
    -               shift and go to state 100
    +               shift and go to state 101


state 140

    (54) expr4 -> expr4 GT expr5 .
    (60) expr5 -> expr5 . - expr6
    (61) expr5 -> expr5 . + expr6
    GE              reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    GT              reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    LE              reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    LT              reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    NEQ             reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    EQ              reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    LAND            reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    LOR             reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    ;               reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    ]               reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    ,               reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    }               reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    )               reduce using rule 54 (expr4 -> expr4 GT expr5 .)
    -               shift and go to state 100
    +               shift and go to state 101


state 141

    (55) expr4 -> expr4 LE expr5 .
    (60) expr5 -> expr5 . - expr6
    (61) expr5 -> expr5 . + expr6
    GE              reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    GT              reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    LE              reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    LT              reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    NEQ             reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    EQ              reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    LAND            reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    LOR             reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    ;               reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    ]               reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    ,               reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    }               reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    )               reduce using rule 55 (expr4 -> expr4 LE expr5 .)
    -               shift and go to state 100
    +               shift and go to state 101


state 142

    (56) expr4 -> expr4 LT expr5 .
    (60) expr5 -> expr5 . - expr6
    (61) expr5 -> expr5 . + expr6
    GE              reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    GT              reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    LE              reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    LT              reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    NEQ             reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    EQ              reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    LAND            reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    LOR             reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    ;               reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    ]               reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    ,               reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    }               reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    )               reduce using rule 56 (expr4 -> expr4 LT expr5 .)
    -               shift and go to state 100
    +               shift and go to state 101


state 143

    (57) expr4 -> expr4 NEQ expr5 .
    (60) expr5 -> expr5 . - expr6
    (61) expr5 -> expr5 . + expr6
    GE              reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    GT              reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    LE              reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    LT              reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    NEQ             reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    EQ              reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    LAND            reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    LOR             reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    ;               reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    ]               reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    ,               reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    }               reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    )               reduce using rule 57 (expr4 -> expr4 NEQ expr5 .)
    -               shift and go to state 100
    +               shift and go to state 101


state 144

    (58) expr4 -> expr4 EQ expr5 .
    (60) expr5 -> expr5 . - expr6
    (61) expr5 -> expr5 . + expr6
    GE              reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    GT              reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    LE              reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    LT              reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    NEQ             reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    EQ              reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    LAND            reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    LOR             reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    ;               reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    ]               reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    ,               reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    }               reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    )               reduce using rule 58 (expr4 -> expr4 EQ expr5 .)
    -               shift and go to state 100
    +               shift and go to state 101


state 145

    (60) expr5 -> expr5 - expr6 .
    (63) expr6 -> expr6 . % expr7
    (64) expr6 -> expr6 . / expr7
    (65) expr6 -> expr6 . * expr7
    -               reduce using rule 60 (expr5 -> expr5 - expr6 .)
    +               reduce using rule 60 (expr5 -> expr5 - expr6 .)
    GE              reduce using rule 60 (expr5 -> expr5 - expr6 .)
    GT              reduce using rule 60 (expr5 -> expr5 - expr6 .)
    LE              reduce using rule 60 (expr5 -> expr5 - expr6 .)
    LT              reduce using rule 60 (expr5 -> expr5 - expr6 .)
    NEQ             reduce using rule 60 (expr5 -> expr5 - expr6 .)
    EQ              reduce using rule 60 (expr5 -> expr5 - expr6 .)
    LAND            reduce using rule 60 (expr5 -> expr5 - expr6 .)
    LOR             reduce using rule 60 (expr5 -> expr5 - expr6 .)
    ;               reduce using rule 60 (expr5 -> expr5 - expr6 .)
    ]               reduce using rule 60 (expr5 -> expr5 - expr6 .)
    ,               reduce using rule 60 (expr5 -> expr5 - expr6 .)
    }               reduce using rule 60 (expr5 -> expr5 - expr6 .)
    )               reduce using rule 60 (expr5 -> expr5 - expr6 .)
    %               shift and go to state 102
    /               shift and go to state 103
    *               shift and go to state 104


state 146

    (61) expr5 -> expr5 + expr6 .
    (63) expr6 -> expr6 . % expr7
    (64) expr6 -> expr6 . / expr7
    (65) expr6 -> expr6 . * expr7
    -               reduce using rule 61 (expr5 -> expr5 + expr6 .)
    +               reduce using rule 61 (expr5 -> expr5 + expr6 .)
    GE              reduce using rule 61 (expr5 -> expr5 + expr6 .)
    GT              reduce using rule 61 (expr5 -> expr5 + expr6 .)
    LE              reduce using rule 61 (expr5 -> expr5 + expr6 .)
    LT              reduce using rule 61 (expr5 -> expr5 + expr6 .)
    NEQ             reduce using rule 61 (expr5 -> expr5 + expr6 .)
    EQ              reduce using rule 61 (expr5 -> expr5 + expr6 .)
    LAND            reduce using rule 61 (expr5 -> expr5 + expr6 .)
    LOR             reduce using rule 61 (expr5 -> expr5 + expr6 .)
    ;               reduce using rule 61 (expr5 -> expr5 + expr6 .)
    ]               reduce using rule 61 (expr5 -> expr5 + expr6 .)
    ,               reduce using rule 61 (expr5 -> expr5 + expr6 .)
    }               reduce using rule 61 (expr5 -> expr5 + expr6 .)
    )               reduce using rule 61 (expr5 -> expr5 + expr6 .)
    %               shift and go to state 102
    /               shift and go to state 103
    *               shift and go to state 104


state 147

    (63) expr6 -> expr6 % expr7 .
    (67) expr7 -> expr7 . ^ expr8
    %               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    /               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    *               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    -               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    +               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    GE              reduce using rule 63 (expr6 -> expr6 % expr7 .)
    GT              reduce using rule 63 (expr6 -> expr6 % expr7 .)
    LE              reduce using rule 63 (expr6 -> expr6 % expr7 .)
    LT              reduce using rule 63 (expr6 -> expr6 % expr7 .)
    NEQ             reduce using rule 63 (expr6 -> expr6 % expr7 .)
    EQ              reduce using rule 63 (expr6 -> expr6 % expr7 .)
    LAND            reduce using rule 63 (expr6 -> expr6 % expr7 .)
    LOR             reduce using rule 63 (expr6 -> expr6 % expr7 .)
    ;               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    ]               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    ,               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    }               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    )               reduce using rule 63 (expr6 -> expr6 % expr7 .)
    ^               shift and go to state 107


state 148

    (64) expr6 -> expr6 / expr7 .
    (67) expr7 -> expr7 . ^ expr8
    %               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    /               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    *               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    -               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    +               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    GE              reduce using rule 64 (expr6 -> expr6 / expr7 .)
    GT              reduce using rule 64 (expr6 -> expr6 / expr7 .)
    LE              reduce using rule 64 (expr6 -> expr6 / expr7 .)
    LT              reduce using rule 64 (expr6 -> expr6 / expr7 .)
    NEQ             reduce using rule 64 (expr6 -> expr6 / expr7 .)
    EQ              reduce using rule 64 (expr6 -> expr6 / expr7 .)
    LAND            reduce using rule 64 (expr6 -> expr6 / expr7 .)
    LOR             reduce using rule 64 (expr6 -> expr6 / expr7 .)
    ;               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    ]               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    ,               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    }               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    )               reduce using rule 64 (expr6 -> expr6 / expr7 .)
    ^               shift and go to state 107


state 149

    (65) expr6 -> expr6 * expr7 .
    (67) expr7 -> expr7 . ^ expr8
    %               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    /               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    *               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    -               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    +               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    GE              reduce using rule 65 (expr6 -> expr6 * expr7 .)
    GT              reduce using rule 65 (expr6 -> expr6 * expr7 .)
    LE              reduce using rule 65 (expr6 -> expr6 * expr7 .)
    LT              reduce using rule 65 (expr6 -> expr6 * expr7 .)
    NEQ             reduce using rule 65 (expr6 -> expr6 * expr7 .)
    EQ              reduce using rule 65 (expr6 -> expr6 * expr7 .)
    LAND            reduce using rule 65 (expr6 -> expr6 * expr7 .)
    LOR             reduce using rule 65 (expr6 -> expr6 * expr7 .)
    ;               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    ]               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    ,               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    }               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    )               reduce using rule 65 (expr6 -> expr6 * expr7 .)
    ^               shift and go to state 107


state 150

    (75) group -> ID index .
    DEC             reduce using rule 75 (group -> ID index .)
    INC             reduce using rule 75 (group -> ID index .)
    ^               reduce using rule 75 (group -> ID index .)
    %               reduce using rule 75 (group -> ID index .)
    /               reduce using rule 75 (group -> ID index .)
    *               reduce using rule 75 (group -> ID index .)
    -               reduce using rule 75 (group -> ID index .)
    +               reduce using rule 75 (group -> ID index .)
    GE              reduce using rule 75 (group -> ID index .)
    GT              reduce using rule 75 (group -> ID index .)
    LE              reduce using rule 75 (group -> ID index .)
    LT              reduce using rule 75 (group -> ID index .)
    NEQ             reduce using rule 75 (group -> ID index .)
    EQ              reduce using rule 75 (group -> ID index .)
    LAND            reduce using rule 75 (group -> ID index .)
    LOR             reduce using rule 75 (group -> ID index .)
    ;               reduce using rule 75 (group -> ID index .)
    ]               reduce using rule 75 (group -> ID index .)
    ,               reduce using rule 75 (group -> ID index .)
    }               reduce using rule 75 (group -> ID index .)
    )               reduce using rule 75 (group -> ID index .)


state 151

    (67) expr7 -> expr7 ^ expr8 .
    ^               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    %               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    /               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    *               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    -               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    +               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    GE              reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    GT              reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    LE              reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    LT              reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    NEQ             reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    EQ              reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    LAND            reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    LOR             reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    ;               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    ]               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    ,               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    }               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)
    )               reduce using rule 67 (expr7 -> expr7 ^ expr8 .)


state 152

    (77) group -> ( expr ) .
    DEC             reduce using rule 77 (group -> ( expr ) .)
    INC             reduce using rule 77 (group -> ( expr ) .)
    ^               reduce using rule 77 (group -> ( expr ) .)
    %               reduce using rule 77 (group -> ( expr ) .)
    /               reduce using rule 77 (group -> ( expr ) .)
    *               reduce using rule 77 (group -> ( expr ) .)
    -               reduce using rule 77 (group -> ( expr ) .)
    +               reduce using rule 77 (group -> ( expr ) .)
    GE              reduce using rule 77 (group -> ( expr ) .)
    GT              reduce using rule 77 (group -> ( expr ) .)
    LE              reduce using rule 77 (group -> ( expr ) .)
    LT              reduce using rule 77 (group -> ( expr ) .)
    NEQ             reduce using rule 77 (group -> ( expr ) .)
    EQ              reduce using rule 77 (group -> ( expr ) .)
    LAND            reduce using rule 77 (group -> ( expr ) .)
    LOR             reduce using rule 77 (group -> ( expr ) .)
    ;               reduce using rule 77 (group -> ( expr ) .)
    ]               reduce using rule 77 (group -> ( expr ) .)
    ,               reduce using rule 77 (group -> ( expr ) .)
    }               reduce using rule 77 (group -> ( expr ) .)
    )               reduce using rule 77 (group -> ( expr ) .)


state 153

    (96) type_func -> FUNCTION type_array_sized ( opt_param_list ) .
    ;               reduce using rule 96 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)
    =               reduce using rule 96 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)


state 154

    (101) param_list -> param_list , . param
    (102) param -> . ID : type_array_sized
    (103) param -> . ID : type_array
    (104) param -> . ID : type_simple
    ID              shift and go to state 116

    param                          shift and go to state 166

state 155

    (102) param -> ID : . type_array_sized
    (103) param -> ID : . type_array
    (104) param -> ID : . type_simple
    (94) type_array_sized -> . ARRAY index type_array_sized
    (95) type_array_sized -> . ARRAY index type_simple
    (92) type_array -> . ARRAY [ ] type_array
    (93) type_array -> . ARRAY [ ] type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 170
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array_sized               shift and go to state 167
    type_array                     shift and go to state 168
    type_simple                    shift and go to state 169

state 156

    (97) type_func -> FUNCTION type_simple ( opt_param_list ) .
    ;               reduce using rule 97 (type_func -> FUNCTION type_simple ( opt_param_list ) .)
    =               reduce using rule 97 (type_func -> FUNCTION type_simple ( opt_param_list ) .)


state 157

    (36) block_stmt -> { stmt_list } .
    ID              reduce using rule 36 (block_stmt -> { stmt_list } .)
    {               reduce using rule 36 (block_stmt -> { stmt_list } .)
    RETURN          reduce using rule 36 (block_stmt -> { stmt_list } .)
    PRINT           reduce using rule 36 (block_stmt -> { stmt_list } .)
    FOR             reduce using rule 36 (block_stmt -> { stmt_list } .)
    IF              reduce using rule 36 (block_stmt -> { stmt_list } .)
    !               reduce using rule 36 (block_stmt -> { stmt_list } .)
    -               reduce using rule 36 (block_stmt -> { stmt_list } .)
    (               reduce using rule 36 (block_stmt -> { stmt_list } .)
    FALSE           reduce using rule 36 (block_stmt -> { stmt_list } .)
    TRUE            reduce using rule 36 (block_stmt -> { stmt_list } .)
    STRING_LIT      reduce using rule 36 (block_stmt -> { stmt_list } .)
    CHAR_LIT        reduce using rule 36 (block_stmt -> { stmt_list } .)
    FLOAT_LIT       reduce using rule 36 (block_stmt -> { stmt_list } .)
    INT_LIT         reduce using rule 36 (block_stmt -> { stmt_list } .)
    }               reduce using rule 36 (block_stmt -> { stmt_list } .)
    ELSE            reduce using rule 36 (block_stmt -> { stmt_list } .)


state 158

    (23) if_stmt_closed -> if_cond closed_stmt ELSE . closed_stmt
    (24) if_stmt_open -> if_cond closed_stmt ELSE . if_stmt_open
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (22) if_cond -> . IF ( opt_expr )
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    IF              shift and go to state 83
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    if_cond                        shift and go to state 171
    closed_stmt                    shift and go to state 172
    if_stmt_open                   shift and go to state 173
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 174
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 159

    (35) return_stmt -> RETURN opt_expr ; .
    ID              reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    {               reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    RETURN          reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    PRINT           reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    FOR             reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    IF              reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    !               reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    -               reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    (               reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    FALSE           reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    TRUE            reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    STRING_LIT      reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    CHAR_LIT        reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    FLOAT_LIT       reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    INT_LIT         reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    }               reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)
    ELSE            reduce using rule 35 (return_stmt -> RETURN opt_expr ; .)


state 160

    (34) print_stmt -> PRINT opt_expr_list ; .
    ID              reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    {               reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    RETURN          reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    PRINT           reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    FOR             reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    IF              reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    !               reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    -               reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    (               reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    FALSE           reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    TRUE            reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    STRING_LIT      reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    CHAR_LIT        reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    FLOAT_LIT       reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    INT_LIT         reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    }               reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)
    ELSE            reduce using rule 34 (print_stmt -> PRINT opt_expr_list ; .)


state 161

    (26) for_header -> FOR ( opt_expr . ; opt_expr ; opt_expr )
    ;               shift and go to state 175


state 162

    (22) if_cond -> IF ( opt_expr . )
    )               shift and go to state 176


state 163

    (9) decl_init -> ID : type_array_sized = { opt_expr_list } ; .
    ID              reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    $end            reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    {               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    RETURN          reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    PRINT           reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FOR             reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    IF              reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    !               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    -               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    (               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FALSE           reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    TRUE            reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    STRING_LIT      reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    CHAR_LIT        reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FLOAT_LIT       reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    INT_LIT         reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    }               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    ELSE            reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)


state 164

    (40) expr_list -> expr , expr_list .
    }               reduce using rule 40 (expr_list -> expr , expr_list .)
    ;               reduce using rule 40 (expr_list -> expr , expr_list .)
    )               reduce using rule 40 (expr_list -> expr , expr_list .)


state 165

    (76) group -> ID ( opt_expr_list ) .
    DEC             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    INC             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ^               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    %               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    /               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    *               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    -               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    +               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    GE              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    GT              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LE              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LT              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    NEQ             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    EQ              reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LAND            reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    LOR             reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ;               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ]               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    ,               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    }               reduce using rule 76 (group -> ID ( opt_expr_list ) .)
    )               reduce using rule 76 (group -> ID ( opt_expr_list ) .)


state 166

    (101) param_list -> param_list , param .
    ,               reduce using rule 101 (param_list -> param_list , param .)
    )               reduce using rule 101 (param_list -> param_list , param .)


state 167

    (102) param -> ID : type_array_sized .
    ,               reduce using rule 102 (param -> ID : type_array_sized .)
    )               reduce using rule 102 (param -> ID : type_array_sized .)


state 168

    (103) param -> ID : type_array .
    ,               reduce using rule 103 (param -> ID : type_array .)
    )               reduce using rule 103 (param -> ID : type_array .)


state 169

    (104) param -> ID : type_simple .
    ,               reduce using rule 104 (param -> ID : type_simple .)
    )               reduce using rule 104 (param -> ID : type_simple .)


state 170

    (94) type_array_sized -> ARRAY . index type_array_sized
    (95) type_array_sized -> ARRAY . index type_simple
    (92) type_array -> ARRAY . [ ] type_array
    (93) type_array -> ARRAY . [ ] type_simple
    (78) index -> . [ expr ]
    [               shift and go to state 177

    index                          shift and go to state 28

state 171

    (24) if_stmt_open -> if_cond . closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> if_cond . stmt
    (23) if_stmt_closed -> if_cond . closed_stmt ELSE closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (15) stmt -> . closed_stmt
    (16) stmt -> . open_stmt
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (20) open_stmt -> . for_stmt_open
    (21) open_stmt -> . if_stmt_open
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (27) for_stmt_open -> . for_header open_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    if_cond                        shift and go to state 79
    closed_stmt                    shift and go to state 178
    if_stmt_open                   shift and go to state 72
    stmt                           shift and go to state 126
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    open_stmt                      shift and go to state 67
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 78
    for_stmt_open                  shift and go to state 71
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 172

    (23) if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .
    ID              reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    {               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    RETURN          reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    PRINT           reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    FOR             reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    IF              reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    !               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    -               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    (               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    FALSE           reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    TRUE            reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    STRING_LIT      reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    CHAR_LIT        reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    FLOAT_LIT       reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    INT_LIT         reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    }               reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)
    ELSE            reduce using rule 23 (if_stmt_closed -> if_cond closed_stmt ELSE closed_stmt .)


state 173

    (24) if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .
    ID              reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    {               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    RETURN          reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    PRINT           reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    FOR             reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    IF              reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    !               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    -               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    (               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    FALSE           reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    TRUE            reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    STRING_LIT      reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    CHAR_LIT        reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    FLOAT_LIT       reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    INT_LIT         reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)
    }               reduce using rule 24 (if_stmt_open -> if_cond closed_stmt ELSE if_stmt_open .)


state 174

    (28) for_stmt_closed -> for_header . closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    for_header                     shift and go to state 174
    closed_stmt                    shift and go to state 123
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    if_cond                        shift and go to state 179
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 175

    (26) for_header -> FOR ( opt_expr ; . opt_expr ; opt_expr )
    (41) opt_expr -> . expr
    (42) opt_expr -> . empty
    (43) expr -> . expr1
    (105) empty -> .
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ;               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr                       shift and go to state 180
    expr                           shift and go to state 128
    empty                          shift and go to state 129
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 176

    (22) if_cond -> IF ( opt_expr ) .
    ID              reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    {               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    RETURN          reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    PRINT           reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    FOR             reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    IF              reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    !               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    -               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    (               reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    FALSE           reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    TRUE            reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    STRING_LIT      reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    CHAR_LIT        reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    FLOAT_LIT       reduce using rule 22 (if_cond -> IF ( opt_expr ) .)
    INT_LIT         reduce using rule 22 (if_cond -> IF ( opt_expr ) .)


state 177

    (92) type_array -> ARRAY [ . ] type_array
    (93) type_array -> ARRAY [ . ] type_simple
    (78) index -> [ . expr ]
    (43) expr -> . expr1
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ]               shift and go to state 181
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    expr                           shift and go to state 59
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 178

    (24) if_stmt_open -> if_cond closed_stmt . ELSE if_stmt_open
    (23) if_stmt_closed -> if_cond closed_stmt . ELSE closed_stmt
    (15) stmt -> closed_stmt .
    ELSE            shift and go to state 182
    ID              reduce using rule 15 (stmt -> closed_stmt .)
    {               reduce using rule 15 (stmt -> closed_stmt .)
    RETURN          reduce using rule 15 (stmt -> closed_stmt .)
    PRINT           reduce using rule 15 (stmt -> closed_stmt .)
    FOR             reduce using rule 15 (stmt -> closed_stmt .)
    IF              reduce using rule 15 (stmt -> closed_stmt .)
    !               reduce using rule 15 (stmt -> closed_stmt .)
    -               reduce using rule 15 (stmt -> closed_stmt .)
    (               reduce using rule 15 (stmt -> closed_stmt .)
    FALSE           reduce using rule 15 (stmt -> closed_stmt .)
    TRUE            reduce using rule 15 (stmt -> closed_stmt .)
    STRING_LIT      reduce using rule 15 (stmt -> closed_stmt .)
    CHAR_LIT        reduce using rule 15 (stmt -> closed_stmt .)
    FLOAT_LIT       reduce using rule 15 (stmt -> closed_stmt .)
    INT_LIT         reduce using rule 15 (stmt -> closed_stmt .)
    }               reduce using rule 15 (stmt -> closed_stmt .)


state 179

    (23) if_stmt_closed -> if_cond . closed_stmt ELSE closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    if_cond                        shift and go to state 179
    closed_stmt                    shift and go to state 183
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 174
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 180

    (26) for_header -> FOR ( opt_expr ; opt_expr . ; opt_expr )
    ;               shift and go to state 184


state 181

    (92) type_array -> ARRAY [ ] . type_array
    (93) type_array -> ARRAY [ ] . type_simple
    (92) type_array -> . ARRAY [ ] type_array
    (93) type_array -> . ARRAY [ ] type_simple
    (86) type_simple -> . VOID
    (87) type_simple -> . STRING
    (88) type_simple -> . CHAR
    (89) type_simple -> . BOOLEAN
    (90) type_simple -> . FLOAT
    (91) type_simple -> . INTEGER
    ARRAY           shift and go to state 185
    VOID            shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOLEAN         shift and go to state 17
    FLOAT           shift and go to state 18
    INTEGER         shift and go to state 19

    type_array                     shift and go to state 186
    type_simple                    shift and go to state 187

state 182

    (24) if_stmt_open -> if_cond closed_stmt ELSE . if_stmt_open
    (23) if_stmt_closed -> if_cond closed_stmt ELSE . closed_stmt
    (24) if_stmt_open -> . if_cond closed_stmt ELSE if_stmt_open
    (25) if_stmt_open -> . if_cond stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (22) if_cond -> . IF ( opt_expr )
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    IF              shift and go to state 83
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    if_cond                        shift and go to state 171
    closed_stmt                    shift and go to state 172
    if_stmt_open                   shift and go to state 173
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 174
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 183

    (23) if_stmt_closed -> if_cond closed_stmt . ELSE closed_stmt
    ELSE            shift and go to state 188


state 184

    (26) for_header -> FOR ( opt_expr ; opt_expr ; . opt_expr )
    (41) opt_expr -> . expr
    (42) opt_expr -> . empty
    (43) expr -> . expr1
    (105) empty -> .
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    )               reduce using rule 105 (empty -> .)
    ID              shift and go to state 32
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    opt_expr                       shift and go to state 189
    expr                           shift and go to state 128
    empty                          shift and go to state 129
    expr1                          shift and go to state 34
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 185

    (92) type_array -> ARRAY . [ ] type_array
    (93) type_array -> ARRAY . [ ] type_simple
    [               shift and go to state 190


state 186

    (92) type_array -> ARRAY [ ] type_array .
    ,               reduce using rule 92 (type_array -> ARRAY [ ] type_array .)
    )               reduce using rule 92 (type_array -> ARRAY [ ] type_array .)


state 187

    (93) type_array -> ARRAY [ ] type_simple .
    ,               reduce using rule 93 (type_array -> ARRAY [ ] type_simple .)
    )               reduce using rule 93 (type_array -> ARRAY [ ] type_simple .)


state 188

    (23) if_stmt_closed -> if_cond closed_stmt ELSE . closed_stmt
    (17) closed_stmt -> . simple_stmt
    (18) closed_stmt -> . for_stmt_closed
    (19) closed_stmt -> . if_stmt_closed
    (29) simple_stmt -> . expr ;
    (30) simple_stmt -> . decl
    (31) simple_stmt -> . block_stmt
    (32) simple_stmt -> . return_stmt
    (33) simple_stmt -> . print_stmt
    (28) for_stmt_closed -> . for_header closed_stmt
    (23) if_stmt_closed -> . if_cond closed_stmt ELSE closed_stmt
    (43) expr -> . expr1
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (36) block_stmt -> . { stmt_list }
    (35) return_stmt -> . RETURN opt_expr ;
    (34) print_stmt -> . PRINT opt_expr_list ;
    (26) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (22) if_cond -> . IF ( opt_expr )
    (44) expr1 -> . expr2
    (45) expr1 -> . lval = expr1
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (48) expr2 -> . expr3
    (49) expr2 -> . expr2 LOR expr3
    (46) lval -> . ID index
    (47) lval -> . ID
    (50) expr3 -> . expr4
    (51) expr3 -> . expr3 LAND expr4
    (52) expr4 -> . expr5
    (53) expr4 -> . expr4 GE expr5
    (54) expr4 -> . expr4 GT expr5
    (55) expr4 -> . expr4 LE expr5
    (56) expr4 -> . expr4 LT expr5
    (57) expr4 -> . expr4 NEQ expr5
    (58) expr4 -> . expr4 EQ expr5
    (59) expr5 -> . expr6
    (60) expr5 -> . expr5 - expr6
    (61) expr5 -> . expr5 + expr6
    (62) expr6 -> . expr7
    (63) expr6 -> . expr6 % expr7
    (64) expr6 -> . expr6 / expr7
    (65) expr6 -> . expr6 * expr7
    (66) expr7 -> . expr8
    (67) expr7 -> . expr7 ^ expr8
    (68) expr8 -> . expr9
    (69) expr8 -> . ! expr8
    (70) expr8 -> . - expr8
    (71) expr9 -> . group
    (72) expr9 -> . expr9 DEC
    (73) expr9 -> . expr9 INC
    (74) group -> . factor
    (75) group -> . ID index
    (76) group -> . ID ( opt_expr_list )
    (77) group -> . ( expr )
    (79) factor -> . FALSE
    (80) factor -> . TRUE
    (81) factor -> . STRING_LIT
    (82) factor -> . CHAR_LIT
    (83) factor -> . FLOAT_LIT
    (84) factor -> . INT_LIT
    (85) factor -> . ID
    ID              shift and go to state 60
    {               shift and go to state 61
    RETURN          shift and go to state 80
    PRINT           shift and go to state 81
    FOR             shift and go to state 82
    IF              shift and go to state 83
    !               shift and go to state 45
    -               shift and go to state 41
    (               shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    STRING_LIT      shift and go to state 51
    CHAR_LIT        shift and go to state 52
    FLOAT_LIT       shift and go to state 53
    INT_LIT         shift and go to state 54

    if_cond                        shift and go to state 179
    closed_stmt                    shift and go to state 172
    simple_stmt                    shift and go to state 68
    for_stmt_closed                shift and go to state 69
    if_stmt_closed                 shift and go to state 70
    expr                           shift and go to state 73
    decl                           shift and go to state 74
    block_stmt                     shift and go to state 75
    return_stmt                    shift and go to state 76
    print_stmt                     shift and go to state 77
    for_header                     shift and go to state 174
    expr1                          shift and go to state 34
    decl_init                      shift and go to state 5
    expr2                          shift and go to state 35
    lval                           shift and go to state 36
    expr3                          shift and go to state 37
    expr4                          shift and go to state 38
    expr5                          shift and go to state 39
    expr6                          shift and go to state 40
    expr7                          shift and go to state 42
    expr8                          shift and go to state 43
    expr9                          shift and go to state 44
    group                          shift and go to state 46
    factor                         shift and go to state 47

state 189

    (26) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr . )
    )               shift and go to state 191


state 190

    (92) type_array -> ARRAY [ . ] type_array
    (93) type_array -> ARRAY [ . ] type_simple
    ]               shift and go to state 181


state 191

    (26) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .
    ID              reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    {               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    RETURN          reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    PRINT           reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    FOR             reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    IF              reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    !               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    -               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    (               reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    FALSE           reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    TRUE            reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    STRING_LIT      reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    CHAR_LIT        reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    FLOAT_LIT       reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
    INT_LIT         reduce using rule 26 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)
