Grammar:

Rule 0     S' -> prog
Rule 1     prog -> decl_list
Rule 2     decl_list -> decl
Rule 3     decl_list -> decl_list decl
Rule 4     decl -> decl_init
Rule 5     decl -> ID : type_func ;
Rule 6     decl -> ID : type_array_sized ;
Rule 7     decl -> ID : type_simple ;
Rule 8     decl_init -> ID : type_func = { opt_stmt_list }
Rule 9     decl_init -> ID : type_array_sized = { opt_expr_list } ;
Rule 10    decl_init -> ID : type_simple = expr ;
Rule 11    while_header -> WHILE ( opt_expr )
Rule 12    while_stmt_open -> while_header { stmt_list }
Rule 13    while_stmt_closed -> while_header closed_stmt
Rule 14    opt_stmt_list -> empty
Rule 15    opt_stmt_list -> stmt_list
Rule 16    stmt_list -> stmt
Rule 17    stmt_list -> stmt_list stmt
Rule 18    stmt -> closed_stmt
Rule 19    closed_stmt -> simple_stmt
Rule 20    simple_stmt -> expr ;
Rule 21    simple_stmt -> for_stmt
Rule 22    simple_stmt -> if_stmt
Rule 23    simple_stmt -> decl
Rule 24    simple_stmt -> block_stmt
Rule 25    simple_stmt -> return_stmt
Rule 26    return_stmt -> RETURN opt_expr ;
Rule 27    block_stmt -> { stmt_list }
Rule 28    if_stmt -> IF ( opt_expr ) { opt_stmt_list }
Rule 29    for_header -> FOR ( opt_expr ; opt_expr ; opt_expr )
Rule 30    for_stmt -> for_header { stmt_list }
Rule 31    opt_expr_list -> expr_list
Rule 32    opt_expr_list -> empty
Rule 33    expr_list -> expr
Rule 34    expr_list -> expr , expr_list
Rule 35    opt_expr -> expr
Rule 36    opt_expr -> empty
Rule 37    expr -> expr1
Rule 38    expr1 -> expr2
Rule 39    expr1 -> lval = expr1
Rule 40    lval -> ID index
Rule 41    lval -> ID
Rule 42    expr2 -> expr3
Rule 43    expr2 -> expr2 LOR expr3
Rule 44    expr3 -> expr4
Rule 45    expr3 -> expr3 LAND expr4
Rule 46    expr4 -> expr5
Rule 47    expr4 -> expr4 GE expr5
Rule 48    expr4 -> expr4 GT expr5
Rule 49    expr4 -> expr4 LE expr5
Rule 50    expr4 -> expr4 LT expr5
Rule 51    expr4 -> expr4 NEQ expr5
Rule 52    expr4 -> expr4 EQ expr5
Rule 53    expr5 -> expr6
Rule 54    expr5 -> expr5 - expr6
Rule 55    expr5 -> expr5 + expr6
Rule 56    expr6 -> expr7
Rule 57    expr6 -> expr6 % expr7
Rule 58    expr6 -> expr6 / expr7
Rule 59    expr6 -> expr6 * expr7
Rule 60    expr7 -> expr8
Rule 61    expr7 -> expr7 ^ expr8
Rule 62    expr8 -> expr9
Rule 63    expr8 -> ! expr8
Rule 64    expr8 -> - expr8
Rule 65    expr9 -> DEC expr9
Rule 66    expr9 -> INC expr9
Rule 67    expr9 -> group
Rule 68    expr9 -> expr9 DEC
Rule 69    expr9 -> expr9 INC
Rule 70    group -> factor
Rule 71    group -> ID index
Rule 72    group -> ID ( opt_expr_list )
Rule 73    group -> ( expr )
Rule 74    index -> [ expr ]
Rule 75    factor -> FALSE
Rule 76    factor -> TRUE
Rule 77    factor -> STRING_LIT
Rule 78    factor -> CHAR_LIT
Rule 79    factor -> FLOAT_LIT
Rule 80    factor -> INT_LIT
Rule 81    factor -> ID
Rule 82    type_simple -> VOID
Rule 83    type_simple -> STRING
Rule 84    type_simple -> CHAR
Rule 85    type_simple -> BOOLEAN
Rule 86    type_simple -> FLOAT
Rule 87    type_simple -> INTEGER
Rule 88    type_array -> ARRAY [ ] type_array
Rule 89    type_array -> ARRAY [ ] type_simple
Rule 90    type_array_sized -> ARRAY index type_array_sized
Rule 91    type_array_sized -> ARRAY index type_simple
Rule 92    type_func -> FUNCTION type_array_sized ( opt_param_list )
Rule 93    type_func -> FUNCTION type_simple ( opt_param_list )
Rule 94    opt_param_list -> param_list
Rule 95    opt_param_list -> empty
Rule 96    param_list -> param
Rule 97    param_list -> param_list , param
Rule 98    param -> ID : type_array_sized
Rule 99    param -> ID : type_array
Rule 100   param -> ID : type_simple
Rule 101   empty -> <empty>

Unused terminals:

    PRINT
    ELSE
    AND
    DO
    AUTO
    OR
    NOT

Terminals, with rules where they appear:

!                    : 63
%                    : 57
(                    : 11 28 29 72 73 92 93
)                    : 11 28 29 72 73 92 93
*                    : 59
+                    : 55
,                    : 34 97
-                    : 54 64
/                    : 58
:                    : 5 6 7 8 9 10 98 99 100
;                    : 5 6 7 9 10 20 26 29 29
=                    : 8 9 10 39
AND                  : 
ARRAY                : 88 89 90 91
AUTO                 : 
BOOLEAN              : 85
CHAR                 : 84
CHAR_LIT             : 78
DEC                  : 65 68
DO                   : 
ELSE                 : 
EQ                   : 52
FALSE                : 75
FLOAT                : 86
FLOAT_LIT            : 79
FOR                  : 29
FUNCTION             : 92 93
GE                   : 47
GT                   : 48
ID                   : 5 6 7 8 9 10 40 41 71 72 81 98 99 100
IF                   : 28
INC                  : 66 69
INTEGER              : 87
INT_LIT              : 80
LAND                 : 45
LE                   : 49
LOR                  : 43
LT                   : 50
NEQ                  : 51
NOT                  : 
OR                   : 
PRINT                : 
RETURN               : 26
STRING               : 83
STRING_LIT           : 77
TRUE                 : 76
VOID                 : 82
WHILE                : 11
[                    : 74 88 89
]                    : 74 88 89
^                    : 61
error                : 
{                    : 8 9 12 27 28 30
}                    : 8 9 12 27 28 30

Nonterminals, with rules where they appear:

block_stmt           : 24
closed_stmt          : 13 18
decl                 : 2 3 23
decl_init            : 4
decl_list            : 1 3
empty                : 14 32 36 95
expr                 : 10 20 33 34 35 73 74
expr1                : 37 39
expr2                : 38 43
expr3                : 42 43 45
expr4                : 44 45 47 48 49 50 51 52
expr5                : 46 47 48 49 50 51 52 54 55
expr6                : 53 54 55 57 58 59
expr7                : 56 57 58 59 61
expr8                : 60 61 63 64
expr9                : 62 65 66 68 69
expr_list            : 31 34
factor               : 70
for_header           : 30
for_stmt             : 21
group                : 67
if_stmt              : 22
index                : 40 71 90 91
lval                 : 39
opt_expr             : 11 26 28 29 29 29
opt_expr_list        : 9 72
opt_param_list       : 92 93
opt_stmt_list        : 8 28
param                : 96 97
param_list           : 94 97
prog                 : 0
return_stmt          : 25
simple_stmt          : 19
stmt                 : 16 17
stmt_list            : 12 15 17 27 30
type_array           : 88 99
type_array_sized     : 6 9 90 92 98
type_func            : 5 8
type_simple          : 7 10 89 91 93 100
while_header         : 12 13
while_stmt_closed    : 
while_stmt_open      : 


state 0

    (0) S' -> . prog
    (1) prog -> . decl_list
    (2) decl_list -> . decl
    (3) decl_list -> . decl_list decl
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    ID              shift and go to state 5

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    decl_init                      shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> decl_list .
    (3) decl_list -> decl_list . decl
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    $end            reduce using rule 1 (prog -> decl_list .)
    ID              shift and go to state 5

    decl                           shift and go to state 6
    decl_init                      shift and go to state 4

state 3

    (2) decl_list -> decl .
    ID              reduce using rule 2 (decl_list -> decl .)
    $end            reduce using rule 2 (decl_list -> decl .)


state 4

    (4) decl -> decl_init .
    ID              reduce using rule 4 (decl -> decl_init .)
    $end            reduce using rule 4 (decl -> decl_init .)
    IF              reduce using rule 4 (decl -> decl_init .)
    {               reduce using rule 4 (decl -> decl_init .)
    RETURN          reduce using rule 4 (decl -> decl_init .)
    FOR             reduce using rule 4 (decl -> decl_init .)
    !               reduce using rule 4 (decl -> decl_init .)
    -               reduce using rule 4 (decl -> decl_init .)
    DEC             reduce using rule 4 (decl -> decl_init .)
    INC             reduce using rule 4 (decl -> decl_init .)
    (               reduce using rule 4 (decl -> decl_init .)
    FALSE           reduce using rule 4 (decl -> decl_init .)
    TRUE            reduce using rule 4 (decl -> decl_init .)
    STRING_LIT      reduce using rule 4 (decl -> decl_init .)
    CHAR_LIT        reduce using rule 4 (decl -> decl_init .)
    FLOAT_LIT       reduce using rule 4 (decl -> decl_init .)
    INT_LIT         reduce using rule 4 (decl -> decl_init .)
    }               reduce using rule 4 (decl -> decl_init .)


state 5

    (5) decl -> ID . : type_func ;
    (6) decl -> ID . : type_array_sized ;
    (7) decl -> ID . : type_simple ;
    (8) decl_init -> ID . : type_func = { opt_stmt_list }
    (9) decl_init -> ID . : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID . : type_simple = expr ;
    :               shift and go to state 7


state 6

    (3) decl_list -> decl_list decl .
    ID              reduce using rule 3 (decl_list -> decl_list decl .)
    $end            reduce using rule 3 (decl_list -> decl_list decl .)


state 7

    (5) decl -> ID : . type_func ;
    (6) decl -> ID : . type_array_sized ;
    (7) decl -> ID : . type_simple ;
    (8) decl_init -> ID : . type_func = { opt_stmt_list }
    (9) decl_init -> ID : . type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID : . type_simple = expr ;
    (92) type_func -> . FUNCTION type_array_sized ( opt_param_list )
    (93) type_func -> . FUNCTION type_simple ( opt_param_list )
    (90) type_array_sized -> . ARRAY index type_array_sized
    (91) type_array_sized -> . ARRAY index type_simple
    (82) type_simple -> . VOID
    (83) type_simple -> . STRING
    (84) type_simple -> . CHAR
    (85) type_simple -> . BOOLEAN
    (86) type_simple -> . FLOAT
    (87) type_simple -> . INTEGER
    FUNCTION        shift and go to state 11
    ARRAY           shift and go to state 12
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_func                      shift and go to state 8
    type_array_sized               shift and go to state 9
    type_simple                    shift and go to state 10

state 8

    (5) decl -> ID : type_func . ;
    (8) decl_init -> ID : type_func . = { opt_stmt_list }
    ;               shift and go to state 19
    =               shift and go to state 20


state 9

    (6) decl -> ID : type_array_sized . ;
    (9) decl_init -> ID : type_array_sized . = { opt_expr_list } ;
    ;               shift and go to state 21
    =               shift and go to state 22


state 10

    (7) decl -> ID : type_simple . ;
    (10) decl_init -> ID : type_simple . = expr ;
    ;               shift and go to state 23
    =               shift and go to state 24


state 11

    (92) type_func -> FUNCTION . type_array_sized ( opt_param_list )
    (93) type_func -> FUNCTION . type_simple ( opt_param_list )
    (90) type_array_sized -> . ARRAY index type_array_sized
    (91) type_array_sized -> . ARRAY index type_simple
    (82) type_simple -> . VOID
    (83) type_simple -> . STRING
    (84) type_simple -> . CHAR
    (85) type_simple -> . BOOLEAN
    (86) type_simple -> . FLOAT
    (87) type_simple -> . INTEGER
    ARRAY           shift and go to state 12
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array_sized               shift and go to state 25
    type_simple                    shift and go to state 26

state 12

    (90) type_array_sized -> ARRAY . index type_array_sized
    (91) type_array_sized -> ARRAY . index type_simple
    (74) index -> . [ expr ]
    [               shift and go to state 28

    index                          shift and go to state 27

state 13

    (82) type_simple -> VOID .
    ;               reduce using rule 82 (type_simple -> VOID .)
    =               reduce using rule 82 (type_simple -> VOID .)
    (               reduce using rule 82 (type_simple -> VOID .)
    ,               reduce using rule 82 (type_simple -> VOID .)
    )               reduce using rule 82 (type_simple -> VOID .)


state 14

    (83) type_simple -> STRING .
    ;               reduce using rule 83 (type_simple -> STRING .)
    =               reduce using rule 83 (type_simple -> STRING .)
    (               reduce using rule 83 (type_simple -> STRING .)
    ,               reduce using rule 83 (type_simple -> STRING .)
    )               reduce using rule 83 (type_simple -> STRING .)


state 15

    (84) type_simple -> CHAR .
    ;               reduce using rule 84 (type_simple -> CHAR .)
    =               reduce using rule 84 (type_simple -> CHAR .)
    (               reduce using rule 84 (type_simple -> CHAR .)
    ,               reduce using rule 84 (type_simple -> CHAR .)
    )               reduce using rule 84 (type_simple -> CHAR .)


state 16

    (85) type_simple -> BOOLEAN .
    ;               reduce using rule 85 (type_simple -> BOOLEAN .)
    =               reduce using rule 85 (type_simple -> BOOLEAN .)
    (               reduce using rule 85 (type_simple -> BOOLEAN .)
    ,               reduce using rule 85 (type_simple -> BOOLEAN .)
    )               reduce using rule 85 (type_simple -> BOOLEAN .)


state 17

    (86) type_simple -> FLOAT .
    ;               reduce using rule 86 (type_simple -> FLOAT .)
    =               reduce using rule 86 (type_simple -> FLOAT .)
    (               reduce using rule 86 (type_simple -> FLOAT .)
    ,               reduce using rule 86 (type_simple -> FLOAT .)
    )               reduce using rule 86 (type_simple -> FLOAT .)


state 18

    (87) type_simple -> INTEGER .
    ;               reduce using rule 87 (type_simple -> INTEGER .)
    =               reduce using rule 87 (type_simple -> INTEGER .)
    (               reduce using rule 87 (type_simple -> INTEGER .)
    ,               reduce using rule 87 (type_simple -> INTEGER .)
    )               reduce using rule 87 (type_simple -> INTEGER .)


state 19

    (5) decl -> ID : type_func ; .
    ID              reduce using rule 5 (decl -> ID : type_func ; .)
    $end            reduce using rule 5 (decl -> ID : type_func ; .)
    IF              reduce using rule 5 (decl -> ID : type_func ; .)
    {               reduce using rule 5 (decl -> ID : type_func ; .)
    RETURN          reduce using rule 5 (decl -> ID : type_func ; .)
    FOR             reduce using rule 5 (decl -> ID : type_func ; .)
    !               reduce using rule 5 (decl -> ID : type_func ; .)
    -               reduce using rule 5 (decl -> ID : type_func ; .)
    DEC             reduce using rule 5 (decl -> ID : type_func ; .)
    INC             reduce using rule 5 (decl -> ID : type_func ; .)
    (               reduce using rule 5 (decl -> ID : type_func ; .)
    FALSE           reduce using rule 5 (decl -> ID : type_func ; .)
    TRUE            reduce using rule 5 (decl -> ID : type_func ; .)
    STRING_LIT      reduce using rule 5 (decl -> ID : type_func ; .)
    CHAR_LIT        reduce using rule 5 (decl -> ID : type_func ; .)
    FLOAT_LIT       reduce using rule 5 (decl -> ID : type_func ; .)
    INT_LIT         reduce using rule 5 (decl -> ID : type_func ; .)
    }               reduce using rule 5 (decl -> ID : type_func ; .)


state 20

    (8) decl_init -> ID : type_func = . { opt_stmt_list }
    {               shift and go to state 29


state 21

    (6) decl -> ID : type_array_sized ; .
    ID              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    $end            reduce using rule 6 (decl -> ID : type_array_sized ; .)
    IF              reduce using rule 6 (decl -> ID : type_array_sized ; .)
    {               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    RETURN          reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FOR             reduce using rule 6 (decl -> ID : type_array_sized ; .)
    !               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    -               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    DEC             reduce using rule 6 (decl -> ID : type_array_sized ; .)
    INC             reduce using rule 6 (decl -> ID : type_array_sized ; .)
    (               reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FALSE           reduce using rule 6 (decl -> ID : type_array_sized ; .)
    TRUE            reduce using rule 6 (decl -> ID : type_array_sized ; .)
    STRING_LIT      reduce using rule 6 (decl -> ID : type_array_sized ; .)
    CHAR_LIT        reduce using rule 6 (decl -> ID : type_array_sized ; .)
    FLOAT_LIT       reduce using rule 6 (decl -> ID : type_array_sized ; .)
    INT_LIT         reduce using rule 6 (decl -> ID : type_array_sized ; .)
    }               reduce using rule 6 (decl -> ID : type_array_sized ; .)


state 22

    (9) decl_init -> ID : type_array_sized = . { opt_expr_list } ;
    {               shift and go to state 30


state 23

    (7) decl -> ID : type_simple ; .
    ID              reduce using rule 7 (decl -> ID : type_simple ; .)
    $end            reduce using rule 7 (decl -> ID : type_simple ; .)
    IF              reduce using rule 7 (decl -> ID : type_simple ; .)
    {               reduce using rule 7 (decl -> ID : type_simple ; .)
    RETURN          reduce using rule 7 (decl -> ID : type_simple ; .)
    FOR             reduce using rule 7 (decl -> ID : type_simple ; .)
    !               reduce using rule 7 (decl -> ID : type_simple ; .)
    -               reduce using rule 7 (decl -> ID : type_simple ; .)
    DEC             reduce using rule 7 (decl -> ID : type_simple ; .)
    INC             reduce using rule 7 (decl -> ID : type_simple ; .)
    (               reduce using rule 7 (decl -> ID : type_simple ; .)
    FALSE           reduce using rule 7 (decl -> ID : type_simple ; .)
    TRUE            reduce using rule 7 (decl -> ID : type_simple ; .)
    STRING_LIT      reduce using rule 7 (decl -> ID : type_simple ; .)
    CHAR_LIT        reduce using rule 7 (decl -> ID : type_simple ; .)
    FLOAT_LIT       reduce using rule 7 (decl -> ID : type_simple ; .)
    INT_LIT         reduce using rule 7 (decl -> ID : type_simple ; .)
    }               reduce using rule 7 (decl -> ID : type_simple ; .)


state 24

    (10) decl_init -> ID : type_simple = . expr ;
    (37) expr -> . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr                           shift and go to state 32
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 25

    (92) type_func -> FUNCTION type_array_sized . ( opt_param_list )
    (               shift and go to state 56


state 26

    (93) type_func -> FUNCTION type_simple . ( opt_param_list )
    (               shift and go to state 57


state 27

    (90) type_array_sized -> ARRAY index . type_array_sized
    (91) type_array_sized -> ARRAY index . type_simple
    (90) type_array_sized -> . ARRAY index type_array_sized
    (91) type_array_sized -> . ARRAY index type_simple
    (82) type_simple -> . VOID
    (83) type_simple -> . STRING
    (84) type_simple -> . CHAR
    (85) type_simple -> . BOOLEAN
    (86) type_simple -> . FLOAT
    (87) type_simple -> . INTEGER
    ARRAY           shift and go to state 12
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array_sized               shift and go to state 58
    type_simple                    shift and go to state 59

state 28

    (74) index -> [ . expr ]
    (37) expr -> . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr                           shift and go to state 60
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 29

    (8) decl_init -> ID : type_func = { . opt_stmt_list }
    (14) opt_stmt_list -> . empty
    (15) opt_stmt_list -> . stmt_list
    (101) empty -> .
    (16) stmt_list -> . stmt
    (17) stmt_list -> . stmt_list stmt
    (18) stmt -> . closed_stmt
    (19) closed_stmt -> . simple_stmt
    (20) simple_stmt -> . expr ;
    (21) simple_stmt -> . for_stmt
    (22) simple_stmt -> . if_stmt
    (23) simple_stmt -> . decl
    (24) simple_stmt -> . block_stmt
    (25) simple_stmt -> . return_stmt
    (37) expr -> . expr1
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . IF ( opt_expr ) { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (27) block_stmt -> . { stmt_list }
    (26) return_stmt -> . RETURN opt_expr ;
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    }               reduce using rule 101 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 61
    {               shift and go to state 62
    RETURN          shift and go to state 77
    FOR             shift and go to state 78
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_stmt_list                  shift and go to state 63
    empty                          shift and go to state 64
    stmt_list                      shift and go to state 65
    stmt                           shift and go to state 66
    closed_stmt                    shift and go to state 67
    simple_stmt                    shift and go to state 68
    expr                           shift and go to state 69
    for_stmt                       shift and go to state 70
    if_stmt                        shift and go to state 71
    decl                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    expr1                          shift and go to state 33
    for_header                     shift and go to state 75
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 30

    (9) decl_init -> ID : type_array_sized = { . opt_expr_list } ;
    (31) opt_expr_list -> . expr_list
    (32) opt_expr_list -> . empty
    (33) expr_list -> . expr
    (34) expr_list -> . expr , expr_list
    (101) empty -> .
    (37) expr -> . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    }               reduce using rule 101 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_expr_list                  shift and go to state 79
    expr_list                      shift and go to state 80
    empty                          shift and go to state 81
    expr                           shift and go to state 82
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 31

    (40) lval -> ID . index
    (41) lval -> ID .
    (71) group -> ID . index
    (72) group -> ID . ( opt_expr_list )
    (81) factor -> ID .
    (74) index -> . [ expr ]
    =               reduce using rule 41 (lval -> ID .)
    (               shift and go to state 84
    DEC             reduce using rule 81 (factor -> ID .)
    INC             reduce using rule 81 (factor -> ID .)
    ^               reduce using rule 81 (factor -> ID .)
    %               reduce using rule 81 (factor -> ID .)
    /               reduce using rule 81 (factor -> ID .)
    *               reduce using rule 81 (factor -> ID .)
    -               reduce using rule 81 (factor -> ID .)
    +               reduce using rule 81 (factor -> ID .)
    GE              reduce using rule 81 (factor -> ID .)
    GT              reduce using rule 81 (factor -> ID .)
    LE              reduce using rule 81 (factor -> ID .)
    LT              reduce using rule 81 (factor -> ID .)
    NEQ             reduce using rule 81 (factor -> ID .)
    EQ              reduce using rule 81 (factor -> ID .)
    LAND            reduce using rule 81 (factor -> ID .)
    LOR             reduce using rule 81 (factor -> ID .)
    ;               reduce using rule 81 (factor -> ID .)
    ]               reduce using rule 81 (factor -> ID .)
    ,               reduce using rule 81 (factor -> ID .)
    }               reduce using rule 81 (factor -> ID .)
    )               reduce using rule 81 (factor -> ID .)
    [               shift and go to state 28

    index                          shift and go to state 83

state 32

    (10) decl_init -> ID : type_simple = expr . ;
    ;               shift and go to state 85


state 33

    (37) expr -> expr1 .
    ;               reduce using rule 37 (expr -> expr1 .)
    ]               reduce using rule 37 (expr -> expr1 .)
    ,               reduce using rule 37 (expr -> expr1 .)
    }               reduce using rule 37 (expr -> expr1 .)
    )               reduce using rule 37 (expr -> expr1 .)


state 34

    (38) expr1 -> expr2 .
    (43) expr2 -> expr2 . LOR expr3
    ;               reduce using rule 38 (expr1 -> expr2 .)
    ]               reduce using rule 38 (expr1 -> expr2 .)
    ,               reduce using rule 38 (expr1 -> expr2 .)
    }               reduce using rule 38 (expr1 -> expr2 .)
    )               reduce using rule 38 (expr1 -> expr2 .)
    LOR             shift and go to state 86


state 35

    (39) expr1 -> lval . = expr1
    =               shift and go to state 87


state 36

    (42) expr2 -> expr3 .
    (45) expr3 -> expr3 . LAND expr4
    LOR             reduce using rule 42 (expr2 -> expr3 .)
    ;               reduce using rule 42 (expr2 -> expr3 .)
    ]               reduce using rule 42 (expr2 -> expr3 .)
    ,               reduce using rule 42 (expr2 -> expr3 .)
    }               reduce using rule 42 (expr2 -> expr3 .)
    )               reduce using rule 42 (expr2 -> expr3 .)
    LAND            shift and go to state 88


state 37

    (44) expr3 -> expr4 .
    (47) expr4 -> expr4 . GE expr5
    (48) expr4 -> expr4 . GT expr5
    (49) expr4 -> expr4 . LE expr5
    (50) expr4 -> expr4 . LT expr5
    (51) expr4 -> expr4 . NEQ expr5
    (52) expr4 -> expr4 . EQ expr5
    LAND            reduce using rule 44 (expr3 -> expr4 .)
    LOR             reduce using rule 44 (expr3 -> expr4 .)
    ;               reduce using rule 44 (expr3 -> expr4 .)
    ]               reduce using rule 44 (expr3 -> expr4 .)
    ,               reduce using rule 44 (expr3 -> expr4 .)
    }               reduce using rule 44 (expr3 -> expr4 .)
    )               reduce using rule 44 (expr3 -> expr4 .)
    GE              shift and go to state 89
    GT              shift and go to state 90
    LE              shift and go to state 91
    LT              shift and go to state 92
    NEQ             shift and go to state 93
    EQ              shift and go to state 94


state 38

    (46) expr4 -> expr5 .
    (54) expr5 -> expr5 . - expr6
    (55) expr5 -> expr5 . + expr6
    GE              reduce using rule 46 (expr4 -> expr5 .)
    GT              reduce using rule 46 (expr4 -> expr5 .)
    LE              reduce using rule 46 (expr4 -> expr5 .)
    LT              reduce using rule 46 (expr4 -> expr5 .)
    NEQ             reduce using rule 46 (expr4 -> expr5 .)
    EQ              reduce using rule 46 (expr4 -> expr5 .)
    LAND            reduce using rule 46 (expr4 -> expr5 .)
    LOR             reduce using rule 46 (expr4 -> expr5 .)
    ;               reduce using rule 46 (expr4 -> expr5 .)
    ]               reduce using rule 46 (expr4 -> expr5 .)
    ,               reduce using rule 46 (expr4 -> expr5 .)
    }               reduce using rule 46 (expr4 -> expr5 .)
    )               reduce using rule 46 (expr4 -> expr5 .)
    -               shift and go to state 95
    +               shift and go to state 96


state 39

    (53) expr5 -> expr6 .
    (57) expr6 -> expr6 . % expr7
    (58) expr6 -> expr6 . / expr7
    (59) expr6 -> expr6 . * expr7
    -               reduce using rule 53 (expr5 -> expr6 .)
    +               reduce using rule 53 (expr5 -> expr6 .)
    GE              reduce using rule 53 (expr5 -> expr6 .)
    GT              reduce using rule 53 (expr5 -> expr6 .)
    LE              reduce using rule 53 (expr5 -> expr6 .)
    LT              reduce using rule 53 (expr5 -> expr6 .)
    NEQ             reduce using rule 53 (expr5 -> expr6 .)
    EQ              reduce using rule 53 (expr5 -> expr6 .)
    LAND            reduce using rule 53 (expr5 -> expr6 .)
    LOR             reduce using rule 53 (expr5 -> expr6 .)
    ;               reduce using rule 53 (expr5 -> expr6 .)
    ]               reduce using rule 53 (expr5 -> expr6 .)
    ,               reduce using rule 53 (expr5 -> expr6 .)
    }               reduce using rule 53 (expr5 -> expr6 .)
    )               reduce using rule 53 (expr5 -> expr6 .)
    %               shift and go to state 97
    /               shift and go to state 98
    *               shift and go to state 99


state 40

    (64) expr8 -> - . expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr8                          shift and go to state 100
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 41

    (56) expr6 -> expr7 .
    (61) expr7 -> expr7 . ^ expr8
    %               reduce using rule 56 (expr6 -> expr7 .)
    /               reduce using rule 56 (expr6 -> expr7 .)
    *               reduce using rule 56 (expr6 -> expr7 .)
    -               reduce using rule 56 (expr6 -> expr7 .)
    +               reduce using rule 56 (expr6 -> expr7 .)
    GE              reduce using rule 56 (expr6 -> expr7 .)
    GT              reduce using rule 56 (expr6 -> expr7 .)
    LE              reduce using rule 56 (expr6 -> expr7 .)
    LT              reduce using rule 56 (expr6 -> expr7 .)
    NEQ             reduce using rule 56 (expr6 -> expr7 .)
    EQ              reduce using rule 56 (expr6 -> expr7 .)
    LAND            reduce using rule 56 (expr6 -> expr7 .)
    LOR             reduce using rule 56 (expr6 -> expr7 .)
    ;               reduce using rule 56 (expr6 -> expr7 .)
    ]               reduce using rule 56 (expr6 -> expr7 .)
    ,               reduce using rule 56 (expr6 -> expr7 .)
    }               reduce using rule 56 (expr6 -> expr7 .)
    )               reduce using rule 56 (expr6 -> expr7 .)
    ^               shift and go to state 102


state 42

    (60) expr7 -> expr8 .
    ^               reduce using rule 60 (expr7 -> expr8 .)
    %               reduce using rule 60 (expr7 -> expr8 .)
    /               reduce using rule 60 (expr7 -> expr8 .)
    *               reduce using rule 60 (expr7 -> expr8 .)
    -               reduce using rule 60 (expr7 -> expr8 .)
    +               reduce using rule 60 (expr7 -> expr8 .)
    GE              reduce using rule 60 (expr7 -> expr8 .)
    GT              reduce using rule 60 (expr7 -> expr8 .)
    LE              reduce using rule 60 (expr7 -> expr8 .)
    LT              reduce using rule 60 (expr7 -> expr8 .)
    NEQ             reduce using rule 60 (expr7 -> expr8 .)
    EQ              reduce using rule 60 (expr7 -> expr8 .)
    LAND            reduce using rule 60 (expr7 -> expr8 .)
    LOR             reduce using rule 60 (expr7 -> expr8 .)
    ;               reduce using rule 60 (expr7 -> expr8 .)
    ]               reduce using rule 60 (expr7 -> expr8 .)
    ,               reduce using rule 60 (expr7 -> expr8 .)
    }               reduce using rule 60 (expr7 -> expr8 .)
    )               reduce using rule 60 (expr7 -> expr8 .)


state 43

    (62) expr8 -> expr9 .
    (68) expr9 -> expr9 . DEC
    (69) expr9 -> expr9 . INC
    ^               reduce using rule 62 (expr8 -> expr9 .)
    %               reduce using rule 62 (expr8 -> expr9 .)
    /               reduce using rule 62 (expr8 -> expr9 .)
    *               reduce using rule 62 (expr8 -> expr9 .)
    -               reduce using rule 62 (expr8 -> expr9 .)
    +               reduce using rule 62 (expr8 -> expr9 .)
    GE              reduce using rule 62 (expr8 -> expr9 .)
    GT              reduce using rule 62 (expr8 -> expr9 .)
    LE              reduce using rule 62 (expr8 -> expr9 .)
    LT              reduce using rule 62 (expr8 -> expr9 .)
    NEQ             reduce using rule 62 (expr8 -> expr9 .)
    EQ              reduce using rule 62 (expr8 -> expr9 .)
    LAND            reduce using rule 62 (expr8 -> expr9 .)
    LOR             reduce using rule 62 (expr8 -> expr9 .)
    ;               reduce using rule 62 (expr8 -> expr9 .)
    ]               reduce using rule 62 (expr8 -> expr9 .)
    ,               reduce using rule 62 (expr8 -> expr9 .)
    }               reduce using rule 62 (expr8 -> expr9 .)
    )               reduce using rule 62 (expr8 -> expr9 .)
    DEC             shift and go to state 103
    INC             shift and go to state 104


state 44

    (63) expr8 -> ! . expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr8                          shift and go to state 105
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 45

    (65) expr9 -> DEC . expr9
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr9                          shift and go to state 106
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 46

    (66) expr9 -> INC . expr9
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr9                          shift and go to state 107
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 47

    (67) expr9 -> group .
    DEC             reduce using rule 67 (expr9 -> group .)
    INC             reduce using rule 67 (expr9 -> group .)
    ^               reduce using rule 67 (expr9 -> group .)
    %               reduce using rule 67 (expr9 -> group .)
    /               reduce using rule 67 (expr9 -> group .)
    *               reduce using rule 67 (expr9 -> group .)
    -               reduce using rule 67 (expr9 -> group .)
    +               reduce using rule 67 (expr9 -> group .)
    GE              reduce using rule 67 (expr9 -> group .)
    GT              reduce using rule 67 (expr9 -> group .)
    LE              reduce using rule 67 (expr9 -> group .)
    LT              reduce using rule 67 (expr9 -> group .)
    NEQ             reduce using rule 67 (expr9 -> group .)
    EQ              reduce using rule 67 (expr9 -> group .)
    LAND            reduce using rule 67 (expr9 -> group .)
    LOR             reduce using rule 67 (expr9 -> group .)
    ;               reduce using rule 67 (expr9 -> group .)
    ]               reduce using rule 67 (expr9 -> group .)
    ,               reduce using rule 67 (expr9 -> group .)
    }               reduce using rule 67 (expr9 -> group .)
    )               reduce using rule 67 (expr9 -> group .)


state 48

    (70) group -> factor .
    DEC             reduce using rule 70 (group -> factor .)
    INC             reduce using rule 70 (group -> factor .)
    ^               reduce using rule 70 (group -> factor .)
    %               reduce using rule 70 (group -> factor .)
    /               reduce using rule 70 (group -> factor .)
    *               reduce using rule 70 (group -> factor .)
    -               reduce using rule 70 (group -> factor .)
    +               reduce using rule 70 (group -> factor .)
    GE              reduce using rule 70 (group -> factor .)
    GT              reduce using rule 70 (group -> factor .)
    LE              reduce using rule 70 (group -> factor .)
    LT              reduce using rule 70 (group -> factor .)
    NEQ             reduce using rule 70 (group -> factor .)
    EQ              reduce using rule 70 (group -> factor .)
    LAND            reduce using rule 70 (group -> factor .)
    LOR             reduce using rule 70 (group -> factor .)
    ;               reduce using rule 70 (group -> factor .)
    ]               reduce using rule 70 (group -> factor .)
    ,               reduce using rule 70 (group -> factor .)
    }               reduce using rule 70 (group -> factor .)
    )               reduce using rule 70 (group -> factor .)


state 49

    (73) group -> ( . expr )
    (37) expr -> . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr                           shift and go to state 108
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 50

    (75) factor -> FALSE .
    DEC             reduce using rule 75 (factor -> FALSE .)
    INC             reduce using rule 75 (factor -> FALSE .)
    ^               reduce using rule 75 (factor -> FALSE .)
    %               reduce using rule 75 (factor -> FALSE .)
    /               reduce using rule 75 (factor -> FALSE .)
    *               reduce using rule 75 (factor -> FALSE .)
    -               reduce using rule 75 (factor -> FALSE .)
    +               reduce using rule 75 (factor -> FALSE .)
    GE              reduce using rule 75 (factor -> FALSE .)
    GT              reduce using rule 75 (factor -> FALSE .)
    LE              reduce using rule 75 (factor -> FALSE .)
    LT              reduce using rule 75 (factor -> FALSE .)
    NEQ             reduce using rule 75 (factor -> FALSE .)
    EQ              reduce using rule 75 (factor -> FALSE .)
    LAND            reduce using rule 75 (factor -> FALSE .)
    LOR             reduce using rule 75 (factor -> FALSE .)
    ;               reduce using rule 75 (factor -> FALSE .)
    ]               reduce using rule 75 (factor -> FALSE .)
    ,               reduce using rule 75 (factor -> FALSE .)
    }               reduce using rule 75 (factor -> FALSE .)
    )               reduce using rule 75 (factor -> FALSE .)


state 51

    (76) factor -> TRUE .
    DEC             reduce using rule 76 (factor -> TRUE .)
    INC             reduce using rule 76 (factor -> TRUE .)
    ^               reduce using rule 76 (factor -> TRUE .)
    %               reduce using rule 76 (factor -> TRUE .)
    /               reduce using rule 76 (factor -> TRUE .)
    *               reduce using rule 76 (factor -> TRUE .)
    -               reduce using rule 76 (factor -> TRUE .)
    +               reduce using rule 76 (factor -> TRUE .)
    GE              reduce using rule 76 (factor -> TRUE .)
    GT              reduce using rule 76 (factor -> TRUE .)
    LE              reduce using rule 76 (factor -> TRUE .)
    LT              reduce using rule 76 (factor -> TRUE .)
    NEQ             reduce using rule 76 (factor -> TRUE .)
    EQ              reduce using rule 76 (factor -> TRUE .)
    LAND            reduce using rule 76 (factor -> TRUE .)
    LOR             reduce using rule 76 (factor -> TRUE .)
    ;               reduce using rule 76 (factor -> TRUE .)
    ]               reduce using rule 76 (factor -> TRUE .)
    ,               reduce using rule 76 (factor -> TRUE .)
    }               reduce using rule 76 (factor -> TRUE .)
    )               reduce using rule 76 (factor -> TRUE .)


state 52

    (77) factor -> STRING_LIT .
    DEC             reduce using rule 77 (factor -> STRING_LIT .)
    INC             reduce using rule 77 (factor -> STRING_LIT .)
    ^               reduce using rule 77 (factor -> STRING_LIT .)
    %               reduce using rule 77 (factor -> STRING_LIT .)
    /               reduce using rule 77 (factor -> STRING_LIT .)
    *               reduce using rule 77 (factor -> STRING_LIT .)
    -               reduce using rule 77 (factor -> STRING_LIT .)
    +               reduce using rule 77 (factor -> STRING_LIT .)
    GE              reduce using rule 77 (factor -> STRING_LIT .)
    GT              reduce using rule 77 (factor -> STRING_LIT .)
    LE              reduce using rule 77 (factor -> STRING_LIT .)
    LT              reduce using rule 77 (factor -> STRING_LIT .)
    NEQ             reduce using rule 77 (factor -> STRING_LIT .)
    EQ              reduce using rule 77 (factor -> STRING_LIT .)
    LAND            reduce using rule 77 (factor -> STRING_LIT .)
    LOR             reduce using rule 77 (factor -> STRING_LIT .)
    ;               reduce using rule 77 (factor -> STRING_LIT .)
    ]               reduce using rule 77 (factor -> STRING_LIT .)
    ,               reduce using rule 77 (factor -> STRING_LIT .)
    }               reduce using rule 77 (factor -> STRING_LIT .)
    )               reduce using rule 77 (factor -> STRING_LIT .)


state 53

    (78) factor -> CHAR_LIT .
    DEC             reduce using rule 78 (factor -> CHAR_LIT .)
    INC             reduce using rule 78 (factor -> CHAR_LIT .)
    ^               reduce using rule 78 (factor -> CHAR_LIT .)
    %               reduce using rule 78 (factor -> CHAR_LIT .)
    /               reduce using rule 78 (factor -> CHAR_LIT .)
    *               reduce using rule 78 (factor -> CHAR_LIT .)
    -               reduce using rule 78 (factor -> CHAR_LIT .)
    +               reduce using rule 78 (factor -> CHAR_LIT .)
    GE              reduce using rule 78 (factor -> CHAR_LIT .)
    GT              reduce using rule 78 (factor -> CHAR_LIT .)
    LE              reduce using rule 78 (factor -> CHAR_LIT .)
    LT              reduce using rule 78 (factor -> CHAR_LIT .)
    NEQ             reduce using rule 78 (factor -> CHAR_LIT .)
    EQ              reduce using rule 78 (factor -> CHAR_LIT .)
    LAND            reduce using rule 78 (factor -> CHAR_LIT .)
    LOR             reduce using rule 78 (factor -> CHAR_LIT .)
    ;               reduce using rule 78 (factor -> CHAR_LIT .)
    ]               reduce using rule 78 (factor -> CHAR_LIT .)
    ,               reduce using rule 78 (factor -> CHAR_LIT .)
    }               reduce using rule 78 (factor -> CHAR_LIT .)
    )               reduce using rule 78 (factor -> CHAR_LIT .)


state 54

    (79) factor -> FLOAT_LIT .
    DEC             reduce using rule 79 (factor -> FLOAT_LIT .)
    INC             reduce using rule 79 (factor -> FLOAT_LIT .)
    ^               reduce using rule 79 (factor -> FLOAT_LIT .)
    %               reduce using rule 79 (factor -> FLOAT_LIT .)
    /               reduce using rule 79 (factor -> FLOAT_LIT .)
    *               reduce using rule 79 (factor -> FLOAT_LIT .)
    -               reduce using rule 79 (factor -> FLOAT_LIT .)
    +               reduce using rule 79 (factor -> FLOAT_LIT .)
    GE              reduce using rule 79 (factor -> FLOAT_LIT .)
    GT              reduce using rule 79 (factor -> FLOAT_LIT .)
    LE              reduce using rule 79 (factor -> FLOAT_LIT .)
    LT              reduce using rule 79 (factor -> FLOAT_LIT .)
    NEQ             reduce using rule 79 (factor -> FLOAT_LIT .)
    EQ              reduce using rule 79 (factor -> FLOAT_LIT .)
    LAND            reduce using rule 79 (factor -> FLOAT_LIT .)
    LOR             reduce using rule 79 (factor -> FLOAT_LIT .)
    ;               reduce using rule 79 (factor -> FLOAT_LIT .)
    ]               reduce using rule 79 (factor -> FLOAT_LIT .)
    ,               reduce using rule 79 (factor -> FLOAT_LIT .)
    }               reduce using rule 79 (factor -> FLOAT_LIT .)
    )               reduce using rule 79 (factor -> FLOAT_LIT .)


state 55

    (80) factor -> INT_LIT .
    DEC             reduce using rule 80 (factor -> INT_LIT .)
    INC             reduce using rule 80 (factor -> INT_LIT .)
    ^               reduce using rule 80 (factor -> INT_LIT .)
    %               reduce using rule 80 (factor -> INT_LIT .)
    /               reduce using rule 80 (factor -> INT_LIT .)
    *               reduce using rule 80 (factor -> INT_LIT .)
    -               reduce using rule 80 (factor -> INT_LIT .)
    +               reduce using rule 80 (factor -> INT_LIT .)
    GE              reduce using rule 80 (factor -> INT_LIT .)
    GT              reduce using rule 80 (factor -> INT_LIT .)
    LE              reduce using rule 80 (factor -> INT_LIT .)
    LT              reduce using rule 80 (factor -> INT_LIT .)
    NEQ             reduce using rule 80 (factor -> INT_LIT .)
    EQ              reduce using rule 80 (factor -> INT_LIT .)
    LAND            reduce using rule 80 (factor -> INT_LIT .)
    LOR             reduce using rule 80 (factor -> INT_LIT .)
    ;               reduce using rule 80 (factor -> INT_LIT .)
    ]               reduce using rule 80 (factor -> INT_LIT .)
    ,               reduce using rule 80 (factor -> INT_LIT .)
    }               reduce using rule 80 (factor -> INT_LIT .)
    )               reduce using rule 80 (factor -> INT_LIT .)


state 56

    (92) type_func -> FUNCTION type_array_sized ( . opt_param_list )
    (94) opt_param_list -> . param_list
    (95) opt_param_list -> . empty
    (96) param_list -> . param
    (97) param_list -> . param_list , param
    (101) empty -> .
    (98) param -> . ID : type_array_sized
    (99) param -> . ID : type_array
    (100) param -> . ID : type_simple
    )               reduce using rule 101 (empty -> .)
    ID              shift and go to state 113

    opt_param_list                 shift and go to state 109
    param_list                     shift and go to state 110
    empty                          shift and go to state 111
    param                          shift and go to state 112

state 57

    (93) type_func -> FUNCTION type_simple ( . opt_param_list )
    (94) opt_param_list -> . param_list
    (95) opt_param_list -> . empty
    (96) param_list -> . param
    (97) param_list -> . param_list , param
    (101) empty -> .
    (98) param -> . ID : type_array_sized
    (99) param -> . ID : type_array
    (100) param -> . ID : type_simple
    )               reduce using rule 101 (empty -> .)
    ID              shift and go to state 113

    opt_param_list                 shift and go to state 114
    param_list                     shift and go to state 110
    empty                          shift and go to state 111
    param                          shift and go to state 112

state 58

    (90) type_array_sized -> ARRAY index type_array_sized .
    ;               reduce using rule 90 (type_array_sized -> ARRAY index type_array_sized .)
    =               reduce using rule 90 (type_array_sized -> ARRAY index type_array_sized .)
    (               reduce using rule 90 (type_array_sized -> ARRAY index type_array_sized .)
    ,               reduce using rule 90 (type_array_sized -> ARRAY index type_array_sized .)
    )               reduce using rule 90 (type_array_sized -> ARRAY index type_array_sized .)


state 59

    (91) type_array_sized -> ARRAY index type_simple .
    ;               reduce using rule 91 (type_array_sized -> ARRAY index type_simple .)
    =               reduce using rule 91 (type_array_sized -> ARRAY index type_simple .)
    (               reduce using rule 91 (type_array_sized -> ARRAY index type_simple .)
    ,               reduce using rule 91 (type_array_sized -> ARRAY index type_simple .)
    )               reduce using rule 91 (type_array_sized -> ARRAY index type_simple .)


state 60

    (74) index -> [ expr . ]
    ]               shift and go to state 115


state 61

    (5) decl -> ID . : type_func ;
    (6) decl -> ID . : type_array_sized ;
    (7) decl -> ID . : type_simple ;
    (8) decl_init -> ID . : type_func = { opt_stmt_list }
    (9) decl_init -> ID . : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> ID . : type_simple = expr ;
    (40) lval -> ID . index
    (41) lval -> ID .
    (71) group -> ID . index
    (72) group -> ID . ( opt_expr_list )
    (81) factor -> ID .
    (74) index -> . [ expr ]
    :               shift and go to state 7
    =               reduce using rule 41 (lval -> ID .)
    (               shift and go to state 84
    DEC             reduce using rule 81 (factor -> ID .)
    INC             reduce using rule 81 (factor -> ID .)
    ^               reduce using rule 81 (factor -> ID .)
    %               reduce using rule 81 (factor -> ID .)
    /               reduce using rule 81 (factor -> ID .)
    *               reduce using rule 81 (factor -> ID .)
    -               reduce using rule 81 (factor -> ID .)
    +               reduce using rule 81 (factor -> ID .)
    GE              reduce using rule 81 (factor -> ID .)
    GT              reduce using rule 81 (factor -> ID .)
    LE              reduce using rule 81 (factor -> ID .)
    LT              reduce using rule 81 (factor -> ID .)
    NEQ             reduce using rule 81 (factor -> ID .)
    EQ              reduce using rule 81 (factor -> ID .)
    LAND            reduce using rule 81 (factor -> ID .)
    LOR             reduce using rule 81 (factor -> ID .)
    ;               reduce using rule 81 (factor -> ID .)
    [               shift and go to state 28

    index                          shift and go to state 83

state 62

    (27) block_stmt -> { . stmt_list }
    (16) stmt_list -> . stmt
    (17) stmt_list -> . stmt_list stmt
    (18) stmt -> . closed_stmt
    (19) closed_stmt -> . simple_stmt
    (20) simple_stmt -> . expr ;
    (21) simple_stmt -> . for_stmt
    (22) simple_stmt -> . if_stmt
    (23) simple_stmt -> . decl
    (24) simple_stmt -> . block_stmt
    (25) simple_stmt -> . return_stmt
    (37) expr -> . expr1
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . IF ( opt_expr ) { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (27) block_stmt -> . { stmt_list }
    (26) return_stmt -> . RETURN opt_expr ;
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    IF              shift and go to state 76
    ID              shift and go to state 61
    {               shift and go to state 62
    RETURN          shift and go to state 77
    FOR             shift and go to state 78
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    stmt_list                      shift and go to state 116
    stmt                           shift and go to state 66
    closed_stmt                    shift and go to state 67
    simple_stmt                    shift and go to state 68
    expr                           shift and go to state 69
    for_stmt                       shift and go to state 70
    if_stmt                        shift and go to state 71
    decl                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    expr1                          shift and go to state 33
    for_header                     shift and go to state 75
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 63

    (8) decl_init -> ID : type_func = { opt_stmt_list . }
    }               shift and go to state 117


state 64

    (14) opt_stmt_list -> empty .
    }               reduce using rule 14 (opt_stmt_list -> empty .)


state 65

    (15) opt_stmt_list -> stmt_list .
    (17) stmt_list -> stmt_list . stmt
    (18) stmt -> . closed_stmt
    (19) closed_stmt -> . simple_stmt
    (20) simple_stmt -> . expr ;
    (21) simple_stmt -> . for_stmt
    (22) simple_stmt -> . if_stmt
    (23) simple_stmt -> . decl
    (24) simple_stmt -> . block_stmt
    (25) simple_stmt -> . return_stmt
    (37) expr -> . expr1
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . IF ( opt_expr ) { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (27) block_stmt -> . { stmt_list }
    (26) return_stmt -> . RETURN opt_expr ;
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    }               reduce using rule 15 (opt_stmt_list -> stmt_list .)
    IF              shift and go to state 76
    ID              shift and go to state 61
    {               shift and go to state 62
    RETURN          shift and go to state 77
    FOR             shift and go to state 78
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    stmt                           shift and go to state 118
    closed_stmt                    shift and go to state 67
    simple_stmt                    shift and go to state 68
    expr                           shift and go to state 69
    for_stmt                       shift and go to state 70
    if_stmt                        shift and go to state 71
    decl                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    expr1                          shift and go to state 33
    for_header                     shift and go to state 75
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 66

    (16) stmt_list -> stmt .
    IF              reduce using rule 16 (stmt_list -> stmt .)
    ID              reduce using rule 16 (stmt_list -> stmt .)
    {               reduce using rule 16 (stmt_list -> stmt .)
    RETURN          reduce using rule 16 (stmt_list -> stmt .)
    FOR             reduce using rule 16 (stmt_list -> stmt .)
    !               reduce using rule 16 (stmt_list -> stmt .)
    -               reduce using rule 16 (stmt_list -> stmt .)
    DEC             reduce using rule 16 (stmt_list -> stmt .)
    INC             reduce using rule 16 (stmt_list -> stmt .)
    (               reduce using rule 16 (stmt_list -> stmt .)
    FALSE           reduce using rule 16 (stmt_list -> stmt .)
    TRUE            reduce using rule 16 (stmt_list -> stmt .)
    STRING_LIT      reduce using rule 16 (stmt_list -> stmt .)
    CHAR_LIT        reduce using rule 16 (stmt_list -> stmt .)
    FLOAT_LIT       reduce using rule 16 (stmt_list -> stmt .)
    INT_LIT         reduce using rule 16 (stmt_list -> stmt .)
    }               reduce using rule 16 (stmt_list -> stmt .)


state 67

    (18) stmt -> closed_stmt .
    IF              reduce using rule 18 (stmt -> closed_stmt .)
    ID              reduce using rule 18 (stmt -> closed_stmt .)
    {               reduce using rule 18 (stmt -> closed_stmt .)
    RETURN          reduce using rule 18 (stmt -> closed_stmt .)
    FOR             reduce using rule 18 (stmt -> closed_stmt .)
    !               reduce using rule 18 (stmt -> closed_stmt .)
    -               reduce using rule 18 (stmt -> closed_stmt .)
    DEC             reduce using rule 18 (stmt -> closed_stmt .)
    INC             reduce using rule 18 (stmt -> closed_stmt .)
    (               reduce using rule 18 (stmt -> closed_stmt .)
    FALSE           reduce using rule 18 (stmt -> closed_stmt .)
    TRUE            reduce using rule 18 (stmt -> closed_stmt .)
    STRING_LIT      reduce using rule 18 (stmt -> closed_stmt .)
    CHAR_LIT        reduce using rule 18 (stmt -> closed_stmt .)
    FLOAT_LIT       reduce using rule 18 (stmt -> closed_stmt .)
    INT_LIT         reduce using rule 18 (stmt -> closed_stmt .)
    }               reduce using rule 18 (stmt -> closed_stmt .)


state 68

    (19) closed_stmt -> simple_stmt .
    IF              reduce using rule 19 (closed_stmt -> simple_stmt .)
    ID              reduce using rule 19 (closed_stmt -> simple_stmt .)
    {               reduce using rule 19 (closed_stmt -> simple_stmt .)
    RETURN          reduce using rule 19 (closed_stmt -> simple_stmt .)
    FOR             reduce using rule 19 (closed_stmt -> simple_stmt .)
    !               reduce using rule 19 (closed_stmt -> simple_stmt .)
    -               reduce using rule 19 (closed_stmt -> simple_stmt .)
    DEC             reduce using rule 19 (closed_stmt -> simple_stmt .)
    INC             reduce using rule 19 (closed_stmt -> simple_stmt .)
    (               reduce using rule 19 (closed_stmt -> simple_stmt .)
    FALSE           reduce using rule 19 (closed_stmt -> simple_stmt .)
    TRUE            reduce using rule 19 (closed_stmt -> simple_stmt .)
    STRING_LIT      reduce using rule 19 (closed_stmt -> simple_stmt .)
    CHAR_LIT        reduce using rule 19 (closed_stmt -> simple_stmt .)
    FLOAT_LIT       reduce using rule 19 (closed_stmt -> simple_stmt .)
    INT_LIT         reduce using rule 19 (closed_stmt -> simple_stmt .)
    }               reduce using rule 19 (closed_stmt -> simple_stmt .)


state 69

    (20) simple_stmt -> expr . ;
    ;               shift and go to state 119


state 70

    (21) simple_stmt -> for_stmt .
    IF              reduce using rule 21 (simple_stmt -> for_stmt .)
    ID              reduce using rule 21 (simple_stmt -> for_stmt .)
    {               reduce using rule 21 (simple_stmt -> for_stmt .)
    RETURN          reduce using rule 21 (simple_stmt -> for_stmt .)
    FOR             reduce using rule 21 (simple_stmt -> for_stmt .)
    !               reduce using rule 21 (simple_stmt -> for_stmt .)
    -               reduce using rule 21 (simple_stmt -> for_stmt .)
    DEC             reduce using rule 21 (simple_stmt -> for_stmt .)
    INC             reduce using rule 21 (simple_stmt -> for_stmt .)
    (               reduce using rule 21 (simple_stmt -> for_stmt .)
    FALSE           reduce using rule 21 (simple_stmt -> for_stmt .)
    TRUE            reduce using rule 21 (simple_stmt -> for_stmt .)
    STRING_LIT      reduce using rule 21 (simple_stmt -> for_stmt .)
    CHAR_LIT        reduce using rule 21 (simple_stmt -> for_stmt .)
    FLOAT_LIT       reduce using rule 21 (simple_stmt -> for_stmt .)
    INT_LIT         reduce using rule 21 (simple_stmt -> for_stmt .)
    }               reduce using rule 21 (simple_stmt -> for_stmt .)


state 71

    (22) simple_stmt -> if_stmt .
    IF              reduce using rule 22 (simple_stmt -> if_stmt .)
    ID              reduce using rule 22 (simple_stmt -> if_stmt .)
    {               reduce using rule 22 (simple_stmt -> if_stmt .)
    RETURN          reduce using rule 22 (simple_stmt -> if_stmt .)
    FOR             reduce using rule 22 (simple_stmt -> if_stmt .)
    !               reduce using rule 22 (simple_stmt -> if_stmt .)
    -               reduce using rule 22 (simple_stmt -> if_stmt .)
    DEC             reduce using rule 22 (simple_stmt -> if_stmt .)
    INC             reduce using rule 22 (simple_stmt -> if_stmt .)
    (               reduce using rule 22 (simple_stmt -> if_stmt .)
    FALSE           reduce using rule 22 (simple_stmt -> if_stmt .)
    TRUE            reduce using rule 22 (simple_stmt -> if_stmt .)
    STRING_LIT      reduce using rule 22 (simple_stmt -> if_stmt .)
    CHAR_LIT        reduce using rule 22 (simple_stmt -> if_stmt .)
    FLOAT_LIT       reduce using rule 22 (simple_stmt -> if_stmt .)
    INT_LIT         reduce using rule 22 (simple_stmt -> if_stmt .)
    }               reduce using rule 22 (simple_stmt -> if_stmt .)


state 72

    (23) simple_stmt -> decl .
    IF              reduce using rule 23 (simple_stmt -> decl .)
    ID              reduce using rule 23 (simple_stmt -> decl .)
    {               reduce using rule 23 (simple_stmt -> decl .)
    RETURN          reduce using rule 23 (simple_stmt -> decl .)
    FOR             reduce using rule 23 (simple_stmt -> decl .)
    !               reduce using rule 23 (simple_stmt -> decl .)
    -               reduce using rule 23 (simple_stmt -> decl .)
    DEC             reduce using rule 23 (simple_stmt -> decl .)
    INC             reduce using rule 23 (simple_stmt -> decl .)
    (               reduce using rule 23 (simple_stmt -> decl .)
    FALSE           reduce using rule 23 (simple_stmt -> decl .)
    TRUE            reduce using rule 23 (simple_stmt -> decl .)
    STRING_LIT      reduce using rule 23 (simple_stmt -> decl .)
    CHAR_LIT        reduce using rule 23 (simple_stmt -> decl .)
    FLOAT_LIT       reduce using rule 23 (simple_stmt -> decl .)
    INT_LIT         reduce using rule 23 (simple_stmt -> decl .)
    }               reduce using rule 23 (simple_stmt -> decl .)


state 73

    (24) simple_stmt -> block_stmt .
    IF              reduce using rule 24 (simple_stmt -> block_stmt .)
    ID              reduce using rule 24 (simple_stmt -> block_stmt .)
    {               reduce using rule 24 (simple_stmt -> block_stmt .)
    RETURN          reduce using rule 24 (simple_stmt -> block_stmt .)
    FOR             reduce using rule 24 (simple_stmt -> block_stmt .)
    !               reduce using rule 24 (simple_stmt -> block_stmt .)
    -               reduce using rule 24 (simple_stmt -> block_stmt .)
    DEC             reduce using rule 24 (simple_stmt -> block_stmt .)
    INC             reduce using rule 24 (simple_stmt -> block_stmt .)
    (               reduce using rule 24 (simple_stmt -> block_stmt .)
    FALSE           reduce using rule 24 (simple_stmt -> block_stmt .)
    TRUE            reduce using rule 24 (simple_stmt -> block_stmt .)
    STRING_LIT      reduce using rule 24 (simple_stmt -> block_stmt .)
    CHAR_LIT        reduce using rule 24 (simple_stmt -> block_stmt .)
    FLOAT_LIT       reduce using rule 24 (simple_stmt -> block_stmt .)
    INT_LIT         reduce using rule 24 (simple_stmt -> block_stmt .)
    }               reduce using rule 24 (simple_stmt -> block_stmt .)


state 74

    (25) simple_stmt -> return_stmt .
    IF              reduce using rule 25 (simple_stmt -> return_stmt .)
    ID              reduce using rule 25 (simple_stmt -> return_stmt .)
    {               reduce using rule 25 (simple_stmt -> return_stmt .)
    RETURN          reduce using rule 25 (simple_stmt -> return_stmt .)
    FOR             reduce using rule 25 (simple_stmt -> return_stmt .)
    !               reduce using rule 25 (simple_stmt -> return_stmt .)
    -               reduce using rule 25 (simple_stmt -> return_stmt .)
    DEC             reduce using rule 25 (simple_stmt -> return_stmt .)
    INC             reduce using rule 25 (simple_stmt -> return_stmt .)
    (               reduce using rule 25 (simple_stmt -> return_stmt .)
    FALSE           reduce using rule 25 (simple_stmt -> return_stmt .)
    TRUE            reduce using rule 25 (simple_stmt -> return_stmt .)
    STRING_LIT      reduce using rule 25 (simple_stmt -> return_stmt .)
    CHAR_LIT        reduce using rule 25 (simple_stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 25 (simple_stmt -> return_stmt .)
    INT_LIT         reduce using rule 25 (simple_stmt -> return_stmt .)
    }               reduce using rule 25 (simple_stmt -> return_stmt .)


state 75

    (30) for_stmt -> for_header . { stmt_list }
    {               shift and go to state 120


state 76

    (28) if_stmt -> IF . ( opt_expr ) { opt_stmt_list }
    (               shift and go to state 121


state 77

    (26) return_stmt -> RETURN . opt_expr ;
    (35) opt_expr -> . expr
    (36) opt_expr -> . empty
    (37) expr -> . expr1
    (101) empty -> .
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ;               reduce using rule 101 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_expr                       shift and go to state 122
    expr                           shift and go to state 123
    empty                          shift and go to state 124
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 78

    (29) for_header -> FOR . ( opt_expr ; opt_expr ; opt_expr )
    (               shift and go to state 125


state 79

    (9) decl_init -> ID : type_array_sized = { opt_expr_list . } ;
    }               shift and go to state 126


state 80

    (31) opt_expr_list -> expr_list .
    }               reduce using rule 31 (opt_expr_list -> expr_list .)
    )               reduce using rule 31 (opt_expr_list -> expr_list .)


state 81

    (32) opt_expr_list -> empty .
    }               reduce using rule 32 (opt_expr_list -> empty .)
    )               reduce using rule 32 (opt_expr_list -> empty .)


state 82

    (33) expr_list -> expr .
    (34) expr_list -> expr . , expr_list
    }               reduce using rule 33 (expr_list -> expr .)
    )               reduce using rule 33 (expr_list -> expr .)
    ,               shift and go to state 127


state 83

    (40) lval -> ID index .
    (71) group -> ID index .
    =               reduce using rule 40 (lval -> ID index .)
    DEC             reduce using rule 71 (group -> ID index .)
    INC             reduce using rule 71 (group -> ID index .)
    ^               reduce using rule 71 (group -> ID index .)
    %               reduce using rule 71 (group -> ID index .)
    /               reduce using rule 71 (group -> ID index .)
    *               reduce using rule 71 (group -> ID index .)
    -               reduce using rule 71 (group -> ID index .)
    +               reduce using rule 71 (group -> ID index .)
    GE              reduce using rule 71 (group -> ID index .)
    GT              reduce using rule 71 (group -> ID index .)
    LE              reduce using rule 71 (group -> ID index .)
    LT              reduce using rule 71 (group -> ID index .)
    NEQ             reduce using rule 71 (group -> ID index .)
    EQ              reduce using rule 71 (group -> ID index .)
    LAND            reduce using rule 71 (group -> ID index .)
    LOR             reduce using rule 71 (group -> ID index .)
    ;               reduce using rule 71 (group -> ID index .)
    ]               reduce using rule 71 (group -> ID index .)
    ,               reduce using rule 71 (group -> ID index .)
    }               reduce using rule 71 (group -> ID index .)
    )               reduce using rule 71 (group -> ID index .)


state 84

    (72) group -> ID ( . opt_expr_list )
    (31) opt_expr_list -> . expr_list
    (32) opt_expr_list -> . empty
    (33) expr_list -> . expr
    (34) expr_list -> . expr , expr_list
    (101) empty -> .
    (37) expr -> . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    )               reduce using rule 101 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_expr_list                  shift and go to state 128
    expr_list                      shift and go to state 80
    empty                          shift and go to state 81
    expr                           shift and go to state 82
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 85

    (10) decl_init -> ID : type_simple = expr ; .
    ID              reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    $end            reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    IF              reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    {               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    RETURN          reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FOR             reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    !               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    -               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    DEC             reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    INC             reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    (               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FALSE           reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    TRUE            reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    STRING_LIT      reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    CHAR_LIT        reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    FLOAT_LIT       reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    INT_LIT         reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)
    }               reduce using rule 10 (decl_init -> ID : type_simple = expr ; .)


state 86

    (43) expr2 -> expr2 LOR . expr3
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr3                          shift and go to state 129
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 87

    (39) expr1 -> lval = . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    lval                           shift and go to state 35
    expr1                          shift and go to state 130
    expr2                          shift and go to state 34
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 88

    (45) expr3 -> expr3 LAND . expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr4                          shift and go to state 131
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 89

    (47) expr4 -> expr4 GE . expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr5                          shift and go to state 132
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 90

    (48) expr4 -> expr4 GT . expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr5                          shift and go to state 133
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 91

    (49) expr4 -> expr4 LE . expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr5                          shift and go to state 134
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 92

    (50) expr4 -> expr4 LT . expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr5                          shift and go to state 135
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 93

    (51) expr4 -> expr4 NEQ . expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr5                          shift and go to state 136
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 94

    (52) expr4 -> expr4 EQ . expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr5                          shift and go to state 137
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 95

    (54) expr5 -> expr5 - . expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr6                          shift and go to state 138
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 96

    (55) expr5 -> expr5 + . expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr6                          shift and go to state 139
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 97

    (57) expr6 -> expr6 % . expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr7                          shift and go to state 140
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 98

    (58) expr6 -> expr6 / . expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr7                          shift and go to state 141
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 99

    (59) expr6 -> expr6 * . expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr7                          shift and go to state 142
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 100

    (64) expr8 -> - expr8 .
    ^               reduce using rule 64 (expr8 -> - expr8 .)
    %               reduce using rule 64 (expr8 -> - expr8 .)
    /               reduce using rule 64 (expr8 -> - expr8 .)
    *               reduce using rule 64 (expr8 -> - expr8 .)
    -               reduce using rule 64 (expr8 -> - expr8 .)
    +               reduce using rule 64 (expr8 -> - expr8 .)
    GE              reduce using rule 64 (expr8 -> - expr8 .)
    GT              reduce using rule 64 (expr8 -> - expr8 .)
    LE              reduce using rule 64 (expr8 -> - expr8 .)
    LT              reduce using rule 64 (expr8 -> - expr8 .)
    NEQ             reduce using rule 64 (expr8 -> - expr8 .)
    EQ              reduce using rule 64 (expr8 -> - expr8 .)
    LAND            reduce using rule 64 (expr8 -> - expr8 .)
    LOR             reduce using rule 64 (expr8 -> - expr8 .)
    ;               reduce using rule 64 (expr8 -> - expr8 .)
    ]               reduce using rule 64 (expr8 -> - expr8 .)
    ,               reduce using rule 64 (expr8 -> - expr8 .)
    }               reduce using rule 64 (expr8 -> - expr8 .)
    )               reduce using rule 64 (expr8 -> - expr8 .)


state 101

    (71) group -> ID . index
    (72) group -> ID . ( opt_expr_list )
    (81) factor -> ID .
    (74) index -> . [ expr ]
    (               shift and go to state 84
    DEC             reduce using rule 81 (factor -> ID .)
    INC             reduce using rule 81 (factor -> ID .)
    ^               reduce using rule 81 (factor -> ID .)
    %               reduce using rule 81 (factor -> ID .)
    /               reduce using rule 81 (factor -> ID .)
    *               reduce using rule 81 (factor -> ID .)
    -               reduce using rule 81 (factor -> ID .)
    +               reduce using rule 81 (factor -> ID .)
    GE              reduce using rule 81 (factor -> ID .)
    GT              reduce using rule 81 (factor -> ID .)
    LE              reduce using rule 81 (factor -> ID .)
    LT              reduce using rule 81 (factor -> ID .)
    NEQ             reduce using rule 81 (factor -> ID .)
    EQ              reduce using rule 81 (factor -> ID .)
    LAND            reduce using rule 81 (factor -> ID .)
    LOR             reduce using rule 81 (factor -> ID .)
    ;               reduce using rule 81 (factor -> ID .)
    ]               reduce using rule 81 (factor -> ID .)
    ,               reduce using rule 81 (factor -> ID .)
    }               reduce using rule 81 (factor -> ID .)
    )               reduce using rule 81 (factor -> ID .)
    [               shift and go to state 28

    index                          shift and go to state 143

state 102

    (61) expr7 -> expr7 ^ . expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    ID              shift and go to state 101
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr8                          shift and go to state 144
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 103

    (68) expr9 -> expr9 DEC .
    DEC             reduce using rule 68 (expr9 -> expr9 DEC .)
    INC             reduce using rule 68 (expr9 -> expr9 DEC .)
    ^               reduce using rule 68 (expr9 -> expr9 DEC .)
    %               reduce using rule 68 (expr9 -> expr9 DEC .)
    /               reduce using rule 68 (expr9 -> expr9 DEC .)
    *               reduce using rule 68 (expr9 -> expr9 DEC .)
    -               reduce using rule 68 (expr9 -> expr9 DEC .)
    +               reduce using rule 68 (expr9 -> expr9 DEC .)
    GE              reduce using rule 68 (expr9 -> expr9 DEC .)
    GT              reduce using rule 68 (expr9 -> expr9 DEC .)
    LE              reduce using rule 68 (expr9 -> expr9 DEC .)
    LT              reduce using rule 68 (expr9 -> expr9 DEC .)
    NEQ             reduce using rule 68 (expr9 -> expr9 DEC .)
    EQ              reduce using rule 68 (expr9 -> expr9 DEC .)
    LAND            reduce using rule 68 (expr9 -> expr9 DEC .)
    LOR             reduce using rule 68 (expr9 -> expr9 DEC .)
    ;               reduce using rule 68 (expr9 -> expr9 DEC .)
    ]               reduce using rule 68 (expr9 -> expr9 DEC .)
    ,               reduce using rule 68 (expr9 -> expr9 DEC .)
    }               reduce using rule 68 (expr9 -> expr9 DEC .)
    )               reduce using rule 68 (expr9 -> expr9 DEC .)


state 104

    (69) expr9 -> expr9 INC .
    DEC             reduce using rule 69 (expr9 -> expr9 INC .)
    INC             reduce using rule 69 (expr9 -> expr9 INC .)
    ^               reduce using rule 69 (expr9 -> expr9 INC .)
    %               reduce using rule 69 (expr9 -> expr9 INC .)
    /               reduce using rule 69 (expr9 -> expr9 INC .)
    *               reduce using rule 69 (expr9 -> expr9 INC .)
    -               reduce using rule 69 (expr9 -> expr9 INC .)
    +               reduce using rule 69 (expr9 -> expr9 INC .)
    GE              reduce using rule 69 (expr9 -> expr9 INC .)
    GT              reduce using rule 69 (expr9 -> expr9 INC .)
    LE              reduce using rule 69 (expr9 -> expr9 INC .)
    LT              reduce using rule 69 (expr9 -> expr9 INC .)
    NEQ             reduce using rule 69 (expr9 -> expr9 INC .)
    EQ              reduce using rule 69 (expr9 -> expr9 INC .)
    LAND            reduce using rule 69 (expr9 -> expr9 INC .)
    LOR             reduce using rule 69 (expr9 -> expr9 INC .)
    ;               reduce using rule 69 (expr9 -> expr9 INC .)
    ]               reduce using rule 69 (expr9 -> expr9 INC .)
    ,               reduce using rule 69 (expr9 -> expr9 INC .)
    }               reduce using rule 69 (expr9 -> expr9 INC .)
    )               reduce using rule 69 (expr9 -> expr9 INC .)


state 105

    (63) expr8 -> ! expr8 .
    ^               reduce using rule 63 (expr8 -> ! expr8 .)
    %               reduce using rule 63 (expr8 -> ! expr8 .)
    /               reduce using rule 63 (expr8 -> ! expr8 .)
    *               reduce using rule 63 (expr8 -> ! expr8 .)
    -               reduce using rule 63 (expr8 -> ! expr8 .)
    +               reduce using rule 63 (expr8 -> ! expr8 .)
    GE              reduce using rule 63 (expr8 -> ! expr8 .)
    GT              reduce using rule 63 (expr8 -> ! expr8 .)
    LE              reduce using rule 63 (expr8 -> ! expr8 .)
    LT              reduce using rule 63 (expr8 -> ! expr8 .)
    NEQ             reduce using rule 63 (expr8 -> ! expr8 .)
    EQ              reduce using rule 63 (expr8 -> ! expr8 .)
    LAND            reduce using rule 63 (expr8 -> ! expr8 .)
    LOR             reduce using rule 63 (expr8 -> ! expr8 .)
    ;               reduce using rule 63 (expr8 -> ! expr8 .)
    ]               reduce using rule 63 (expr8 -> ! expr8 .)
    ,               reduce using rule 63 (expr8 -> ! expr8 .)
    }               reduce using rule 63 (expr8 -> ! expr8 .)
    )               reduce using rule 63 (expr8 -> ! expr8 .)


state 106

    (65) expr9 -> DEC expr9 .
    (68) expr9 -> expr9 . DEC
    (69) expr9 -> expr9 . INC
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
    ^               reduce using rule 65 (expr9 -> DEC expr9 .)
    %               reduce using rule 65 (expr9 -> DEC expr9 .)
    /               reduce using rule 65 (expr9 -> DEC expr9 .)
    *               reduce using rule 65 (expr9 -> DEC expr9 .)
    -               reduce using rule 65 (expr9 -> DEC expr9 .)
    +               reduce using rule 65 (expr9 -> DEC expr9 .)
    GE              reduce using rule 65 (expr9 -> DEC expr9 .)
    GT              reduce using rule 65 (expr9 -> DEC expr9 .)
    LE              reduce using rule 65 (expr9 -> DEC expr9 .)
    LT              reduce using rule 65 (expr9 -> DEC expr9 .)
    NEQ             reduce using rule 65 (expr9 -> DEC expr9 .)
    EQ              reduce using rule 65 (expr9 -> DEC expr9 .)
    LAND            reduce using rule 65 (expr9 -> DEC expr9 .)
    LOR             reduce using rule 65 (expr9 -> DEC expr9 .)
    ;               reduce using rule 65 (expr9 -> DEC expr9 .)
    ]               reduce using rule 65 (expr9 -> DEC expr9 .)
    ,               reduce using rule 65 (expr9 -> DEC expr9 .)
    }               reduce using rule 65 (expr9 -> DEC expr9 .)
    )               reduce using rule 65 (expr9 -> DEC expr9 .)
    DEC             shift and go to state 103
    INC             shift and go to state 104


state 107

    (66) expr9 -> INC expr9 .
    (68) expr9 -> expr9 . DEC
    (69) expr9 -> expr9 . INC
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
    ^               reduce using rule 66 (expr9 -> INC expr9 .)
    %               reduce using rule 66 (expr9 -> INC expr9 .)
    /               reduce using rule 66 (expr9 -> INC expr9 .)
    *               reduce using rule 66 (expr9 -> INC expr9 .)
    -               reduce using rule 66 (expr9 -> INC expr9 .)
    +               reduce using rule 66 (expr9 -> INC expr9 .)
    GE              reduce using rule 66 (expr9 -> INC expr9 .)
    GT              reduce using rule 66 (expr9 -> INC expr9 .)
    LE              reduce using rule 66 (expr9 -> INC expr9 .)
    LT              reduce using rule 66 (expr9 -> INC expr9 .)
    NEQ             reduce using rule 66 (expr9 -> INC expr9 .)
    EQ              reduce using rule 66 (expr9 -> INC expr9 .)
    LAND            reduce using rule 66 (expr9 -> INC expr9 .)
    LOR             reduce using rule 66 (expr9 -> INC expr9 .)
    ;               reduce using rule 66 (expr9 -> INC expr9 .)
    ]               reduce using rule 66 (expr9 -> INC expr9 .)
    ,               reduce using rule 66 (expr9 -> INC expr9 .)
    }               reduce using rule 66 (expr9 -> INC expr9 .)
    )               reduce using rule 66 (expr9 -> INC expr9 .)
    DEC             shift and go to state 103
    INC             shift and go to state 104


state 108

    (73) group -> ( expr . )
    )               shift and go to state 145


state 109

    (92) type_func -> FUNCTION type_array_sized ( opt_param_list . )
    )               shift and go to state 146


state 110

    (94) opt_param_list -> param_list .
    (97) param_list -> param_list . , param
    )               reduce using rule 94 (opt_param_list -> param_list .)
    ,               shift and go to state 147


state 111

    (95) opt_param_list -> empty .
    )               reduce using rule 95 (opt_param_list -> empty .)


state 112

    (96) param_list -> param .
    ,               reduce using rule 96 (param_list -> param .)
    )               reduce using rule 96 (param_list -> param .)


state 113

    (98) param -> ID . : type_array_sized
    (99) param -> ID . : type_array
    (100) param -> ID . : type_simple
    :               shift and go to state 148


state 114

    (93) type_func -> FUNCTION type_simple ( opt_param_list . )
    )               shift and go to state 149


state 115

    (74) index -> [ expr ] .
    ARRAY           reduce using rule 74 (index -> [ expr ] .)
    VOID            reduce using rule 74 (index -> [ expr ] .)
    STRING          reduce using rule 74 (index -> [ expr ] .)
    CHAR            reduce using rule 74 (index -> [ expr ] .)
    BOOLEAN         reduce using rule 74 (index -> [ expr ] .)
    FLOAT           reduce using rule 74 (index -> [ expr ] .)
    INTEGER         reduce using rule 74 (index -> [ expr ] .)
    =               reduce using rule 74 (index -> [ expr ] .)
    DEC             reduce using rule 74 (index -> [ expr ] .)
    INC             reduce using rule 74 (index -> [ expr ] .)
    ^               reduce using rule 74 (index -> [ expr ] .)
    %               reduce using rule 74 (index -> [ expr ] .)
    /               reduce using rule 74 (index -> [ expr ] .)
    *               reduce using rule 74 (index -> [ expr ] .)
    -               reduce using rule 74 (index -> [ expr ] .)
    +               reduce using rule 74 (index -> [ expr ] .)
    GE              reduce using rule 74 (index -> [ expr ] .)
    GT              reduce using rule 74 (index -> [ expr ] .)
    LE              reduce using rule 74 (index -> [ expr ] .)
    LT              reduce using rule 74 (index -> [ expr ] .)
    NEQ             reduce using rule 74 (index -> [ expr ] .)
    EQ              reduce using rule 74 (index -> [ expr ] .)
    LAND            reduce using rule 74 (index -> [ expr ] .)
    LOR             reduce using rule 74 (index -> [ expr ] .)
    ;               reduce using rule 74 (index -> [ expr ] .)
    ]               reduce using rule 74 (index -> [ expr ] .)
    ,               reduce using rule 74 (index -> [ expr ] .)
    }               reduce using rule 74 (index -> [ expr ] .)
    )               reduce using rule 74 (index -> [ expr ] .)


state 116

    (27) block_stmt -> { stmt_list . }
    (17) stmt_list -> stmt_list . stmt
    (18) stmt -> . closed_stmt
    (19) closed_stmt -> . simple_stmt
    (20) simple_stmt -> . expr ;
    (21) simple_stmt -> . for_stmt
    (22) simple_stmt -> . if_stmt
    (23) simple_stmt -> . decl
    (24) simple_stmt -> . block_stmt
    (25) simple_stmt -> . return_stmt
    (37) expr -> . expr1
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . IF ( opt_expr ) { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (27) block_stmt -> . { stmt_list }
    (26) return_stmt -> . RETURN opt_expr ;
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    }               shift and go to state 150
    IF              shift and go to state 76
    ID              shift and go to state 61
    {               shift and go to state 62
    RETURN          shift and go to state 77
    FOR             shift and go to state 78
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    stmt                           shift and go to state 118
    closed_stmt                    shift and go to state 67
    simple_stmt                    shift and go to state 68
    expr                           shift and go to state 69
    for_stmt                       shift and go to state 70
    if_stmt                        shift and go to state 71
    decl                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    expr1                          shift and go to state 33
    for_header                     shift and go to state 75
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 117

    (8) decl_init -> ID : type_func = { opt_stmt_list } .
    ID              reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    $end            reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    IF              reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    {               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    RETURN          reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FOR             reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    !               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    -               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    DEC             reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    INC             reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    (               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FALSE           reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    TRUE            reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    STRING_LIT      reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    CHAR_LIT        reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    FLOAT_LIT       reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    INT_LIT         reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)
    }               reduce using rule 8 (decl_init -> ID : type_func = { opt_stmt_list } .)


state 118

    (17) stmt_list -> stmt_list stmt .
    IF              reduce using rule 17 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 17 (stmt_list -> stmt_list stmt .)
    {               reduce using rule 17 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 17 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 17 (stmt_list -> stmt_list stmt .)
    !               reduce using rule 17 (stmt_list -> stmt_list stmt .)
    -               reduce using rule 17 (stmt_list -> stmt_list stmt .)
    DEC             reduce using rule 17 (stmt_list -> stmt_list stmt .)
    INC             reduce using rule 17 (stmt_list -> stmt_list stmt .)
    (               reduce using rule 17 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 17 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 17 (stmt_list -> stmt_list stmt .)
    STRING_LIT      reduce using rule 17 (stmt_list -> stmt_list stmt .)
    CHAR_LIT        reduce using rule 17 (stmt_list -> stmt_list stmt .)
    FLOAT_LIT       reduce using rule 17 (stmt_list -> stmt_list stmt .)
    INT_LIT         reduce using rule 17 (stmt_list -> stmt_list stmt .)
    }               reduce using rule 17 (stmt_list -> stmt_list stmt .)


state 119

    (20) simple_stmt -> expr ; .
    IF              reduce using rule 20 (simple_stmt -> expr ; .)
    ID              reduce using rule 20 (simple_stmt -> expr ; .)
    {               reduce using rule 20 (simple_stmt -> expr ; .)
    RETURN          reduce using rule 20 (simple_stmt -> expr ; .)
    FOR             reduce using rule 20 (simple_stmt -> expr ; .)
    !               reduce using rule 20 (simple_stmt -> expr ; .)
    -               reduce using rule 20 (simple_stmt -> expr ; .)
    DEC             reduce using rule 20 (simple_stmt -> expr ; .)
    INC             reduce using rule 20 (simple_stmt -> expr ; .)
    (               reduce using rule 20 (simple_stmt -> expr ; .)
    FALSE           reduce using rule 20 (simple_stmt -> expr ; .)
    TRUE            reduce using rule 20 (simple_stmt -> expr ; .)
    STRING_LIT      reduce using rule 20 (simple_stmt -> expr ; .)
    CHAR_LIT        reduce using rule 20 (simple_stmt -> expr ; .)
    FLOAT_LIT       reduce using rule 20 (simple_stmt -> expr ; .)
    INT_LIT         reduce using rule 20 (simple_stmt -> expr ; .)
    }               reduce using rule 20 (simple_stmt -> expr ; .)


state 120

    (30) for_stmt -> for_header { . stmt_list }
    (16) stmt_list -> . stmt
    (17) stmt_list -> . stmt_list stmt
    (18) stmt -> . closed_stmt
    (19) closed_stmt -> . simple_stmt
    (20) simple_stmt -> . expr ;
    (21) simple_stmt -> . for_stmt
    (22) simple_stmt -> . if_stmt
    (23) simple_stmt -> . decl
    (24) simple_stmt -> . block_stmt
    (25) simple_stmt -> . return_stmt
    (37) expr -> . expr1
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . IF ( opt_expr ) { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (27) block_stmt -> . { stmt_list }
    (26) return_stmt -> . RETURN opt_expr ;
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    IF              shift and go to state 76
    ID              shift and go to state 61
    {               shift and go to state 62
    RETURN          shift and go to state 77
    FOR             shift and go to state 78
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    for_header                     shift and go to state 75
    stmt_list                      shift and go to state 151
    stmt                           shift and go to state 66
    closed_stmt                    shift and go to state 67
    simple_stmt                    shift and go to state 68
    expr                           shift and go to state 69
    for_stmt                       shift and go to state 70
    if_stmt                        shift and go to state 71
    decl                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    expr1                          shift and go to state 33
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 121

    (28) if_stmt -> IF ( . opt_expr ) { opt_stmt_list }
    (35) opt_expr -> . expr
    (36) opt_expr -> . empty
    (37) expr -> . expr1
    (101) empty -> .
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    )               reduce using rule 101 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_expr                       shift and go to state 152
    expr                           shift and go to state 123
    empty                          shift and go to state 124
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 122

    (26) return_stmt -> RETURN opt_expr . ;
    ;               shift and go to state 153


state 123

    (35) opt_expr -> expr .
    ;               reduce using rule 35 (opt_expr -> expr .)
    )               reduce using rule 35 (opt_expr -> expr .)


state 124

    (36) opt_expr -> empty .
    ;               reduce using rule 36 (opt_expr -> empty .)
    )               reduce using rule 36 (opt_expr -> empty .)


state 125

    (29) for_header -> FOR ( . opt_expr ; opt_expr ; opt_expr )
    (35) opt_expr -> . expr
    (36) opt_expr -> . empty
    (37) expr -> . expr1
    (101) empty -> .
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ;               reduce using rule 101 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_expr                       shift and go to state 154
    expr                           shift and go to state 123
    empty                          shift and go to state 124
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 126

    (9) decl_init -> ID : type_array_sized = { opt_expr_list } . ;
    ;               shift and go to state 155


state 127

    (34) expr_list -> expr , . expr_list
    (33) expr_list -> . expr
    (34) expr_list -> . expr , expr_list
    (37) expr -> . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr                           shift and go to state 82
    expr_list                      shift and go to state 156
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 128

    (72) group -> ID ( opt_expr_list . )
    )               shift and go to state 157


state 129

    (43) expr2 -> expr2 LOR expr3 .
    (45) expr3 -> expr3 . LAND expr4
    LOR             reduce using rule 43 (expr2 -> expr2 LOR expr3 .)
    ;               reduce using rule 43 (expr2 -> expr2 LOR expr3 .)
    ]               reduce using rule 43 (expr2 -> expr2 LOR expr3 .)
    ,               reduce using rule 43 (expr2 -> expr2 LOR expr3 .)
    }               reduce using rule 43 (expr2 -> expr2 LOR expr3 .)
    )               reduce using rule 43 (expr2 -> expr2 LOR expr3 .)
    LAND            shift and go to state 88


state 130

    (39) expr1 -> lval = expr1 .
    ;               reduce using rule 39 (expr1 -> lval = expr1 .)
    ]               reduce using rule 39 (expr1 -> lval = expr1 .)
    ,               reduce using rule 39 (expr1 -> lval = expr1 .)
    }               reduce using rule 39 (expr1 -> lval = expr1 .)
    )               reduce using rule 39 (expr1 -> lval = expr1 .)


state 131

    (45) expr3 -> expr3 LAND expr4 .
    (47) expr4 -> expr4 . GE expr5
    (48) expr4 -> expr4 . GT expr5
    (49) expr4 -> expr4 . LE expr5
    (50) expr4 -> expr4 . LT expr5
    (51) expr4 -> expr4 . NEQ expr5
    (52) expr4 -> expr4 . EQ expr5
    LAND            reduce using rule 45 (expr3 -> expr3 LAND expr4 .)
    LOR             reduce using rule 45 (expr3 -> expr3 LAND expr4 .)
    ;               reduce using rule 45 (expr3 -> expr3 LAND expr4 .)
    ]               reduce using rule 45 (expr3 -> expr3 LAND expr4 .)
    ,               reduce using rule 45 (expr3 -> expr3 LAND expr4 .)
    }               reduce using rule 45 (expr3 -> expr3 LAND expr4 .)
    )               reduce using rule 45 (expr3 -> expr3 LAND expr4 .)
    GE              shift and go to state 89
    GT              shift and go to state 90
    LE              shift and go to state 91
    LT              shift and go to state 92
    NEQ             shift and go to state 93
    EQ              shift and go to state 94


state 132

    (47) expr4 -> expr4 GE expr5 .
    (54) expr5 -> expr5 . - expr6
    (55) expr5 -> expr5 . + expr6
    GE              reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    GT              reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    LE              reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    LT              reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    NEQ             reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    EQ              reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    LAND            reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    LOR             reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    ;               reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    ]               reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    ,               reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    }               reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    )               reduce using rule 47 (expr4 -> expr4 GE expr5 .)
    -               shift and go to state 95
    +               shift and go to state 96


state 133

    (48) expr4 -> expr4 GT expr5 .
    (54) expr5 -> expr5 . - expr6
    (55) expr5 -> expr5 . + expr6
    GE              reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    GT              reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    LE              reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    LT              reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    NEQ             reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    EQ              reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    LAND            reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    LOR             reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    ;               reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    ]               reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    ,               reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    }               reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    )               reduce using rule 48 (expr4 -> expr4 GT expr5 .)
    -               shift and go to state 95
    +               shift and go to state 96


state 134

    (49) expr4 -> expr4 LE expr5 .
    (54) expr5 -> expr5 . - expr6
    (55) expr5 -> expr5 . + expr6
    GE              reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    GT              reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    LE              reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    LT              reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    NEQ             reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    EQ              reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    LAND            reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    LOR             reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    ;               reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    ]               reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    ,               reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    }               reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    )               reduce using rule 49 (expr4 -> expr4 LE expr5 .)
    -               shift and go to state 95
    +               shift and go to state 96


state 135

    (50) expr4 -> expr4 LT expr5 .
    (54) expr5 -> expr5 . - expr6
    (55) expr5 -> expr5 . + expr6
    GE              reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    GT              reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    LE              reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    LT              reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    NEQ             reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    EQ              reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    LAND            reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    LOR             reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    ;               reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    ]               reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    ,               reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    }               reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    )               reduce using rule 50 (expr4 -> expr4 LT expr5 .)
    -               shift and go to state 95
    +               shift and go to state 96


state 136

    (51) expr4 -> expr4 NEQ expr5 .
    (54) expr5 -> expr5 . - expr6
    (55) expr5 -> expr5 . + expr6
    GE              reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    GT              reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    LE              reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    LT              reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    NEQ             reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    EQ              reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    LAND            reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    LOR             reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    ;               reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    ]               reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    ,               reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    }               reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    )               reduce using rule 51 (expr4 -> expr4 NEQ expr5 .)
    -               shift and go to state 95
    +               shift and go to state 96


state 137

    (52) expr4 -> expr4 EQ expr5 .
    (54) expr5 -> expr5 . - expr6
    (55) expr5 -> expr5 . + expr6
    GE              reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    GT              reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    LE              reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    LT              reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    NEQ             reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    EQ              reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    LAND            reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    LOR             reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    ;               reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    ]               reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    ,               reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    }               reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    )               reduce using rule 52 (expr4 -> expr4 EQ expr5 .)
    -               shift and go to state 95
    +               shift and go to state 96


state 138

    (54) expr5 -> expr5 - expr6 .
    (57) expr6 -> expr6 . % expr7
    (58) expr6 -> expr6 . / expr7
    (59) expr6 -> expr6 . * expr7
    -               reduce using rule 54 (expr5 -> expr5 - expr6 .)
    +               reduce using rule 54 (expr5 -> expr5 - expr6 .)
    GE              reduce using rule 54 (expr5 -> expr5 - expr6 .)
    GT              reduce using rule 54 (expr5 -> expr5 - expr6 .)
    LE              reduce using rule 54 (expr5 -> expr5 - expr6 .)
    LT              reduce using rule 54 (expr5 -> expr5 - expr6 .)
    NEQ             reduce using rule 54 (expr5 -> expr5 - expr6 .)
    EQ              reduce using rule 54 (expr5 -> expr5 - expr6 .)
    LAND            reduce using rule 54 (expr5 -> expr5 - expr6 .)
    LOR             reduce using rule 54 (expr5 -> expr5 - expr6 .)
    ;               reduce using rule 54 (expr5 -> expr5 - expr6 .)
    ]               reduce using rule 54 (expr5 -> expr5 - expr6 .)
    ,               reduce using rule 54 (expr5 -> expr5 - expr6 .)
    }               reduce using rule 54 (expr5 -> expr5 - expr6 .)
    )               reduce using rule 54 (expr5 -> expr5 - expr6 .)
    %               shift and go to state 97
    /               shift and go to state 98
    *               shift and go to state 99


state 139

    (55) expr5 -> expr5 + expr6 .
    (57) expr6 -> expr6 . % expr7
    (58) expr6 -> expr6 . / expr7
    (59) expr6 -> expr6 . * expr7
    -               reduce using rule 55 (expr5 -> expr5 + expr6 .)
    +               reduce using rule 55 (expr5 -> expr5 + expr6 .)
    GE              reduce using rule 55 (expr5 -> expr5 + expr6 .)
    GT              reduce using rule 55 (expr5 -> expr5 + expr6 .)
    LE              reduce using rule 55 (expr5 -> expr5 + expr6 .)
    LT              reduce using rule 55 (expr5 -> expr5 + expr6 .)
    NEQ             reduce using rule 55 (expr5 -> expr5 + expr6 .)
    EQ              reduce using rule 55 (expr5 -> expr5 + expr6 .)
    LAND            reduce using rule 55 (expr5 -> expr5 + expr6 .)
    LOR             reduce using rule 55 (expr5 -> expr5 + expr6 .)
    ;               reduce using rule 55 (expr5 -> expr5 + expr6 .)
    ]               reduce using rule 55 (expr5 -> expr5 + expr6 .)
    ,               reduce using rule 55 (expr5 -> expr5 + expr6 .)
    }               reduce using rule 55 (expr5 -> expr5 + expr6 .)
    )               reduce using rule 55 (expr5 -> expr5 + expr6 .)
    %               shift and go to state 97
    /               shift and go to state 98
    *               shift and go to state 99


state 140

    (57) expr6 -> expr6 % expr7 .
    (61) expr7 -> expr7 . ^ expr8
    %               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    /               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    *               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    -               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    +               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    GE              reduce using rule 57 (expr6 -> expr6 % expr7 .)
    GT              reduce using rule 57 (expr6 -> expr6 % expr7 .)
    LE              reduce using rule 57 (expr6 -> expr6 % expr7 .)
    LT              reduce using rule 57 (expr6 -> expr6 % expr7 .)
    NEQ             reduce using rule 57 (expr6 -> expr6 % expr7 .)
    EQ              reduce using rule 57 (expr6 -> expr6 % expr7 .)
    LAND            reduce using rule 57 (expr6 -> expr6 % expr7 .)
    LOR             reduce using rule 57 (expr6 -> expr6 % expr7 .)
    ;               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    ]               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    ,               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    }               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    )               reduce using rule 57 (expr6 -> expr6 % expr7 .)
    ^               shift and go to state 102


state 141

    (58) expr6 -> expr6 / expr7 .
    (61) expr7 -> expr7 . ^ expr8
    %               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    /               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    *               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    -               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    +               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    GE              reduce using rule 58 (expr6 -> expr6 / expr7 .)
    GT              reduce using rule 58 (expr6 -> expr6 / expr7 .)
    LE              reduce using rule 58 (expr6 -> expr6 / expr7 .)
    LT              reduce using rule 58 (expr6 -> expr6 / expr7 .)
    NEQ             reduce using rule 58 (expr6 -> expr6 / expr7 .)
    EQ              reduce using rule 58 (expr6 -> expr6 / expr7 .)
    LAND            reduce using rule 58 (expr6 -> expr6 / expr7 .)
    LOR             reduce using rule 58 (expr6 -> expr6 / expr7 .)
    ;               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    ]               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    ,               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    }               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    )               reduce using rule 58 (expr6 -> expr6 / expr7 .)
    ^               shift and go to state 102


state 142

    (59) expr6 -> expr6 * expr7 .
    (61) expr7 -> expr7 . ^ expr8
    %               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    /               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    *               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    -               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    +               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    GE              reduce using rule 59 (expr6 -> expr6 * expr7 .)
    GT              reduce using rule 59 (expr6 -> expr6 * expr7 .)
    LE              reduce using rule 59 (expr6 -> expr6 * expr7 .)
    LT              reduce using rule 59 (expr6 -> expr6 * expr7 .)
    NEQ             reduce using rule 59 (expr6 -> expr6 * expr7 .)
    EQ              reduce using rule 59 (expr6 -> expr6 * expr7 .)
    LAND            reduce using rule 59 (expr6 -> expr6 * expr7 .)
    LOR             reduce using rule 59 (expr6 -> expr6 * expr7 .)
    ;               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    ]               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    ,               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    }               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    )               reduce using rule 59 (expr6 -> expr6 * expr7 .)
    ^               shift and go to state 102


state 143

    (71) group -> ID index .
    DEC             reduce using rule 71 (group -> ID index .)
    INC             reduce using rule 71 (group -> ID index .)
    ^               reduce using rule 71 (group -> ID index .)
    %               reduce using rule 71 (group -> ID index .)
    /               reduce using rule 71 (group -> ID index .)
    *               reduce using rule 71 (group -> ID index .)
    -               reduce using rule 71 (group -> ID index .)
    +               reduce using rule 71 (group -> ID index .)
    GE              reduce using rule 71 (group -> ID index .)
    GT              reduce using rule 71 (group -> ID index .)
    LE              reduce using rule 71 (group -> ID index .)
    LT              reduce using rule 71 (group -> ID index .)
    NEQ             reduce using rule 71 (group -> ID index .)
    EQ              reduce using rule 71 (group -> ID index .)
    LAND            reduce using rule 71 (group -> ID index .)
    LOR             reduce using rule 71 (group -> ID index .)
    ;               reduce using rule 71 (group -> ID index .)
    ]               reduce using rule 71 (group -> ID index .)
    ,               reduce using rule 71 (group -> ID index .)
    }               reduce using rule 71 (group -> ID index .)
    )               reduce using rule 71 (group -> ID index .)


state 144

    (61) expr7 -> expr7 ^ expr8 .
    ^               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    %               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    /               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    *               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    -               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    +               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    GE              reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    GT              reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    LE              reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    LT              reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    NEQ             reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    EQ              reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    LAND            reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    LOR             reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    ;               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    ]               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    ,               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    }               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)
    )               reduce using rule 61 (expr7 -> expr7 ^ expr8 .)


state 145

    (73) group -> ( expr ) .
    DEC             reduce using rule 73 (group -> ( expr ) .)
    INC             reduce using rule 73 (group -> ( expr ) .)
    ^               reduce using rule 73 (group -> ( expr ) .)
    %               reduce using rule 73 (group -> ( expr ) .)
    /               reduce using rule 73 (group -> ( expr ) .)
    *               reduce using rule 73 (group -> ( expr ) .)
    -               reduce using rule 73 (group -> ( expr ) .)
    +               reduce using rule 73 (group -> ( expr ) .)
    GE              reduce using rule 73 (group -> ( expr ) .)
    GT              reduce using rule 73 (group -> ( expr ) .)
    LE              reduce using rule 73 (group -> ( expr ) .)
    LT              reduce using rule 73 (group -> ( expr ) .)
    NEQ             reduce using rule 73 (group -> ( expr ) .)
    EQ              reduce using rule 73 (group -> ( expr ) .)
    LAND            reduce using rule 73 (group -> ( expr ) .)
    LOR             reduce using rule 73 (group -> ( expr ) .)
    ;               reduce using rule 73 (group -> ( expr ) .)
    ]               reduce using rule 73 (group -> ( expr ) .)
    ,               reduce using rule 73 (group -> ( expr ) .)
    }               reduce using rule 73 (group -> ( expr ) .)
    )               reduce using rule 73 (group -> ( expr ) .)


state 146

    (92) type_func -> FUNCTION type_array_sized ( opt_param_list ) .
    ;               reduce using rule 92 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)
    =               reduce using rule 92 (type_func -> FUNCTION type_array_sized ( opt_param_list ) .)


state 147

    (97) param_list -> param_list , . param
    (98) param -> . ID : type_array_sized
    (99) param -> . ID : type_array
    (100) param -> . ID : type_simple
    ID              shift and go to state 113

    param                          shift and go to state 158

state 148

    (98) param -> ID : . type_array_sized
    (99) param -> ID : . type_array
    (100) param -> ID : . type_simple
    (90) type_array_sized -> . ARRAY index type_array_sized
    (91) type_array_sized -> . ARRAY index type_simple
    (88) type_array -> . ARRAY [ ] type_array
    (89) type_array -> . ARRAY [ ] type_simple
    (82) type_simple -> . VOID
    (83) type_simple -> . STRING
    (84) type_simple -> . CHAR
    (85) type_simple -> . BOOLEAN
    (86) type_simple -> . FLOAT
    (87) type_simple -> . INTEGER
    ARRAY           shift and go to state 162
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array_sized               shift and go to state 159
    type_array                     shift and go to state 160
    type_simple                    shift and go to state 161

state 149

    (93) type_func -> FUNCTION type_simple ( opt_param_list ) .
    ;               reduce using rule 93 (type_func -> FUNCTION type_simple ( opt_param_list ) .)
    =               reduce using rule 93 (type_func -> FUNCTION type_simple ( opt_param_list ) .)


state 150

    (27) block_stmt -> { stmt_list } .
    IF              reduce using rule 27 (block_stmt -> { stmt_list } .)
    ID              reduce using rule 27 (block_stmt -> { stmt_list } .)
    {               reduce using rule 27 (block_stmt -> { stmt_list } .)
    RETURN          reduce using rule 27 (block_stmt -> { stmt_list } .)
    FOR             reduce using rule 27 (block_stmt -> { stmt_list } .)
    !               reduce using rule 27 (block_stmt -> { stmt_list } .)
    -               reduce using rule 27 (block_stmt -> { stmt_list } .)
    DEC             reduce using rule 27 (block_stmt -> { stmt_list } .)
    INC             reduce using rule 27 (block_stmt -> { stmt_list } .)
    (               reduce using rule 27 (block_stmt -> { stmt_list } .)
    FALSE           reduce using rule 27 (block_stmt -> { stmt_list } .)
    TRUE            reduce using rule 27 (block_stmt -> { stmt_list } .)
    STRING_LIT      reduce using rule 27 (block_stmt -> { stmt_list } .)
    CHAR_LIT        reduce using rule 27 (block_stmt -> { stmt_list } .)
    FLOAT_LIT       reduce using rule 27 (block_stmt -> { stmt_list } .)
    INT_LIT         reduce using rule 27 (block_stmt -> { stmt_list } .)
    }               reduce using rule 27 (block_stmt -> { stmt_list } .)


state 151

    (30) for_stmt -> for_header { stmt_list . }
    (17) stmt_list -> stmt_list . stmt
    (18) stmt -> . closed_stmt
    (19) closed_stmt -> . simple_stmt
    (20) simple_stmt -> . expr ;
    (21) simple_stmt -> . for_stmt
    (22) simple_stmt -> . if_stmt
    (23) simple_stmt -> . decl
    (24) simple_stmt -> . block_stmt
    (25) simple_stmt -> . return_stmt
    (37) expr -> . expr1
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . IF ( opt_expr ) { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (27) block_stmt -> . { stmt_list }
    (26) return_stmt -> . RETURN opt_expr ;
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    }               shift and go to state 163
    IF              shift and go to state 76
    ID              shift and go to state 61
    {               shift and go to state 62
    RETURN          shift and go to state 77
    FOR             shift and go to state 78
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    for_header                     shift and go to state 75
    stmt                           shift and go to state 118
    closed_stmt                    shift and go to state 67
    simple_stmt                    shift and go to state 68
    expr                           shift and go to state 69
    for_stmt                       shift and go to state 70
    if_stmt                        shift and go to state 71
    decl                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    expr1                          shift and go to state 33
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 152

    (28) if_stmt -> IF ( opt_expr . ) { opt_stmt_list }
    )               shift and go to state 164


state 153

    (26) return_stmt -> RETURN opt_expr ; .
    IF              reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    ID              reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    {               reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    RETURN          reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    FOR             reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    !               reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    -               reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    DEC             reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    INC             reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    (               reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    FALSE           reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    TRUE            reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    STRING_LIT      reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    CHAR_LIT        reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    FLOAT_LIT       reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    INT_LIT         reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)
    }               reduce using rule 26 (return_stmt -> RETURN opt_expr ; .)


state 154

    (29) for_header -> FOR ( opt_expr . ; opt_expr ; opt_expr )
    ;               shift and go to state 165


state 155

    (9) decl_init -> ID : type_array_sized = { opt_expr_list } ; .
    ID              reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    $end            reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    IF              reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    {               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    RETURN          reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FOR             reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    !               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    -               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    DEC             reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    INC             reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    (               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FALSE           reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    TRUE            reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    STRING_LIT      reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    CHAR_LIT        reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    FLOAT_LIT       reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    INT_LIT         reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)
    }               reduce using rule 9 (decl_init -> ID : type_array_sized = { opt_expr_list } ; .)


state 156

    (34) expr_list -> expr , expr_list .
    }               reduce using rule 34 (expr_list -> expr , expr_list .)
    )               reduce using rule 34 (expr_list -> expr , expr_list .)


state 157

    (72) group -> ID ( opt_expr_list ) .
    DEC             reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    INC             reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    ^               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    %               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    /               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    *               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    -               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    +               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    GE              reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    GT              reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    LE              reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    LT              reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    NEQ             reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    EQ              reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    LAND            reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    LOR             reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    ;               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    ]               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    ,               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    }               reduce using rule 72 (group -> ID ( opt_expr_list ) .)
    )               reduce using rule 72 (group -> ID ( opt_expr_list ) .)


state 158

    (97) param_list -> param_list , param .
    ,               reduce using rule 97 (param_list -> param_list , param .)
    )               reduce using rule 97 (param_list -> param_list , param .)


state 159

    (98) param -> ID : type_array_sized .
    ,               reduce using rule 98 (param -> ID : type_array_sized .)
    )               reduce using rule 98 (param -> ID : type_array_sized .)


state 160

    (99) param -> ID : type_array .
    ,               reduce using rule 99 (param -> ID : type_array .)
    )               reduce using rule 99 (param -> ID : type_array .)


state 161

    (100) param -> ID : type_simple .
    ,               reduce using rule 100 (param -> ID : type_simple .)
    )               reduce using rule 100 (param -> ID : type_simple .)


state 162

    (90) type_array_sized -> ARRAY . index type_array_sized
    (91) type_array_sized -> ARRAY . index type_simple
    (88) type_array -> ARRAY . [ ] type_array
    (89) type_array -> ARRAY . [ ] type_simple
    (74) index -> . [ expr ]
    [               shift and go to state 166

    index                          shift and go to state 27

state 163

    (30) for_stmt -> for_header { stmt_list } .
    IF              reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    ID              reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    {               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    RETURN          reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    FOR             reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    !               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    -               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    DEC             reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    INC             reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    (               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    FALSE           reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    TRUE            reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    STRING_LIT      reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    CHAR_LIT        reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    FLOAT_LIT       reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    INT_LIT         reduce using rule 30 (for_stmt -> for_header { stmt_list } .)
    }               reduce using rule 30 (for_stmt -> for_header { stmt_list } .)


state 164

    (28) if_stmt -> IF ( opt_expr ) . { opt_stmt_list }
    {               shift and go to state 167


state 165

    (29) for_header -> FOR ( opt_expr ; . opt_expr ; opt_expr )
    (35) opt_expr -> . expr
    (36) opt_expr -> . empty
    (37) expr -> . expr1
    (101) empty -> .
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ;               reduce using rule 101 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_expr                       shift and go to state 168
    expr                           shift and go to state 123
    empty                          shift and go to state 124
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 166

    (88) type_array -> ARRAY [ . ] type_array
    (89) type_array -> ARRAY [ . ] type_simple
    (74) index -> [ . expr ]
    (37) expr -> . expr1
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    ]               shift and go to state 169
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    expr                           shift and go to state 60
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 167

    (28) if_stmt -> IF ( opt_expr ) { . opt_stmt_list }
    (14) opt_stmt_list -> . empty
    (15) opt_stmt_list -> . stmt_list
    (101) empty -> .
    (16) stmt_list -> . stmt
    (17) stmt_list -> . stmt_list stmt
    (18) stmt -> . closed_stmt
    (19) closed_stmt -> . simple_stmt
    (20) simple_stmt -> . expr ;
    (21) simple_stmt -> . for_stmt
    (22) simple_stmt -> . if_stmt
    (23) simple_stmt -> . decl
    (24) simple_stmt -> . block_stmt
    (25) simple_stmt -> . return_stmt
    (37) expr -> . expr1
    (30) for_stmt -> . for_header { stmt_list }
    (28) if_stmt -> . IF ( opt_expr ) { opt_stmt_list }
    (4) decl -> . decl_init
    (5) decl -> . ID : type_func ;
    (6) decl -> . ID : type_array_sized ;
    (7) decl -> . ID : type_simple ;
    (27) block_stmt -> . { stmt_list }
    (26) return_stmt -> . RETURN opt_expr ;
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (29) for_header -> . FOR ( opt_expr ; opt_expr ; opt_expr )
    (8) decl_init -> . ID : type_func = { opt_stmt_list }
    (9) decl_init -> . ID : type_array_sized = { opt_expr_list } ;
    (10) decl_init -> . ID : type_simple = expr ;
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    }               reduce using rule 101 (empty -> .)
    IF              shift and go to state 76
    ID              shift and go to state 61
    {               shift and go to state 62
    RETURN          shift and go to state 77
    FOR             shift and go to state 78
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_stmt_list                  shift and go to state 170
    empty                          shift and go to state 64
    stmt_list                      shift and go to state 65
    stmt                           shift and go to state 66
    closed_stmt                    shift and go to state 67
    simple_stmt                    shift and go to state 68
    expr                           shift and go to state 69
    for_stmt                       shift and go to state 70
    if_stmt                        shift and go to state 71
    decl                           shift and go to state 72
    block_stmt                     shift and go to state 73
    return_stmt                    shift and go to state 74
    expr1                          shift and go to state 33
    for_header                     shift and go to state 75
    decl_init                      shift and go to state 4
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 168

    (29) for_header -> FOR ( opt_expr ; opt_expr . ; opt_expr )
    ;               shift and go to state 171


state 169

    (88) type_array -> ARRAY [ ] . type_array
    (89) type_array -> ARRAY [ ] . type_simple
    (88) type_array -> . ARRAY [ ] type_array
    (89) type_array -> . ARRAY [ ] type_simple
    (82) type_simple -> . VOID
    (83) type_simple -> . STRING
    (84) type_simple -> . CHAR
    (85) type_simple -> . BOOLEAN
    (86) type_simple -> . FLOAT
    (87) type_simple -> . INTEGER
    ARRAY           shift and go to state 172
    VOID            shift and go to state 13
    STRING          shift and go to state 14
    CHAR            shift and go to state 15
    BOOLEAN         shift and go to state 16
    FLOAT           shift and go to state 17
    INTEGER         shift and go to state 18

    type_array                     shift and go to state 173
    type_simple                    shift and go to state 174

state 170

    (28) if_stmt -> IF ( opt_expr ) { opt_stmt_list . }
    }               shift and go to state 175


state 171

    (29) for_header -> FOR ( opt_expr ; opt_expr ; . opt_expr )
    (35) opt_expr -> . expr
    (36) opt_expr -> . empty
    (37) expr -> . expr1
    (101) empty -> .
    (38) expr1 -> . expr2
    (39) expr1 -> . lval = expr1
    (42) expr2 -> . expr3
    (43) expr2 -> . expr2 LOR expr3
    (40) lval -> . ID index
    (41) lval -> . ID
    (44) expr3 -> . expr4
    (45) expr3 -> . expr3 LAND expr4
    (46) expr4 -> . expr5
    (47) expr4 -> . expr4 GE expr5
    (48) expr4 -> . expr4 GT expr5
    (49) expr4 -> . expr4 LE expr5
    (50) expr4 -> . expr4 LT expr5
    (51) expr4 -> . expr4 NEQ expr5
    (52) expr4 -> . expr4 EQ expr5
    (53) expr5 -> . expr6
    (54) expr5 -> . expr5 - expr6
    (55) expr5 -> . expr5 + expr6
    (56) expr6 -> . expr7
    (57) expr6 -> . expr6 % expr7
    (58) expr6 -> . expr6 / expr7
    (59) expr6 -> . expr6 * expr7
    (60) expr7 -> . expr8
    (61) expr7 -> . expr7 ^ expr8
    (62) expr8 -> . expr9
    (63) expr8 -> . ! expr8
    (64) expr8 -> . - expr8
    (65) expr9 -> . DEC expr9
    (66) expr9 -> . INC expr9
    (67) expr9 -> . group
    (68) expr9 -> . expr9 DEC
    (69) expr9 -> . expr9 INC
    (70) group -> . factor
    (71) group -> . ID index
    (72) group -> . ID ( opt_expr_list )
    (73) group -> . ( expr )
    (75) factor -> . FALSE
    (76) factor -> . TRUE
    (77) factor -> . STRING_LIT
    (78) factor -> . CHAR_LIT
    (79) factor -> . FLOAT_LIT
    (80) factor -> . INT_LIT
    (81) factor -> . ID
    )               reduce using rule 101 (empty -> .)
    ID              shift and go to state 31
    !               shift and go to state 44
    -               shift and go to state 40
    DEC             shift and go to state 45
    INC             shift and go to state 46
    (               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRING_LIT      shift and go to state 52
    CHAR_LIT        shift and go to state 53
    FLOAT_LIT       shift and go to state 54
    INT_LIT         shift and go to state 55

    opt_expr                       shift and go to state 176
    expr                           shift and go to state 123
    empty                          shift and go to state 124
    expr1                          shift and go to state 33
    expr2                          shift and go to state 34
    lval                           shift and go to state 35
    expr3                          shift and go to state 36
    expr4                          shift and go to state 37
    expr5                          shift and go to state 38
    expr6                          shift and go to state 39
    expr7                          shift and go to state 41
    expr8                          shift and go to state 42
    expr9                          shift and go to state 43
    group                          shift and go to state 47
    factor                         shift and go to state 48

state 172

    (88) type_array -> ARRAY . [ ] type_array
    (89) type_array -> ARRAY . [ ] type_simple
    [               shift and go to state 177


state 173

    (88) type_array -> ARRAY [ ] type_array .
    ,               reduce using rule 88 (type_array -> ARRAY [ ] type_array .)
    )               reduce using rule 88 (type_array -> ARRAY [ ] type_array .)


state 174

    (89) type_array -> ARRAY [ ] type_simple .
    ,               reduce using rule 89 (type_array -> ARRAY [ ] type_simple .)
    )               reduce using rule 89 (type_array -> ARRAY [ ] type_simple .)


state 175

    (28) if_stmt -> IF ( opt_expr ) { opt_stmt_list } .
    IF              reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    ID              reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    {               reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    RETURN          reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    FOR             reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    !               reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    -               reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    DEC             reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    INC             reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    (               reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    FALSE           reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    TRUE            reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    STRING_LIT      reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    CHAR_LIT        reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    FLOAT_LIT       reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    INT_LIT         reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)
    }               reduce using rule 28 (if_stmt -> IF ( opt_expr ) { opt_stmt_list } .)


state 176

    (29) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr . )
    )               shift and go to state 178


state 177

    (88) type_array -> ARRAY [ . ] type_array
    (89) type_array -> ARRAY [ . ] type_simple
    ]               shift and go to state 169


state 178

    (29) for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .
    {               reduce using rule 29 (for_header -> FOR ( opt_expr ; opt_expr ; opt_expr ) .)


Conflicts:

shift/reduce conflict for DEC in state 106 resolved as shift
shift/reduce conflict for INC in state 106 resolved as shift
shift/reduce conflict for DEC in state 107 resolved as shift
shift/reduce conflict for INC in state 107 resolved as shift