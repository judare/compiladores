/* =================================================================== *
 *                                                                     *
 * knight.bminor                                                       *
 *                                                                     *
 * El problema del caballo es un antiguo problema matemático en el que *
 * se pide que, teniendo una cuadrícula de n x n casillas y un caballo *
 * de ajedrez colocado en una posición cualquiera ( x, y ), el caballo *
 * pase por todas las casillas y una sola vez.                         *                                      
 *                                                                     *
 * =================================================================== */

N: integer = 8;       // Tamaño del tablero

index: function integer (r: integer, c:integer) = {
    return r * N + c;
}

// Función auxiliar para imprimir el tablero
print_board: function void (board: array [] integer) = {
    r: integer;
    c: integer;

    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++) {
            if (i % 2 == j % 2) {
                print board[index(r,c)];
            }
        }
        print '\n';
    }
}

// Función auxiliar para validar movtos válidos
can_move: function boolean (r, integer, c: integer, board: array [] integer) = {
    return r >= 0 && r < N && c >= 0 && c < N && board[index(r,c)] == 0;
}

// Función recursiva para que el caballo recorra el tablero
walk: function boolean (r: integer, c: integer, m: integer, board: array [] integer, xmoves: array [] integer, ymoves: array [] integer) = {
    i: integer;

    if (m == N * N) {
        print_board(board);
        return true;
    }

    for (i = 0; i < array_length(xmoves); i++) {
        next_x: integer = r + xmoves[i];
        next_y: integer = c + ymoves[i];
        if (can_move(next_x, next_y, board)) {
            board[index(next_x, next_y)] = m;
            if (walk(next_x, next_y, m+1, board, xmoves, ymoves)) {
                return true
            }
            board[index(next_x, next_y)] = 0;
        }
    }
    return false;
}

main: function void () = {
    board: array [N*N] integer;

    xmoves: array [N] integer = {2, 1, -1, -2, -2, -1, 1, 2};
    ymoves: array [N] integer = {1, 2, 2, 1, -1, -2, -2, -1};

    if (walk(0, 0, 1, board, xmoves, ymoves)) {
        print "Solución encontrada!\n";
    } else {
        print "No existe solución\n";
    }
}