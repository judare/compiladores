Grammar:

Rule 0     S' -> S
Rule 1     S -> E
Rule 2     E -> ID
Rule 3     E -> E PLUS E  [precedence=left, level=2]
Rule 4     E -> ID ASSIGN E  [precedence=right, level=1]
Rule 5     E -> WHILE E DO E

Unused terminals:

    RPAREN
    LPAREN
    INT

Terminals, with rules where they appear:

ASSIGN               : 4
DO                   : 5
ID                   : 2 4
INT                  : 
LPAREN               : 
PLUS                 : 3
RPAREN               : 
WHILE                : 5
error                : 

Nonterminals, with rules where they appear:

E                    : 1 3 3 4 5 5
S                    : 0


state 0

    (0) S' -> . S
    (1) S -> . E
    (2) E -> . ID
    (3) E -> . E PLUS E
    (4) E -> . ID ASSIGN E
    (5) E -> . WHILE E DO E
    ID              shift and go to state 3
    WHILE           shift and go to state 4

    S                              shift and go to state 1
    E                              shift and go to state 2

state 1

    (0) S' -> S .


state 2

    (1) S -> E .
    (3) E -> E . PLUS E
    $end            reduce using rule 1 (S -> E .)
    PLUS            shift and go to state 5


state 3

    (2) E -> ID .
    (4) E -> ID . ASSIGN E
    PLUS            reduce using rule 2 (E -> ID .)
    $end            reduce using rule 2 (E -> ID .)
    DO              reduce using rule 2 (E -> ID .)
    ASSIGN          shift and go to state 6


state 4

    (5) E -> WHILE . E DO E
    (2) E -> . ID
    (3) E -> . E PLUS E
    (4) E -> . ID ASSIGN E
    (5) E -> . WHILE E DO E
    ID              shift and go to state 3
    WHILE           shift and go to state 4

    E                              shift and go to state 7

state 5

    (3) E -> E PLUS . E
    (2) E -> . ID
    (3) E -> . E PLUS E
    (4) E -> . ID ASSIGN E
    (5) E -> . WHILE E DO E
    ID              shift and go to state 3
    WHILE           shift and go to state 4

    E                              shift and go to state 8

state 6

    (4) E -> ID ASSIGN . E
    (2) E -> . ID
    (3) E -> . E PLUS E
    (4) E -> . ID ASSIGN E
    (5) E -> . WHILE E DO E
    ID              shift and go to state 3
    WHILE           shift and go to state 4

    E                              shift and go to state 9

state 7

    (5) E -> WHILE E . DO E
    (3) E -> E . PLUS E
    DO              shift and go to state 10
    PLUS            shift and go to state 5


state 8

    (3) E -> E PLUS E .
    (3) E -> E . PLUS E
    PLUS            reduce using rule 3 (E -> E PLUS E .)
    $end            reduce using rule 3 (E -> E PLUS E .)
    DO              reduce using rule 3 (E -> E PLUS E .)


state 9

    (4) E -> ID ASSIGN E .
    (3) E -> E . PLUS E
    $end            reduce using rule 4 (E -> ID ASSIGN E .)
    DO              reduce using rule 4 (E -> ID ASSIGN E .)
    PLUS            shift and go to state 5


state 10

    (5) E -> WHILE E DO . E
    (2) E -> . ID
    (3) E -> . E PLUS E
    (4) E -> . ID ASSIGN E
    (5) E -> . WHILE E DO E
    ID              shift and go to state 3
    WHILE           shift and go to state 4

    E                              shift and go to state 11

state 11

    (5) E -> WHILE E DO E .
    (3) E -> E . PLUS E
  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 5 (E -> WHILE E DO E .)
    DO              reduce using rule 5 (E -> WHILE E DO E .)
    PLUS            shift and go to state 5


Conflicts:

shift/reduce conflict for PLUS in state 11 resolved as shift